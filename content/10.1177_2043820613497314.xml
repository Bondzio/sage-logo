<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  PUBLIC "-//NLM//DTD Journal Publishing DTD v2.3 20070202//EN" "journalpublishing.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="review-article">
<front>
<journal-meta>
<journal-id journal-id-type="publisher-id">DHG</journal-id>
<journal-id journal-id-type="hwp">spdhg</journal-id>
<journal-title>Dialogues in Human Geography</journal-title>
<issn pub-type="ppub">2043-8206</issn>
<issn pub-type="epub">2043-8214</issn>
<publisher>
<publisher-name>SAGE Publications</publisher-name>
<publisher-loc>Sage UK: London, England</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="doi">10.1177/2043820613497314</article-id>
<article-id pub-id-type="publisher-id">10.1177_2043820613497314</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>BOOK REVIEW FORUM 2</subject>
<subj-group subj-group-type="heading">
<subject>Author response</subject>
</subj-group></subj-group>
</article-categories>
<title-group>
<article-title>Code/space and the nature, production and enrolment of software</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<name>
<surname>Dodge</surname>
<given-names>Martin</given-names>
</name>
<aff id="aff1-2043820613497314"><italic>University of Manchester, UK, and Rob Kitchin, National Institute for Regional and Spatial Analysis, National University of Ireland, Maynooth, Ireland</italic></aff>
</contrib>
</contrib-group>
<pub-date pub-type="epub-ppub">
<month>7</month>
<year>2013</year>
</pub-date>
<volume>3</volume>
<issue>2</issue>
<fpage>249</fpage>
<lpage>252</lpage>
<permissions>
<copyright-statement>© The Author(s) 2013</copyright-statement>
<copyright-year>2013</copyright-year>
<copyright-holder content-type="sage">SAGE Publications</copyright-holder>
</permissions>
</article-meta>
</front>
<body>
<p>In the four or so years since we completed the manuscript of <italic>Code/Space</italic>, it is evermore apparent that the onrushing pace of digitisation of economic transactions and social interactions means that scope of software has increased in most people’s lives, yet the ability to comprehend the workings of code itself and account for its agency remains limited. Given the growing automation of activities, the potential advantages at least for some, and the inherent risks of taking humans out of the loop, it is helpful to have this forum to consider why code matters from a spatial perspective and how human geographers might contribute to documenting work of software.</p>
<p>Before we respond to their critiques, we would like to thank Paul Adams, Aaron Kellerman, Sam Kinsey and Mark Wilson for reading and ruminating on our book <italic>Code/Space</italic>. Collectively, they provide useful reflections on our arguments and additional empirical scope that challenge us to extend our thinking and analysis in productive ways. In this short response, we extract and synthesise what we think are their most valuable insights and in the final section detail how we are about to embark on a new project – The Programmable City – that seeks to perform some of the work they call for.</p>
<p>From our reading, the reviews suggest three issues that <italic>Code/Space</italic> neglected or failed to fully explicate: the nature, consumption and production of software.</p>
<p>In <italic>Code/Space</italic>, we developed an argument that software is both a product and producer of the world, a special kind of technology that possesses secondary agency that enables and empowers at the same time as it introduces a new form of governance, automated management, wherein software enacts automatic, automated and autonomous actions. Whilst sympathetic to this approach, the reviewers correctly suggest that further work is required in thinking through the nature of software. Kellerman argues that code constitutes ‘a special kind of information’ and needs to be ‘assessed against other forms of information and their geographies.’ It seems to us that the executable nature of machine code running on digital computers is distinctive from other forms of information, although the case could be made that in essence, it is not too different to a punched paper tape directing a mechanical weaving machine. Given the long genealogy of such self-instructional code, we did not explore code within a framework of information theory, but such framings would undoubtedly be useful and productive (e.g. <xref ref-type="bibr" rid="bibr1-2043820613497314">Cox, 2013</xref>). Kinsey suggests a deeper engagement with Bernard Stiegler’s work, theories of technogenesis, philosophies of technology more broadly, and the role of the speculative in the discursive formation of software, all of which we concur with. Adams rightly makes the case for a greater focus on the nature of software’s secondary agency and the role of programmers in producing code, which inevitably inculcates their values, ideologies and desires.</p>
<p>The latter leads into what Kellerman notes is a second underdeveloped theme, that of the production of software. He notes that in <italic>Code/Space</italic>, we neglect an analysis of the geographies and political economy of the research and development, creation and distribution of software products. We did note that code not only reflects the secondary agency of programmers, but is a complex techno-social product bound up in diverse markets, capitalist modes of accumulation, constraints of regulations and laws and discourses of openness and sharing in the case of open-source software, but in <italic>Code/Space</italic>, we focused our attention primarily on the work that software does in the world, rather than providing an examination of how code is made. We agree with Adams and Kellerman’s assertions that much more research needs to be conducted into the creation of code, both in relation to the investment of secondary agency, but also its wider contextualisation as localised and globalised product. A focus on the latter and the geography of the software industry has been and is being actively researched in business schools, economic geography and regional studies, with linkages to more applied planning concerns for attracting information technology (IT) jobs and stimulating so-called ‘creative industries’.</p>
<p>The third underdeveloped theme noted in the reviews concerns the consumption of software and how software inflects individual agency and sense of self. Kellerman posits that it would be profitable to examine the geographies of software consumption across a number of socio-spatial contexts such as level of development and political regime. He rightly argues that we presently know little about how software consumed in different locales and what factors shapes its consumption. Wilson reflects on the extent to which people interact actively with software, writing their own code or configuring settings and how this is changing over time and circumstance and what it means for the work code does. Certainly, there is much more to be revealed about the individual psychology of software enrolment and the significance of spatial context in situating interactions, especially if/when wearable computers (e.g. Google Glasses) become the cultural norm. Similarly, Adams points out that we did not pay enough attention to ‘our status and nature as code-users’ and ‘the kind of agents we become by inhabiting these [code] spaces’. He suggests it would be productive to examine the intersection between the primary agency of software users, and those that software seeks to act upon, and the secondary agency of software and its developers, and to think through ‘how code permits people to act at a distance and over time, more often, with more ongoing feedback, and in more complex ways, than they were able to do without code.’ For Kinsey, the larger philosophical question that needs answering is ‘what it means to be human in an age of a perceived increase in technological agency’? We agree that much more research and thinking needs to be conducted with respect to the emergent relationship between code and people and how each shapes the other in relational and contingent ways.</p>
<p>We were aware of some of these gaps in the book and made brief reference to them in the concluding chapter. Subsequently, we have outlined a detailed programme of research that seeks to address the issues raised by the reviewers as well as extend our original work (<xref ref-type="bibr" rid="bibr3-2043820613497314">Kitchin, 2011</xref>). This programme suggests using the city as a platform for investigating processes of software translation (how cities are translated into code) and transduction (how code reshapes city life) (see <xref ref-type="fig" rid="fig1-2043820613497314">Figure 1</xref>), operationalised through eight questions concerning how software inflects how we know, manage, work and live in cities (see <xref ref-type="table" rid="table1-2043820613497314">Table 1</xref>). Formulated in this gridded fashion, the questions work both vertically and horizontally to frame a programme of research that should provide further insights into the nature, production and consumption of software.</p>
<fig id="fig1-2043820613497314" position="float">
<label>Figure 1.</label>
<caption>
<p>The conceptualisation of the ‘Programmable City’ (<xref ref-type="bibr" rid="bibr3-2043820613497314">Kitchin, 2011</xref>).</p>
</caption>
<graphic xlink:href="10.1177_2043820613497314-fig1.tif"/>
</fig>
<table-wrap id="table1-2043820613497314" position="float">
<label>Table 1.</label>
<caption>
<p>An analytical framework for a comprehensive account of the work of software in contemporary Western urban contexts.</p>
</caption>
<graphic alternate-form-of="table1-2043820613497314" xlink:href="10.1177_2043820613497314-table1.tif"/>
<table>
<thead>
<tr>
<th> </th>
<th>Translation: City into code</th>
<th>Transduction: Code reshapes city</th>
</tr>
</thead>
<tbody>
<tr>
<td>Understanding the city (Knowledge)</td>
<td>How are digital data generated and processed about cities and their citizens?</td>
<td>How does software drive public policy development and implementation?</td>
</tr>
<tr>
<td>Managing the city (Governance)</td>
<td>How are discourses and practices of city governance translated into code?</td>
<td>How is software used to regulate and govern city life?</td>
</tr>
<tr>
<td>Working in the city (Production)</td>
<td>How is the geography and political economy of software production organised?</td>
<td>How does software alter the form and nature of work?</td>
</tr>
<tr>
<td>Living in the city (Social Politics)</td>
<td>How is software discursively produced and legitimated by vested interests?</td>
<td>How does software transform the spatiality and spatial behaviour of individuals?</td>
</tr>
</tbody>
</table>
</table-wrap>
<p>This programme of research has recently received 5 years of funding from the European Research Council and will employ a team of four postdoctoral researchers and four doctoral students, each focused on one of the broad analytic questions. Our hope is that this set of interlinked projects will produce a large body of empirical material as well as providing new theoretical insights that illuminate the nature of software, how it is produced and consumed and the work it does in the world.</p>
<p>Yet, getting a clearer map of code/space is going to be challenge for several reasons, not least because of the speed of development of software products and services, and the continued invisibility of the executable code and data structures beneath the surface of the interface. Moreover, like much social science research, there will be issues of access, with key aspects of scholarly analysis being controlled by institutions, companies and third parties that have little need to cooperate and may actively resist outside scrutiny of their commercial secrets or vital operations. The temptation will be to analyse more accessible forms of code (such as online media and open source software development) rather than investigating the code that matters most to daily life and the ongoing production of the city (e.g. control systems of the utility companies, the scheduling software of transport systems, the tasking of security personnel, the calculation of insurance rates and mortgage risks, etc.). A critical challenge is the need to expose algorithmic pinch-points and demonstrate in precise ways how a piece of code makes space come into being. Even if such research becomes possible, a further problem is how to communicate its significance to a wider audience without resorting to logical operations and mathematical expressions. (An effort in this direction, <xref ref-type="bibr" rid="bibr2-2043820613497314">Cormen, 2013</xref>, is worthwhile but demonstrates how hard it is to do in practice.) This is the ‘elephant in the room’ for software studies given that most social science and humanities scholars cannot programme, raising an epistemological problem in researching code. Without the ability to both make and deprogramme code, can social scientists really begin to show the consequences of code for everyday activities? Such abilities might be vital if we are to have a meaningful influence on the development of code and coding practices and to resist software that is unethical and open channels for the progressive production and use of software. If this is the case, then perhaps we are failing to equip the next generation of researchers with the skills required for making sense of a world inflected with software; whilst many students are Web savvy and adroit in using software, they are largely ignorant of how to produce it. Perhaps then the real follow-on from <italic>Code/Space</italic> is need for someone to write a book not on the geographies of code but a textbook to teach geographers to code.</p>
</body>
<back>
<ref-list>
<title>References</title>
<ref id="bibr1-2043820613497314">
<citation citation-type="book">
<person-group person-group-type="author">
<name>
<surname>Cox</surname>
<given-names>G</given-names>
</name>
</person-group> (<year>2013</year>) <source>Speaking Code</source>. <publisher-loc>Cambridge, MA</publisher-loc>: <publisher-name>MIT Press</publisher-name>.</citation>
</ref>
<ref id="bibr2-2043820613497314">
<citation citation-type="book">
<person-group person-group-type="author">
<name>
<surname>Cormen</surname>
<given-names>TH</given-names>
</name>
</person-group> (<year>2013</year>) <source>Algorithms Unlocked</source>. <publisher-loc>Cambridge, MA</publisher-loc>: <publisher-name>MIT Press</publisher-name>.</citation>
</ref>
<ref id="bibr3-2043820613497314">
<citation citation-type="journal">
<person-group person-group-type="author">
<name>
<surname>Kitchin</surname>
<given-names>R</given-names>
</name>
</person-group> (<year>2011</year>) <article-title>The programmable city</article-title>. <source>Environment and Planning B</source> <volume>38</volume>: <fpage>945</fpage>–<lpage>995</lpage>.</citation>
</ref>
</ref-list>
</back>
</article>