<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  PUBLIC "-//NLM//DTD Journal Publishing DTD v2.3 20070202//EN" "journalpublishing.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article">
<front>
<journal-meta>
<journal-id journal-id-type="publisher-id">DMS</journal-id>
<journal-id journal-id-type="hwp">spdms</journal-id>
<journal-title>The Journal of Defense Modeling and Simulation: Applications, Methodology, Technology</journal-title>
<issn pub-type="ppub">1548-5129</issn>
<issn pub-type="epub">1557-380X</issn>
<publisher>
<publisher-name>SAGE Publications</publisher-name>
<publisher-loc>Sage UK: London, England</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="doi">10.1177/0037549712441742</article-id>
<article-id pub-id-type="publisher-id">10.1177_0037549712441742</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Articles</subject>
</subj-group>
</article-categories>
<title-group>
<article-title>SiMA: a discrete event system specification-based modelling and simulation framework to support model composability</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<name><surname>Alpdemir</surname><given-names>M Nedim</given-names></name>
</contrib>
<aff id="aff1-0037549712441742">TÜBITAK BILGEM UEKAE - İLTAREN, Ankara, Turkey</aff>
</contrib-group>
<author-notes>
<corresp id="corresp1-0037549712441742">M Nedim Alpdemir, TÜBITAK BILGEM UEKAE - İLTAREN, 06800 Ümitköy, Ankara, Turkey. Email: <email>nedima@iltaren.tubitak.gov.tr</email></corresp>
<fn fn-type="other" id="bio1-0037549712441742">
<p>M Nedim Alpdemir received his MSc (1996) in Advanced Computer Science and his PhD (2000) in Component-Based Simulation Environments from the Department Computer Science, University of Manchester, UK. He worked as a Research Associate, and later as a Research Fellow, in the Information Management Group (IMG) at the Department Computer Science of University of Manchester, UK, until 2005. Currently, he is the head of the Software Infrastructures Group and supervises the Simulation Software Frameworks team at TÜBITAK BILGEM UEKAE - İLTAREN, Ankara, Turkey.</p>
</fn>
</author-notes>
<pub-date pub-type="epub-ppub">
<month>4</month>
<year>2012</year>
</pub-date>
<volume>9</volume>
<issue>2</issue>
<issue-title>Special Issue: Resuability, Interoperability and Composability in Air Warfare Simulations</issue-title>
<fpage>147</fpage>
<lpage>160</lpage>
<permissions>
<copyright-statement>© 2012 The Society for Modeling and Simulation International</copyright-statement>
<copyright-year>2012</copyright-year>
<copyright-holder content-type="society">The Society for Modeling and Simulation International</copyright-holder>
</permissions>
<abstract>
<p>In this paper we briefly present our views on composability of models and interoperation of simulations; we introduce our simulation software framework, namely Simulation Modelling Architecture (SiMA), and we present our contributions to the underlying formal model (i.e. discrete event system specification). We also present our simulation construction environment, which supports composability of simulation models through a simulation construction tool chain. Finally, we provide a case study where a sample simulation scenario is used to demonstrate the features of our SiMA environment that facilitate composability of simulation models.</p>
</abstract>
<kwd-group>
<kwd>modeling and simulation</kwd>
<kwd>discrete event system specification</kwd>
<kwd>re-usability</kwd>
<kwd>simulation model composition</kwd>
<kwd>simulation interoperability</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="section1-0037549712441742" sec-type="intro">
<title>1. Introduction</title>
<p>Component-based simulation frameworks have long been investigated in the simulation research community. Modelica<sup><xref ref-type="bibr" rid="bibr1-0037549712441742">1</xref></sup> language, DSBlock<sup><xref ref-type="bibr" rid="bibr2-0037549712441742">2</xref></sup> and Simulink<sup><xref ref-type="bibr" rid="bibr3-0037549712441742">3</xref></sup> systems are examples of component-based simulation systems with emphasis on Continuous Simulation. The discrete event system specification (DEVS)<sup><xref ref-type="bibr" rid="bibr4-0037549712441742">4</xref></sup> approach, COST<sup><xref ref-type="bibr" rid="bibr5-0037549712441742">5</xref></sup> and SIMKIT<sup><xref ref-type="bibr" rid="bibr6-0037549712441742">6</xref></sup> systems, on the other hand, are examples that are more discrete event simulation centric. A common characteristic of these systems and approaches is that they try to establish mechanisms, rules and specifications that would enable the construction of complex simulation models from smaller sub-models in a systematic way. The main motivation behind these efforts was, of course, to facilitate easier and robust development of complex simulations through the re-use of previously developed and tested reliable building blocks.</p>
<sec id="section2-0037549712441742">
<title>1.1 Challenges for composition and re-use of simulation components</title>
<p>Development of simulation components for a highly complex system within a single project and a single administrative domain (i.e. a single institution) is a challenge in itself. When the components are developed within different administrative domains and their re-use history is to span the lifetime of multiple projects, the challenge grows exponentially. The reason is obvious: as the specification and development context of the components diversifies, the likelihood of syntactic, semantic and behavioural incompatibilities grows accordingly. A considerable number of contributions have already been made to study multiple aspects of composability and interoperability in the context of simulation applications. Notably, Page and Opper<sup><xref ref-type="bibr" rid="bibr7-0037549712441742">7</xref></sup> discuss the horizontal and vertical dimensions of composition, where the horizontal dimension signifies the interoperability (via couplings) and multiresolution (via composition), and the vertical dimension signifies aggregation. Kasputis and Ng<sup><xref ref-type="bibr" rid="bibr8-0037549712441742">8</xref></sup> list six major steps to outline a methodology for developing a composable simulation. Tolk et al.<sup><xref ref-type="bibr" rid="bibr9-0037549712441742">9</xref></sup> provide a useful categorization of levels of interoperability and devise a well-defined model for Levels of Conceptual Interoperability (i.e. LCIM). Yilmaz<sup><xref ref-type="bibr" rid="bibr10-0037549712441742">10</xref></sup> provides an account of the importance of contextual information to support composability. Sarjoughian<sup><xref ref-type="bibr" rid="bibr11-0037549712441742">11</xref></sup> attempts to devise a conceptual framework for model composability in terms of the composability of modelling formalisms leading to the concepts of mono, super, meta and poly model composability. Davis and Tolk<sup><xref ref-type="bibr" rid="bibr12-0037549712441742">12</xref></sup> address multi-facets of model composability, including syntax, semantics, pragmatics, assumptions and validity. Notably, they elaborate on multiresolution modelling and draw the attention of the reader to the relevancy and impact of it on composability.</p>
<p>One fundamental issue seems to be to establish an overarching theoretical framework that is, on one hand, sufficiently wide and deep to cover multiple aspects of composability and interoperability requirements, and at the same time is not too restrictive to over-constraint the conceptual, behavioural and performance characteristics of individual units of composition.</p>
<p>Exploring the relevant literature and our own experience brings us closer to the view stated by Davis and Tolk<sup><xref ref-type="bibr" rid="bibr12-0037549712441742">12</xref></sup> that ‘pure composability’ in the form of strict plug-in/plug-out is unreasonable due to substantive subtleties about the component models and the assumptions that underlie them. Another important postulation stated by many researchers, including Davis and Tolk, which we find assertive is that composability and interoperability need to be considered distinctly (but not in isolation), since the requirements implied by each of them have considerable differences. Interoperability primarily targets the orchestration of potentially heterogeneous simulation components, thus prioritizing run-time oriented aspects. Composability, on the other hand, implies aggregation of models, both along horizontal and vertical (hierarchical) dimensions, prioritizing robust and coherent coupling of components, including their conceptual alignment, thus calling for more formal and theoretical approaches. As such, we tend to abstract the interoperation of components as a ‘communicative and collaborative <italic>action</italic>’ of heterogeneous entities to present a ‘<italic>collective emergent behaviour</italic>’ to the outside observers. We also want to abstract composition in terms of ‘coupling of components’ and ‘alignment of concepts’ to present an opaque, unified view. The work presented in this paper primarily focuses on the latter (i.e. composability). Our primary contribution is Simulation Modelling Architecture (SiMA)-DEVS, which defines a specialized form of DEVS formalism and a software framework, SiMA, that implements it. We also describe our simulation construction tool chain that facilitates easier plumbing of simulation components. Our motivation is to share our experiences and the results of our efforts to develop a simulation environment with inherent support for composable simulation models.</p>
<p>The rest of the paper is structured as follows: Section 2 provides an account of multi-aspects of composability from the particular point of view of the authors; Section 3 provides a short background on DEVS formalism and a discussion of our extensions to DEVS; Section 4 introduces SiMA software architecture; Section 5 provides a case study where a sample simulation scenario is used to demonstrate the features of our SiMA environment that facilitate composability of simulation models; and finally Section 6 provides some concluding remarks.</p>
</sec>
</sec>
<sec id="section3-0037549712441742">
<title>2. Multi-aspects of composability</title>
<p>The views presented in this paper build upon the relevant literature, but aim at opening another window that perhaps offers a slightly different angle. To summarize the various dimensions of the composability and interoperability from that particular perspective, we propose to consider the following aspects in a complementary manner.</p>
<sec id="section4-0037549712441742">
<title>2.1 The modelling formalism (the philosophy)</title>
<p>The modelling formalism specifies in a formal way the semantics of the modelling approach used to represent an entity or a process. In that way, the modelling formalism determines the abstraction used by the modeller and therefore may introduce certain implicit or explicit constraints on the resulting model. As such it delineates the <italic>philosophical dimension</italic> of the modelling enterprise. It is very important for the modelling approach to allow for multi-formalism support, since the complexity of the real world does not lend itself to using one basic abstraction at a time.</p>
</sec>
<sec id="section5-0037549712441742">
<title>2.2 The type system and the grammar (the language)</title>
<p>The fundamental purpose of a type system is to prevent run-time errors in a computation.<sup><xref ref-type="bibr" rid="bibr13-0037549712441742">13</xref></sup> The grammar, on the other hand, provides the <italic>foundations</italic> for specifying all syntactic structures. Since interoperability implies a meaningful emergent behaviour as a result of interactions between distinct behavioural units, a well-defined scheme both for type conversions and for creating mappings between the world views of each behavioural unit is essential. An extensible markup language (XML) schema-type system emerged as a good candidate for a domain- and language-independent-type system. As illustrated in <xref ref-type="fig" rid="fig1-0037549712441742">Figure 1</xref>, the XML schema-type system can function as an inter-lingua to mediate (i.e. map and reverse-map, with the reservation that inverse mapping may not always exist) between different bindings of essentially the same world description.</p>
<fig id="fig1-0037549712441742" position="float">
<label>Figure 1.</label>
<caption><p>Mediation for syntactic mapping via an inter-lingua.</p></caption>
<graphic xlink:href="10.1177_0037549712441742-fig1.tif"/>
</fig>
<p>In addition, XML schema can be used to define a grammar for higher-level definitions, such as the conceptual model and semantic rules. However, for a highly effective contextual alignment of individual models, it needs to be supported with semantic ingredients such as ontologies.</p>
</sec>
<sec id="section6-0037549712441742">
<title>2.3 The conceptual model (the vocabulary and the (grand) story)</title>
<p>The conceptual model is very important, as it delineates the <italic>context</italic> for specification, composition and interoperation of components. The notion of context is attracting more and more attention of the simulation community. In fact, the utility of contextual information in computing applications where the definition, development and execution of individual software components span multiple administrative domains has already been acknowledged in many other communities. In particular, service-oriented computing and pervasive computing communities have focused on making the contextual information a first class citizen of the overall environment. The proposal to introduce Context Oriented Programming<sup><xref ref-type="bibr" rid="bibr14-0037549712441742">14</xref></sup> as a new programming approach primarily for pervasive computing applications is such an attempt. The need for contextual information for successful interoperation of simulation components is also well addressed in the simulation community. Yilmaz,<sup><xref ref-type="bibr" rid="bibr15-0037549712441742">15</xref></sup> for instance, provides an in-depth discussion of the possible use of the contextual information to support a component-based simulation environment.</p>
<p>Defining a single conceptual model to represent a large set of simulation models, however, is practically impossible. A pragmatic solution would be to define domain-specific information models, ontologies, etc. Community-based information model development efforts must be supported. This issue is closely related to the notion of a Common Reference Model (CRM) proposed by Tolk and Diallo<sup><xref ref-type="bibr" rid="bibr16-0037549712441742">16</xref></sup> as part of the Model Based Data Engineering (MBDE) process. The CRM becomes, in fact, the common language spoken and understood by all members of a federation. Tolk and Diallo emphasize that a reference model such as the CRM facilitates information exchange needs of participating systems, but does not impose its world view on all systems.</p>
</sec>
<sec id="section7-0037549712441742">
<title>2.4 The coupling specification (the legal contract for union or collaboration)</title>
<p>Coupling is a concept sometimes somewhat teeming with negative connotations (consider, for instance, its meaning in the Object Oriented theory where its scarcity is a good thing together with high cohesion). We argue that the approach used in formal abstraction of the coupling relationships between models is an essential ingredient of the overall formalization of model composition in the modelling and simulation domain. Further, we observe that the notion of ‘input and output ports’ provides a convenient abstraction for <italic>model composition</italic>, serving as the focal point of aggregation. We find the DEVS approach very convenient for an abstraction of model composition in terms of port couplings. As will be introduced in more detail in Section 3, we specialize parallel DEVS formal definition by developing a more strictly qualified notion of input and output ports. As such, we effectively emphasize couplings between model ports to imply ‘data coupling’ (as opposed to control coupling, content coupling, external coupling, etc.), with a firm reference to type-system compliance.</p>
</sec>
<sec id="section8-0037549712441742">
<title>2.5 Run-time interoperation application programming interfaces (the protocol for communication, collaboration and co-existence)</title>
<p>As opposed to static model coupling, the run-time coupling of components has to be driven via an interaction protocol. The interaction protocol could simply dictate compatibility at the syntactic level or it could involve some semantic elements, such as compliance to a behavioural abstraction (such as that of DEVS model execution protocol). It is self-evident that successful interoperation is likely to become a reality only through wide adoption of international standards. High-level architecture (HLA) is a good example of such an interoperation standard. Having said that, interoperation is not a straightforward concept. As Tolk et al.<sup><xref ref-type="bibr" rid="bibr9-0037549712441742">9</xref></sup> suggest, various different forms of interoperability are conceivable, each addressing a distinct set of requirements, with a growing degree of complexity.</p>
<p>With these considerations in mind, research at our research institute (the National Research Institute of Electronics and Cryptology (UEKAE) under the Turkish Scientific and Technological Research Council (TUBITAK)) has focused on composability, re-usability and interoperability, with a relatively higher priority on composability for supporting the construction of complex simulations primarily through the re-use of in-house models. The DEVS approach was of particular interest for us for a number of reasons: (1) it provides a set theoretic formal basis for both structural and behavioural specification and hierarchical composition of simulation models with arbitrary complexity levels; (2) it specifies a protocol for model execution; (3) it promises a unifying theoretical frame for hybrid systems<sup><xref ref-type="bibr" rid="bibr17-0037549712441742">17</xref></sup> with both continuous and discrete event properties (see Kofman et al.<sup><xref ref-type="bibr" rid="bibr18-0037549712441742">18</xref></sup> for an in-depth discussion on representing continuous systems with DEVS via quantization of the state base). These properties have contributed to our decision to use DEVS as the formal basis to implement our simulation framework (i.e. SiMA). To elaborate more on this, SiMA was developed to meet requirements for model composability and re-usability, high performance and robustness, and direct support for industrial quality simulation application development. It is a known fact that architectural flexibility and run-time efficiency are often conflicting goals for software frameworks. To overcome the challenge, we took a systematic approach to reconcile the tension between these conflicting goals:</p>
<list id="list1-0037549712441742" list-type="bullet">
<list-item><p>we benefited from the sound formal specification offered by DEVS with some constraints to establish strict semantics for model definition, composition and execution;</p></list-item>
<list-item><p>we designed our framework as a layered architecture where central processing unit (CPU)-demanding simulators can be written in an efficient programming language (i.e. C++), whereas the framework layer is written in .NET platform to support easier component composition, distribution and management.</p></list-item>
</list>
<p>As a result, SiMA comes to possess the following distinct characteristics:</p>
<list id="list2-0037549712441742" list-type="bullet">
<list-item><p>it is based on the DEVS approach, which provides a solid formal basis for hierarchical model composition;</p></list-item>
<list-item><p>its Simulation Execution Engine implements the parallel DEVS protocol, which provides a well-defined and robust mechanism for model execution;</p></list-item>
<list-item><p>it extends the DEVS formalism with a specific port type and transition function;</p></list-item>
<list-item><p>it comes with a variety of tools, such as a Graphical Model Editor, an automated model construction tool chain that aims at providing support for Model Driven Engineering, an efficient and configurable trace generation framework, and a Code Generation Tool (KODO) that supports the message-processing infrastructure through automated marshalling/unmarshalling across the simulation layers.</p></list-item>
</list>
</sec>
</sec>
<sec id="section9-0037549712441742">
<title>3. SiMA-DEVS: our approach</title>
<p>Our modelling and simulation framework SiMA is based on the DEVS approach as a solid formal basis for complex model construction. DEVS is a formalism introduced by Zeigler<sup><xref ref-type="bibr" rid="bibr19-0037549712441742">19</xref></sup> to describe discrete event systems. In DEVS formalism, a basic model (atomic model), is defined formally as<sup><xref ref-type="bibr" rid="bibr4-0037549712441742">4</xref></sup> <inline-formula id="inline-formula1-0037549712441742">
<mml:math display="inline" id="math1-0037549712441742">
<mml:mrow>
<mml:mi>M</mml:mi>
<mml:mo>=</mml:mo>
<mml:mo>&lt;</mml:mo>
<mml:mi>X</mml:mi>
<mml:mo>,</mml:mo>
<mml:mi>S</mml:mi>
<mml:mo>,</mml:mo>
<mml:mi>Y</mml:mi>
<mml:mo>,</mml:mo>
<mml:msub>
<mml:mrow>
<mml:mi>δ</mml:mi>
</mml:mrow>
<mml:mrow>
<mml:mrow>
<mml:mtext>int</mml:mtext>
</mml:mrow>
</mml:mrow>
</mml:msub>
<mml:mo>,</mml:mo>
<mml:msub>
<mml:mrow>
<mml:mi>δ</mml:mi>
</mml:mrow>
<mml:mrow>
<mml:mi>ext</mml:mi>
</mml:mrow>
</mml:msub>
<mml:mo>,</mml:mo>
<mml:mi>λ</mml:mi>
<mml:mo>,</mml:mo>
<mml:mi>ta</mml:mi>
<mml:mo>&gt;</mml:mo>
</mml:mrow>
</mml:math>
</inline-formula>, where <italic>X</italic> is the set of input events; <italic>S</italic> is the set of states; <italic>Y</italic> is the set of output events; δ<sub>int</sub> :<italic>S</italic>→<italic>S</italic> is the internal transition function; δ<sub>ext</sub> : <italic>Qx</italic> × → <italic>S</italic> is the external transition function, where <inline-formula id="inline-formula2-0037549712441742">
<mml:math display="inline" id="math2-0037549712441742">
<mml:mrow>
<mml:mi>Q</mml:mi>
<mml:mo>=</mml:mo>
<mml:mo stretchy="false">{</mml:mo>
<mml:mo stretchy="false">(</mml:mo>
<mml:mi>s</mml:mi>
<mml:mo>,</mml:mo>
<mml:mi>e</mml:mi>
<mml:mo stretchy="false">)</mml:mo>
<mml:mo stretchy="false">|</mml:mo>
<mml:mi>s</mml:mi>
<mml:mo>∈</mml:mo>
<mml:mi>S</mml:mi>
<mml:mo>,</mml:mo>
<mml:mn>0</mml:mn>
<mml:mo>≤</mml:mo>
<mml:mi>e</mml:mi>
<mml:mo>≤</mml:mo>
<mml:mi>ta</mml:mi>
<mml:mo stretchy="false">(</mml:mo>
<mml:mi>s</mml:mi>
<mml:mo stretchy="false">)</mml:mo>
<mml:mo stretchy="false">}</mml:mo>
</mml:mrow>
</mml:math>
</inline-formula> is the total state set and <italic>e</italic> is elapsed time since last transition; λ : <italic>S</italic> → <italic>Y</italic> is the output function; t<italic>a</italic> : <inline-formula id="inline-formula3-0037549712441742">
<mml:math display="inline" id="math3-0037549712441742">
<mml:mrow>
<mml:mi>S</mml:mi>
<mml:mo>→</mml:mo>
<mml:msubsup>
<mml:mrow>
<mml:mi>R</mml:mi>
</mml:mrow>
<mml:mrow>
<mml:mn>0</mml:mn>
<mml:mo>,</mml:mo>
<mml:mi>∞</mml:mi>
</mml:mrow>
<mml:mrow>
<mml:mo>+</mml:mo>
</mml:mrow>
</mml:msubsup>
</mml:mrow>
</mml:math>
</inline-formula> is the time advance function.</p>
<p>A DEVS-coupled model is defined formally as <italic>N</italic> = &lt; <italic>X</italic>, <italic>Y</italic>, <italic>D</italic>, {<italic>M</italic><sub><italic>d</italic></sub>}, {<italic>I</italic><sub><italic>d</italic></sub>}, {<italic>Z</italic><sub><italic>i,j</italic></sub>}, <italic>SELECT</italic> &gt;, where <italic>X</italic> is the set of inputs; <italic>Y</italic> is the set of outputs; <italic>D</italic> is the set of component names; <italic>M<sub>d</sub></italic> is the model of component d, ∀<italic>d</italic> ∈ <italic>D</italic> ; <italic>I</italic><sub><italic>d</italic></sub> is the set of component influencers of <italic>d</italic>, ∀<italic>d</italic> ∈ <italic>D</italic>∪ {<italic>N</italic>} ; <italic>Z</italic><sub><italic>i,j</italic></sub> is the <italic>i</italic>-to-<italic>j</italic> output-to-input function, ∀<italic>j</italic> ∈ <italic>I</italic><sub><italic>i</italic></sub>; <italic>SELECT</italic> is the tie-breaking function to arbitrate the occurrence of simultaneous events. A complete description of DEVS semantics can be found in Zeigler et al.<sup><xref ref-type="bibr" rid="bibr4-0037549712441742">4</xref></sup></p>
<p>SiMA<sup><xref ref-type="bibr" rid="bibr20-0037549712441742">20</xref></sup> Simulation Execution Engine implements the parallel DEVS protocol, which provides a well-defined and robust mechanism for model execution. SiMA builds upon a specialized form of DEVS formalism that achieves the following.</p>
<list id="list3-0037549712441742" list-type="order">
<list-item><p>Formalizes the notion of ‘port types’, leading to a strongly typed (and therefore type-safe) model composition environment. In this respect we specialize the basic DEVS formalism by introducing more strict syntactic constraints on the port definitions.</p></list-item>
<list-item><p>Introduces a new transition function to account for model interactions involving state inquiries with possible algebraic transformations (but no state change), without simulation time advance. In this respect we extend the basic DEVS formalism. This is similar to the notion of zero-lookahead in HLA<sup><xref ref-type="bibr" rid="bibr21-0037549712441742">21</xref></sup> from a time-management point of view.</p></list-item>
</list>
<p>Our SiMA-DEVS formalism is given below:</p>
<p><italic>SiMA</italic> – <italic>DEVS</italic> =&lt; <italic>X</italic>, <italic>S</italic>, <italic>Y</italic>, δ<sub>int</sub>, δ<sub><italic>ext</italic></sub>, δ<sub><italic>con</italic></sub>, δ<sub><italic>df</italic></sub>, θ, <italic>ta</italic> &gt; where,</p>
<p><italic>S</italic>, δ<sub>int</sub>, δ<sub><italic>ext</italic></sub>, δ<sub><italic>con</italic></sub>, θ, <italic>ta</italic> are as defined in the parallel DEVS formalism,</p>
<p><italic>X</italic> = {(<italic>p</italic>, <italic>v</italic>)|<italic>p</italic> ∈ <italic>InPorts</italic>, <italic>v</italic> ∈ <italic>X</italic>}</p>
<p>is the set of input ports and values,</p>
<p><italic>Y</italic> = {(<italic>p</italic>, <italic>v</italic>)|<italic>p</italic> ∈ <italic>OutPorts</italic>, <italic>v</italic> ∈ <italic>Y</italic>}</p>
<p>is the set of output ports and values,</p>
<p><italic>InPorts</italic>, <italic>OutPorts</italic>: sets of input and output ports such that:</p>
<p>InPorts = {(Γ, τ)|Γ ·, <italic>v</italic> : τ, <italic>v</italic> ∈ {<italic>X</italic><sub><italic>p</italic></sub>},</p>
<p><italic>OutPorts</italic> = {(Γ, ρ)|Γ ·, <italic>v</italic> : ρ, <italic>v</italic> ∈ <italic>Y</italic><sub><italic>p</italic></sub>},</p>
<p>Γ : {XMLSchema type system,</p>
<p>τ, ρ : data types valid w.r.t. XMLSchema type system,</p>
<p>δ<sub><italic>df</italic></sub> : <italic>PDFT</italic><sub><italic>in</italic></sub> × <italic>S</italic> → <italic>OutPorts</italic>′ is the time invariant</p>
<p>direct feed through function where:</p>
<p><italic>PDFT</italic><sub><italic>in</italic></sub> ⊆ <italic>InPorts</italic>and<italic>OutPorts</italic>′ ⊆ <italic>OutPorts</italic>.</p>
<p>Note that the set of input ports, <italic>InPorts</italic>, is formally defined as a set of pairs where each pair defines one input port of a model uniquely. The first element of each pair, Γ, is a typing environment (in our case the XML schema-type system) and the second element of the pair (τ) is a data type that is valid in Γ, where each input value <italic>v</italic> conforms to data type τ. This is formally denoted by the typing judgment Γ · <italic>v</italic> : τ, which asserts that a term <italic>v</italic> has a type τ with respect to a static typing environment Γ for the free variables of <italic>v</italic> (or, in short, ‘<italic>v</italic> has type τ in Γ’).<sup><xref ref-type="bibr" rid="bibr13-0037549712441742">13</xref></sup> Similar semantics apply to output ports, too. Thus, we make strong typing and type-system dependency of the ports explicit in the formal model.</p>
<p>It may be argued that strong typing and type-system dependency are essentially run-time properties of the execution environment, and that making those explicit in the formal model may ambiguate the abstraction level of the formal specification. Although this argument is generally valid, we counter-argue that there are a number of merits in following our proposed route, in particular the following.</p>
<list id="list4-0037549712441742" list-type="order">
<list-item><p>We introduce a type discipline to the definition of the externally visible model interfaces (i.e. ports), leading to a semi-formal basis for the specification of the overall information model of the system being modelled. Ensuring that the overall information model is specified using a well-defined type system, we support syntactic compatibility at the modelling level.</p></list-item>
<list-item><p>We facilitate Model-Driven Engineering through well-typed and type-system dependent external plugs to enable automated port matching and model composition. In fact, the Model-Driven simulation construction tool chain for SiMA is successfully implemented, via a number of tools such as a code generator, a model builder and a model linker. This simulation construction tool chain is discussed in detail in Section 4.1.</p></list-item>
<list-item><p>By making strong typing and type-system dependency explicitly visible in the formalism, we reduce the gap between modelling-level logical composability constraints and run-time-level plugability constraints.</p></list-item>
</list>
<p>Note also that, in addition, we introduce a new transition function, δ<sub><italic>df</italic></sub>, that enables models to access the state of other models through a specific <italic>type</italic> of port, without advancing the simulation time. As such, it is possible to establish a path of connected models along which models can share parts of their state, using state variables to compute derived values instantly within the same simulation time step. As stated earlier, this is similar to the notion of zero-lookahead found in HLA.<sup><xref ref-type="bibr" rid="bibr21-0037549712441742">21</xref></sup> One may argue that the zero-lookahead behaviour could be modelled by adjusting the time advance function of an atomic model such that the model causes the simulation to stop for a while, do any state inquiry via existing couplings, then re-adjusting the time advance to go back to the normal simulation cycle. Although this is possible, we argue that by introducing a transition function and a specific port type that is tied (through run-time constraints imposed by the framework) to that particular transition function we gain several advantages:</p>
<list id="list5-0037549712441742" list-type="order">
<list-item><p>the models can communicate and share states with each other without the intervention of the simulation engine, thus providing a very efficient run-time infrastructure;</p></list-item>
<list-item><p>allowing such communications only to occur through a specific port type (compile-time and run-time checks are carried out), the framework is able to apply application-independent loop-breaking logic at the ports to prevent algebraic loops, thereby ensuring model legitimacy.</p></list-item>
</list>
<p>Intuitively, we can state that the behaviour of SiMA-DEVS is equivalent to that of parallel DEVS from a Language Equivalence point of view.<sup><xref ref-type="bibr" rid="bibr22-0037549712441742">22</xref></sup> Hwang<sup><xref ref-type="bibr" rid="bibr22-0037549712441742">22</xref></sup> shows that two atomic DEVS models can be equivalent if the languages they generate are the same. The total language a DEVS atomic model generates is simply defined in terms of transition trajectory, output trajectory and the total trajectory generated by that DEVS model. Since the new function we introduce does not change the model’s state, the state trajectory would be the same as classical DEVS. Although the output trajectory of a SiMA-DEVS model is directly affected by δ<sub><italic>df</italic></sub>, the same output behaviour can be generated by a standard DEVS model via the <italic>next time</italic> calculation logic. In other words, the DEVS models can be forced to stop advancing at a specific point in time to send data to other models. As such, equivalence is also true from a timed language<sup><xref ref-type="bibr" rid="bibr23-0037549712441742">23</xref></sup> point of view. So, the benefit SiMA-DEVS offers in this respect is that the ability to model zero-lookahead behaviour is encapsulated into a well-defined mechanism and this mechanism is introduced into the model definition as a first class entity, rather than relying on custom implementations. We leave the formal discussion of the equivalence out of the scope of this paper and refer the reader to Hwang,<sup><xref ref-type="bibr" rid="bibr22-0037549712441742">22</xref>,<xref ref-type="bibr" rid="bibr23-0037549712441742">23</xref></sup> and Hwang and Cho.<sup><xref ref-type="bibr" rid="bibr24-0037549712441742">24</xref></sup></p>
<sec id="section10-0037549712441742">
<title>3.1 Support for dynamic changes in model composition relationships</title>
<p>A relatively more demanding requirement in the context of model composition is the ability to change the coupling relationships between the simulation models (or simulators representing the models) at run time, while the simulation execution is under progress. This requirement mostly stems from the fact that analysing the behaviour of complex and adaptive systems through simulation often requires the underlying modelling and simulation approach to support structural and behavioural changes. This implies that models may switch between different behavioural specifications (e.g. fidelity levels), as well as various coupling configurations dynamically at run time, depending on various triggering events. To cope with such structural and behavioural change requirements, simulation environments must incorporate d<italic>ynamism</italic> into their fabric.</p>
<p>We observe that several approaches to dynamism in simulation environments are already proposed in the relevant literature.<sup><xref ref-type="bibr" rid="bibr25-0037549712441742">25</xref>–<xref ref-type="bibr" rid="bibr28-0037549712441742">28</xref></sup> We note that three distinct categories of change are discussed in those existing approaches: (1) a change in the overall compositional state of models (i.e. some models may cease to exist to be part of the composition, or new models can join the simulation); (2) a change in the connectivity relationships (coupling) among the existing models; (3) a change in internal functional behaviour of one or more of the existing models. We find two of the formal approaches to the variable structure models in the DEVS environment particularly relevant to our work. The first one is DSDEVS (Dynamic Structure DEVS), introduced by Barros.<sup><xref ref-type="bibr" rid="bibr27-0037549712441742">27</xref></sup> The second one is Dynamic DEVS (dynDEVS), introduced by Uhrmacher.<sup><xref ref-type="bibr" rid="bibr25-0037549712441742">25</xref></sup> Our approach to add dynamism to our basic SiMA-DEVS model is similar to that of dynDEVS and aims at supporting all three categories of change mentioned above. To be more precise, we conform to both dynDEVS (for atomic models) and dynNDEVS (for coupled models defined as composition of atomic models), as the underlying formal specifications, with some trivial extensions. In particular, we introduce a state synchronization mechanism between networks of connected models, to be performed at the end of a structural change phase, in case a model wants to update the values of such state variables that are within the common set of pre-and post-change models (i.e. they are not introduced newly after the model’s structural transition), but have values that stayed unchanged during the pre-change simulation period. This mechanism is instrumental in cases where a model A initializes some of its state variables at the beginning of the simulation but does not receive updates for those variables until some influencer model B goes through a structural change that causes those variables to be updated, or in cases where a new model B is added that introduces a new coupling influencing one of the input ports of model A. Further information on our dynamism extensions to SiMA-DEVS can be found in Deniz et al.<sup><xref ref-type="bibr" rid="bibr29-0037549712441742">29</xref></sup> This paper does not delve into the details of those extensions. Rather, the focus of this paper is to illustrate how SiMA supports static composability.</p>
</sec>
</sec>
<sec id="section11-0037549712441742">
<title>4. SiMA software architecture</title>
<p>SiMA is a software framework for developing simulation models and executing simulations (<xref ref-type="fig" rid="fig2-0037549712441742">Figure 2</xref>). It has two main layers: <italic>SiMA Core</italic> and <italic>C++ Interface</italic>.</p>
<fig id="fig2-0037549712441742" position="float">
<label>Figure 2.</label>
<caption><p>SiMA software architecture.</p></caption>
<graphic xlink:href="10.1177_0037549712441742-fig2.tif"/>
</fig>
<p><italic>SiMA Core</italic> consists of five sub-components that are used for modelling and simulation. <italic>Modelling Framework</italic> is a set of classes and data types to use in model development. Atomic models and all their subclasses are defined in this framework. <italic>Connection Ports</italic> is the transportation component that contains classes for defining ports and their connection limits. <italic>Simulation Engine Core</italic> uses these two components, <italic>Modelling Framework</italic> and <italic>Connection Ports</italic>, to execute a simulation. In other words, it implements the DEVS simulation protocol and in addition exposes administrative interfaces to manage and track the simulations at run time. The <italic>Distributed Simulation Adapter</italic> is the interface for connecting SiMA simulations with external distributed simulation infrastructures. Currently, a HLA adapter is implemented for a specific run-time interface (RTI). However, we believe details of this issue are complicated enough to be considered in the context of another paper. <italic>Messaging Constructs</italic> is the component that presents all base data-type classes and rules for the inter-communication of atomic models and <italic>SiMA Core</italic> components.</p>
<p>The <italic>C++ Interface</italic> layer is implemented to allow C++ to be used as a model implementation language for SiMA atomic models. All core SiMA components are developed in .NET, but we support models implemented in both .NET and C++ to co-exist in the same run-time environment during a simulation. However, since there is a strict boundary between their coding environments, various adapters and components that manage the interoperability between .NET and C++ atomic models and SiMA components are implemented in the <italic>C++ Interface</italic> layer.</p>
<p>The <italic>C++ Interface</italic> layer consists of three sub-components. <italic>Unmanaged Modelling Adapter</italic> has the same interface and class hierarchy as the .NET <italic>Modelling Framework</italic>, except it is developed in pure C++ language. <italic>Managed Modelling Adapter</italic> is developed in C++/CLI, which is a special edition of C++ language in .NET, that allows access to both C++ and .NET methods and data types. <italic>Managed Modelling Adapter</italic> handles the interoperability management and delegates all simulation commands to C++ models, and provides all information required by them from the simulation environment. <italic>Data Converters</italic> are special adapters that perform marshalling of all values between .NET and C++ data types in both ways. A model developer can use the KODO tool (described in Section 4.1) to auto-generate these data converters for his/her data types.</p>
<sec id="section12-0037549712441742">
<title>4.1 Simulation construction tool chain for SiMA</title>
<p>SiMA is supported with a number of tools that collectively allow automatic construction of the run-time simulation environment using previously defined SiMA models. The simulation construction tool chain consists of four main steps and involves the use of five tools (<xref ref-type="fig" rid="fig3-0037549712441742">Figure 3</xref>).</p>
<fig id="fig3-0037549712441742" position="float">
<label>Figure 3.</label>
<caption><p>Simulation construction tool chain</p></caption>
<graphic xlink:href="10.1177_0037549712441742-fig3.tif"/>
</fig>
<p><bold>KODO</bold>: a model developer using SiMA needs to define data types to be used for model initialization and inter-port communication. Due to .NET/C++ interoperability requirements, SiMA needs to apply special handling on port data types for serialization/deserialization of data values flowing between atomic models. Similarly, the model initialization phase requires access to input configuration data types. KODO aids the developer by auto-generating not only data beans but also additional processing logic for marshalling and type conversion, for access to model input configuration files for state initialization, and for trace generation. KODO allows definition of data types with simple XML definitions and generates all classes and methods required for the model developer. KODO type definitions have to conform to the KODO XML schema that defines the grammar for the type definitions. <xref ref-type="fig" rid="fig4-0037549712441742">Figure 4</xref> illustrates a graphical representation of top-level constructs of this schema. Note that events and objects are defined as distinct types so as to distinguish between uniquely identifiable variables (objects) and transient port data (events). Objects and events consist of data ‘members’, each with either a primitive type (e.g. int, double, etc.) or referring to a complex ‘struct’ definition (or a polymorphic struct with support for inheritance).</p>
<fig id="fig4-0037549712441742" position="float">
<label>Figure 4.</label>
<caption><p>XML schema representation for KODO type definitions</p></caption>
<graphic xlink:href="10.1177_0037549712441742-fig4.tif"/>
</fig>
<p><bold>Scenario Analyser</bold>: there are two starting points (or entry points) in our simulation construction tool chain. One of those has a more constrained initial specification, where a simulation study is defined by a <italic>scenario</italic> (the term ‘scenario’ is not used to connote a domain-specific experimentation procedure (e.g. those defined by Military Scenario Definition Language (MSDL; see <ext-link ext-link-type="uri" xlink:href="http://sstc-online.org/2009/pdfs/RLW2375.pdf">http://sstc-online.org/2009/pdfs/RLW2375.pdf</ext-link>) – it only indicates the bag of models included in the simulation where model hierarchy information is also provided) that describes all required models, model hierarchy information and model initialization data. In this case our Scenario Analyser interprets a scenario definition and identifies all atomic models (from the component library) and defines their composition hierarchy in an intermediate form to be used by the Model Linker. It is generally an application-dependent analyser that converts the application-dependent scenario file to be used by application-independent Model Linker.</p>
<p><bold>Model Editor</bold>: the second route to the pipeline is the SiMA Model Editor. The Editor provides a context-independent model composition environment where both atomic and coupled models can be created and organized as libraries, thereby facilitating reusability of simulation models. SiMA allows defining atomic models either in C++ or in C# programming languages. Once these models are compiled into binary components (i.e. dynamic link libraries (DLLs)), they can then be graphically coupled using SiMA Model Editor in hierarchical block diagrams to construct more complex composite models.</p>
<p><bold>Model Linker</bold>: Model Linker reads its special scenario definition file and the port mapping rules. Port mapping rules define additional user-defined constraints where data-type driven port mapping based on exact matching of port types is not sufficient to define the complete coupling relationships in a non-ambiguous and valid way. In a way, these rules constitute a semantic layer on what is essentially a syntactic plumbing scheme. The grammar of the rules is defined by yet another XML schema, which is given in <xref ref-type="fig" rid="fig5-0037549712441742">Figure 5</xref>. The Linker produces two output files: the first file, the <italic>model definition file</italic>, includes all the port connections, names and locations of atomic models and their hierarchy. A top-level graphical view of the XML schema representing the structure of the model definition file is given in <xref ref-type="fig" rid="fig6-0037549712441742">Figure 6</xref>. The second output file, <italic>configuration parameters</italic>, includes all initialization data for each atomic model in the scenario.</p>
<fig id="fig5-0037549712441742" position="float">
<label>Figure 5.</label>
<caption><p>XML schema representation for port mapping rules.</p></caption>
<graphic xlink:href="10.1177_0037549712441742-fig5.tif"/>
</fig>
<fig id="fig6-0037549712441742" position="float">
<label>Figure 6.</label>
<caption><p>XML schema representation for Model Linker output.</p></caption>
<graphic xlink:href="10.1177_0037549712441742-fig6.tif"/>
</fig>
<p><bold>Model Builder</bold>: Model Builder reads the model definition output of the Model Linker, then creates and combines all atomic model object instances in the memory of the host computer. As a result, a single coupled model object instance is returned to the caller, which can be used by the SiMA simulation engine to run a simulation.</p>
</sec>
</sec>
<sec id="section13-0037549712441742">
<title>5. Case study</title>
<p>In this section, we present a sample case study to illustrate how SiMA and our simulation construction environment are used to support the simulation application developer.</p>
<p>Our case study involves a typical intrusion detection scenario where an intruder is detected and tracked while it navigates through a field deployed with a number of tiny wireless sensors with arbitrary layout. The simulation models required to implement this study are as follows.</p>
<list id="list6-0037549712441742" list-type="order">
<list-item><p><bold>Sensors</bold>: sensors sense the movement activities in the environment and can communicate with other sensors within their range. Each sensor consists of four sub-components:</p>
<list id="list7-0037549712441742" list-type="alpha-lower">
<list-item><p>antenna;</p></list-item>
<list-item><p>sensing unit;</p></list-item>
<list-item><p>processor;</p></list-item>
<list-item><p>battery.</p></list-item>
</list>
<p>Each sensor is represented by a coupled model and its sub-components are atomic models.</p></list-item>
<list-item><p><bold>Main sensor (or sink unit)</bold>: the main sensor can communicate with the sensors within its range. It sends queries to the sensors and waits for the response messages. The main sensor contains two sub-components: the antenna and processor. Unlike other sensors, the main sensor does not sense the environment and it does not contain a battery.</p></list-item>
<list-item><p><bold>Truck</bold>: the truck represents the intruder. It has a predefined circular path and it follows this path during the simulation. Sensors that get close enough to the truck can understand the location of the truck and prepare a message to be delivered to the main sensor.</p></list-item>
<list-item><p><bold>Logger</bold>: the logger saves all the location and data packages, created by sensors and the truck, in a structured way.</p></list-item>
</list>
<p>A top-level visual representation of SiMA-DEVS models defined for this simulation is given in <xref ref-type="fig" rid="fig7-0037549712441742">Figure 7</xref>, where model structure and couplings can be seen. Dark rectangular shapes with an ‘A’ sign on the top-left corners indicate atomic models and lighter rectangular shapes with no signs on the top-left corner indicate coupled models. Couplings are shown with directed arrows between model ports. The direction of the arrow connotes the direction of the data flow. Port names are denoted as labels beneath the ports. A second-level view of the model layout where models and port connections inside the sensor-coupled model is given in <xref ref-type="fig" rid="fig8-0037549712441742">Figure 8</xref>. When the modeller saves the model layout, the Model Editor produces the model definition file, an intermediate form to be used by the Model Linker.</p>
<fig id="fig7-0037549712441742" position="float">
<label>Figure 7.</label>
<caption><p>Top-level model structure.</p></caption>
<graphic xlink:href="10.1177_0037549712441742-fig7.tif"/>
</fig>
<fig id="fig8-0037549712441742" position="float">
<label>Figure 8.</label>
<caption><p>Models and port connections inside the sensor-coupled model.</p></caption>
<graphic xlink:href="10.1177_0037549712441742-fig8.tif"/>
</fig>
<sec id="section14-0037549712441742">
<title>5.1 Elements of the conceptual model: KODO data types</title>
<p>We now introduce some of the entity definitions that constitute the elements of the conceptual model pertaining to the overall simulation exercise. As stated earlier, KODO type definitions specify the structure and relationships of entities that constitute the conceptual model. There are four main types of messages circulating in the intrusion detection simulation. We provide KODO data-type definitions for these messages below to illustrate the usage of our framework.</p>
<p><bold>DataPacket</bold>: sensors use this message type to communicate with each other. Each data packet contains information about the data gathered by sensing the movement activities in the environment.</p>
<graphic id="img1-0037549712441742" position="anchor" xlink:href="10.1177_0037549712441742-img1.tif"/>
<p><bold>LocationData</bold>: this message type contains a vector. The truck model periodically updates its location and sends a LocationData message to the sensor models.</p>
<graphic id="img2-0037549712441742" position="anchor" xlink:href="10.1177_0037549712441742-img2.tif"/>
<p><bold>DataIDPair</bold>: this message is used between sensors inner models, which are the antenna, processor and sensing unit. Each message contains sensing information and an ID section. Since each sensor model can simulate more than one physical sensor, the ID field is used for identifying the sensor that actually sent the message.</p>
<graphic id="img3-0037549712441742" position="anchor" xlink:href="10.1177_0037549712441742-img3.tif"/>
<p><bold>BatteryInfo</bold>: this message is used by the battery model to manage the life time of the battery.</p>
<graphic id="img4-0037549712441742" position="anchor" xlink:href="10.1177_0037549712441742-img4.tif"/>
<p><bold>SensingData</bold>: this complex type is used in both DataPacket and DataIDPair complex types. This type consists of several fields, including where the message is created, what is its destination, what type of sensing data it contains, etc.</p>
<graphic id="img5-0037549712441742" position="anchor" xlink:href="10.1177_0037549712441742-img5.tif"/>
</sec>
<sec id="section15-0037549712441742">
<title>5.2 Model composition</title>
<p>As stated earlier and illustrated in <xref ref-type="fig" rid="fig4-0037549712441742">Figure 4</xref>, model composition specification can be formed either through the plumbing performed via the Model Editor environment, or via a higher-level scenario definition normally created by a higher-level application layer. <xref ref-type="fig" rid="fig7-0037549712441742">Figures 7</xref> and <xref ref-type="fig" rid="fig8-0037549712441742">8</xref> illustrate the first case. Assuming we start with a scenario definition, then the Linker automatically constructs the couplings using its type-matching algorithms (for syntactic plumbing) and, in addition, a user-defined rule set. A sample rule set used for the case study is given in <xref ref-type="fig" rid="fig9-0037549712441742">Figure 9</xref>. Each rule in the figure has a type that is either ‘allow’ or ‘deny’. If a rule is of type ‘allow’, then the specified connections between a given source and its destination(s) are allowed, but not other syntactically valid connections. On the other hand, if a rule type is ‘deny’, the specified connections between given source and destinations are marked illegal for the plugging algorithm (even if the connection is syntactically valid). Each rule contains only one source, but has multiple destinations. Each source and destination is identified by a model field and optionally by a port field. If the port is not defined, all the ports of the specified model are taken into consideration.</p>
<fig id="fig9-0037549712441742" position="float">
<label>Figure 9.</label>
<caption><p>Sample rules for model connections.</p></caption>
<graphic xlink:href="10.1177_0037549712441742-fig9.tif"/>
</fig>
<p>The sample rules given above state that no connection between sensing unit and antenna is allowed. Therefore, even if their port types match, the linker will not add any coupling between the sensing unit and the antenna.</p>
</sec>
<sec id="section16-0037549712441742">
<title>5.3 Discussion</title>
<p>To relate what we have presented in Section 4 and in this section to the discussion on multi-aspects of composability given in Section 2, we provide a summary of important properties, constructs and mechanisms of our approach in relation to those multi-aspects.</p>
<list id="list8-0037549712441742" list-type="order">
<list-item><p><italic>The modelling formalism</italic>: SiMA-DEVS ensures that an established modelling formalism is followed as a basis for model composition. Thus, the notion of a ‘model’ is defined formally in a non-ambiguous way, including its structural and behavioural aspects.</p></list-item>
<list-item><p><italic>The type system and the grammar:</italic> through enhancements to port definitions of DEVS, SiMA-DEVS supports strongly typed port definitions to aid automated port mapping. As illustrated via KODO types, all model ports have a well-defined type in conformance to an XML schema-type system as the basis. Various XML schema definitions further specify the grammar for expressing the conceptual model and also the model-coupling relationships.</p></list-item>
<list-item><p><italic>The conceptual model:</italic> KODO data-type definitions provide elements of the overall conceptual model. The structure of the messages flowing through the port connections, as well as some state variables, can be specified using KODO definitions. This provides a mechanism similar to that provided by the Federation Object Model (FOM) found in HLA.</p></list-item>
<list-item><p><italic>The coupling specification:</italic> the Model Linker generates the coupling specification based on syntactic port-type mappings and also adhering to the additional mapping rules. Thus the Linker makes extensive use of the strong typing introduced by SiMA-DEVS.</p></list-item>
<list-item><p><italic>The run-time interoperation application programming interfaces (APIs):</italic> the Model Builder cerates the top-level coupled model, which implements an interface (called <italic>IDEVSModel</italic>) compliant to the DEVS parallel simulation protocol. Thus SiMA simulation engine utilizes that interface as a run-time API to advance the simulation models along their trajectories. SiMA also provides a HLA adapter for interoperation among other distributed simulators, but the details of this adapter are left out of the scope of this paper.</p></list-item>
</list>
<p>Presently, we do not address various other relevant aspects, such as validation of the composition (e.g. see the work done by Szabo and Teo<sup><xref ref-type="bibr" rid="bibr30-0037549712441742">30</xref></sup>) or selection of individual models for composition from a repository based on some semantically driven methodology (e.g. see the work done by Bartholet et al.<sup><xref ref-type="bibr" rid="bibr31-0037549712441742">31</xref></sup>). We assume that model development and composition environment is relatively well-controlled, where the model repository is populated with verified models and maintained within the same administrative domain.</p>
<p>Ahn et al.<sup><xref ref-type="bibr" rid="bibr32-0037549712441742">32</xref></sup> propose a composition algorithm for HLA compatible distributed simulation environments that aims at finding an optimal set of Composite Federations (CFs) that provides a balanced level between access control (information hiding) and reduced inter-communication overhead. Their methodology is somewhat orthogonal and could be complementary to our approach, since our current work is more relevant to intra-federate model composability. The work presented by Zoubi and Wainer<sup><xref ref-type="bibr" rid="bibr33-0037549712441742">33</xref></sup> is particularly interesting for us, since the RESTful Interoperability Simulation Environment (RISE) they propose can be considered as a higher-level interoperability middleware that would enable SiMA models and simulators to interoperate with other DEVS-based or non-DEVS simulators in a distributed execution environment. The idea of specifying inter-model connection configurations via port couplings is quite similar to ours, except that in our case port mappings are done on the basis of syntactic type matching automatically (subject to some exception rules). Due to their focus on distributed simulation they also address time synchronization issues (both conservative and optimistic), whereas in our case we assume conservative time management in a less liberal composition environment.</p>
</sec>
</sec>
<sec id="section17-0037549712441742" sec-type="conclusions">
<title>6. Conclusions and further work</title>
<p>In this paper we have discussed issues regarding model composability and simulation interoperability, introduced our approach to dealing with some of the challenges that are particularly related to composability and presented our work on developing a DEVS-based Modelling and Simulation Framework that addresses those challenges. We have elaborated as follows.</p>
<list id="list9-0037549712441742" list-type="bullet">
<list-item><p>Firstly on our extensions on formal semantics of DEVS. In this respect we make <italic>strong typing</italic> and <italic>type-system dependency</italic> of the ports explicit in the formal model, thereby introducing a type discipline to the definition of the externally visible model ports. As such we relate to the requirements mentioned earlier in our preliminary discussion for:</p>
<list id="list10-0037549712441742" list-type="bullet">
<list-item><p>a sound formal model;</p></list-item>
<list-item><p>type-system compliance;</p></list-item>
<list-item><p>a port-centric, consistent coupling specification.</p></list-item>
</list></list-item>
<list-item><p>Secondly, on the architectural properties that makes SiMA a flexible software framework.</p></list-item>
<list-item><p>Thirdly, on SiMA tool support to facilitate relatively low-cost (in terms of development effort) simulation construction for developers.</p></list-item>
</list>
<p>We have also provided a case study where we exemplified our claims. As stated in Section 5.3, type-qualified model port definitions introduced by SiMA-DEVS, together with further mapping constraints defined via rules, are used by our Model Linker to generate the coupling specification for a model composition in an automated way.</p>
<p>SiMA has been used in a number of simulation applications successfully, with strict requirements targeting high performance and ease of model development for the simulation of complex systems. We plan to improve our simulation construction tool chain, in particular by focusing on the SiMA Model Editor to make it a fully fledged layout editing and code generation environment, as a plug-in to an Integrated Development Environment (IDE) (e.g. Microsoft Visual Studio). There is also ongoing work within our team to improve the dynamism support to SiMA. Our objective for dynamism support is to support real world applications in the near future, anticipating that there will be room for improvement to the mechanisms we devised. In particular, scenarios where supporting dynamic fidelity-level adjustments of multiple models in a coordinated way is a requirement are potential use cases where we hope dynamic SiMA would provide a viable solution for application developers.</p>
</sec>
</body>
<back>
<fn-group>
<fn fn-type="financial-disclosure">
<p>This work was partially supported by the R&amp;D office of the Turkish Ministry of Defense.</p>
</fn>
</fn-group>
<ref-list>
<title>References</title>
<ref id="bibr1-0037549712441742">
<label>1.</label>
<citation citation-type="web">
<collab>Modelica Association</collab>, <comment><ext-link ext-link-type="uri" xlink:href="http://www.modelica.org">http://www.modelica.org</ext-link></comment>. [<access-date>Accessed, Novemer 2011</access-date>].</citation>
</ref>
<ref id="bibr2-0037549712441742">
<label>2.</label>
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Otter</surname><given-names>M</given-names></name>
<name><surname>Elmqvist</surname><given-names>H</given-names></name>
</person-group>. <article-title>The Dsblock model interface for exchanging model components</article-title>. In: <source>proceedings of EUROSIM’</source> <volume>95</volume>, <year>1995</year>, pp.<fpage>505</fpage>–<lpage>510</lpage>.</citation>
</ref>
<ref id="bibr3-0037549712441742">
<label>3.</label>
<citation citation-type="book">
<collab>The Mathworks Inc</collab>. <source>Using Simulink, version 5.0.2</source>. <publisher-loc>Natick, MA</publisher-loc>: <publisher-name>The Mathworks Inc</publisher-name>., <month>April</month> <year>2003</year>.</citation>
</ref>
<ref id="bibr4-0037549712441742">
<label>4.</label>
<citation citation-type="book">
<person-group person-group-type="author">
<name><surname>Zeigler</surname><given-names>BP</given-names></name>
<name><surname>Praehofer</surname><given-names>H</given-names></name>
<name><surname>Kim</surname><given-names>TG</given-names></name>
</person-group>. <source>Theory of modeling and simulation</source>. <edition>2nd ed.</edition> <publisher-name>Academic Press</publisher-name>, <year>2000</year>. <publisher-loc>San Diego, USA</publisher-loc>.</citation>
</ref>
<ref id="bibr5-0037549712441742">
<label>5.</label>
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Chen</surname><given-names>G</given-names></name>
<name><surname>Szymanski</surname><given-names>BK</given-names></name>
</person-group>. <article-title>COST: a component-oriented discrete event simulator</article-title>. In: <conf-name>proceedings of the 2002 winter simulation conference</conf-name>, <year>2002</year>, pp.<fpage>776</fpage>–<lpage>782</lpage>.</citation>
</ref>
<ref id="bibr6-0037549712441742">
<label>6.</label>
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Buss</surname><given-names>A</given-names></name>
</person-group>. <article-title>component-based simulation modelling with SIMKIT</article-title>. In: <conf-name>proceedings of the 2002 winter simulation conference</conf-name>, <year>2002</year>, pp.<fpage>243</fpage>–<lpage>249</lpage>.</citation>
</ref>
<ref id="bibr7-0037549712441742">
<label>7.</label>
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Page</surname><given-names>EH</given-names></name>
<name><surname>Opper</surname><given-names>JM</given-names></name>
</person-group>. <article-title>Observations on the complexity of composable simulations</article-title>. In: <conf-name>proceedings of the 1999 winter simulation conference</conf-name>, <year>1999</year>, pp.<fpage>553</fpage>–<lpage>560</lpage>.</citation>
</ref>
<ref id="bibr8-0037549712441742">
<label>8.</label>
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Kasputis</surname><given-names>S</given-names></name>
<name><surname>Ng</surname><given-names>HC</given-names></name>
</person-group>. <article-title>Composable simulations</article-title>. In:<person-group person-group-type="editor">
<name><surname>Joines</surname><given-names>JA</given-names></name>
<name><surname>Barton</surname><given-names>RR</given-names></name>
<name><surname>Kang</surname><given-names>K</given-names></name>
<etal/>
</person-group>. (eds) <conf-name>proceedings of the 2000 winter simulation conference</conf-name>, <year>2000</year>, pp.<fpage>1577</fpage>–<lpage>1584</lpage>.</citation>
</ref>
<ref id="bibr9-0037549712441742">
<label>9.</label>
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Tolk</surname><given-names>A</given-names></name>
<name><surname>Turnitsa</surname><given-names>CD</given-names></name>
<name><surname>Dallo</surname><given-names>SY</given-names></name>
</person-group>. <article-title>Composable M&amp;S web services for net-centric applications</article-title>. <source>J Defense Model Simulat</source> <year>2006</year>; <volume>3</volume>: <fpage>27</fpage>–<lpage>44</lpage>.</citation>
</ref>
<ref id="bibr10-0037549712441742">
<label>10.</label>
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Yilmaz</surname><given-names>L</given-names></name>
</person-group>. <article-title>Models to improve reuse and composability of defense simulations</article-title>. <source>J Defense Model Simulat</source> <year>2004</year>; <volume>1</volume>: <fpage>141</fpage>–<lpage>151</lpage>.</citation>
</ref>
<ref id="bibr11-0037549712441742">
<label>11.</label>
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Sarjoughian</surname><given-names>HS</given-names></name>
</person-group>. <article-title>Model composability</article-title>. In: <person-group person-group-type="editor">
<name><surname>Felipe Perrone</surname><given-names>L</given-names></name>
<name><surname>Lawson</surname><given-names>BG</given-names></name>
<name><surname>Liu</surname><given-names>J</given-names></name>
<etal/>
</person-group>. (eds) <conf-name>proceedings of the 2006 winter simulation conference (WSC ‘06)</conf-name>, <year>2006</year>, pp.<fpage>149</fpage>–<lpage>158</lpage>.</citation>
</ref>
<ref id="bibr12-0037549712441742">
<label>12.</label>
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Davis</surname><given-names>PK</given-names></name>
<name><surname>Tolk</surname><given-names>A</given-names></name>
</person-group>. <article-title>Observations on new developments in composability and multiresolution modeling</article-title>. In: <conf-name>proceedings of the 2007 winter simulation conference</conf-name>, <conf-loc>IEEE Press</conf-loc>, <year>2007</year>, pp.<fpage>859</fpage>–<lpage>870</lpage>.</citation>
</ref>
<ref id="bibr13-0037549712441742">
<label>13.</label>
<citation citation-type="book">
<person-group person-group-type="author">
<name><surname>Cardelli</surname><given-names>L</given-names></name>
</person-group>. <article-title>Type systems</article-title>. In: <source>CRC handbook of science and engineering</source>. <edition>2nd ed.</edition> <year>2004</year>, <comment>Ch. 97</comment>. <publisher-name>Chapman and Hall/CRC, Bowdoin College</publisher-name>, <publisher-loc>Brunswick, Maine, USA</publisher-loc></citation>
</ref>
<ref id="bibr14-0037549712441742">
<label>14.</label>
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Hirschfeld</surname><given-names>R</given-names></name>
<name><surname>Costanza</surname><given-names>P</given-names></name>
<name><surname>Nierstrasz</surname><given-names>O</given-names></name>
</person-group>. <article-title>Context-oriented programming</article-title>. <source>J Object Technol</source> <year>2008</year>; <volume>7</volume>: <fpage>125</fpage>–<lpage>151</lpage>.</citation>
</ref>
<ref id="bibr15-0037549712441742">
<label>15.</label>
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Yilmaz</surname><given-names>L</given-names></name>
</person-group>. <article-title>On the need for contextualized introspective simulation models to improve reuse and composability of defense simulations</article-title>. <source>J Defense Model Simulat</source> <year>2004</year>; <volume>1</volume>: <fpage>135</fpage>–<lpage>145</lpage>.</citation>
</ref>
<ref id="bibr16-0037549712441742">
<label>16.</label>
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Tolk</surname><given-names>A</given-names></name>
<name><surname>Diallo</surname><given-names>S</given-names></name>
</person-group>. <article-title>Model-based data engineering for web services</article-title>. In: <source>Evolution of the web in artificial intelligence environments</source>. <year>2008</year>, pp.<fpage>37</fpage>–<lpage>161</lpage>. <publisher-name>Springer-Verlag</publisher-name>, <publisher-loc>Berlin, Heidelberg</publisher-loc></citation>
</ref>
<ref id="bibr17-0037549712441742">
<label>17.</label>
<citation citation-type="thesis">
<person-group person-group-type="author">
<name><surname>Praehofer</surname><given-names>H</given-names></name>
</person-group>. <source>System theoretic foundations for combined discrete – continuous system simulation</source>. <comment>PhD Thesis</comment>, <publisher-name>J Keper University of Linz</publisher-name>, <year>1991</year>.</citation>
</ref>
<ref id="bibr18-0037549712441742">
<label>18.</label>
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Kofman</surname><given-names>E</given-names></name>
<name><surname>Lapadula</surname><given-names>M</given-names></name>
<name><surname>Pagliero</surname><given-names>E</given-names></name>
</person-group>. <article-title>PowerDEVS: a DEVS–based environment for hybrid system modeling and simulation</article-title>. <source>Technical Report LSD0306, Universidad Nacional de Rosario</source>, <year>2003</year>.</citation>
</ref>
<ref id="bibr19-0037549712441742">
<label>19.</label>
<citation citation-type="book">
<person-group person-group-type="author">
<name><surname>Zeigler</surname><given-names>BP</given-names></name>
</person-group>, <article-title>Theory of Modeling and Simulation</article-title>, <edition>First ed.</edition>, <year>1976</year>, <publisher-name>Wiley Interscience</publisher-name>, <publisher-loc>New York</publisher-loc>.</citation>
</ref>
<ref id="bibr20-0037549712441742">
<label>20.</label>
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Kara</surname><given-names>A</given-names></name>
<name><surname>Deniz</surname><given-names>F</given-names></name>
<name><surname>Bozagac</surname><given-names>CD</given-names></name>
<etal/>
</person-group>. <article-title>Simulation modeling architecture (SiMA), a DEVS based modeling and simulation framework</article-title>. In: <conf-name>proceedings of summer computer simulation conference (SCSC’09)</conf-name>, <conf-loc>SCS</conf-loc>, <year>2009</year>, pp.<fpage>315</fpage>–<lpage>321</lpage>.</citation>
</ref>
<ref id="bibr21-0037549712441742">
<label>21.</label>
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Fujimoto</surname><given-names>RM</given-names></name>
<name><surname>Weatherley</surname><given-names>RM</given-names></name>
</person-group>. <article-title>Time management in the DoD high level architecture</article-title>. In: <source>proceedings of PADS’</source><volume>96</volume>, <year>1996</year>, pp.<fpage>60</fpage>–<lpage>67</lpage>.</citation>
</ref>
<ref id="bibr22-0037549712441742">
<label>22.</label>
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Hwang</surname><given-names>MH</given-names></name>
</person-group>. <article-title>Identifying equivalence of DEVSs: language approach</article-title>. In: <conf-name>proceedings of 2003 summer computer simulation conference, Society for Computer Simulation International</conf-name>, <year>2003</year>, pp.<fpage>319</fpage>–<lpage>324</lpage>.</citation>
</ref>
<ref id="bibr23-0037549712441742">
<label>23.</label>
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Hwang</surname><given-names>MH</given-names></name>
</person-group>. <article-title>Equivalence and minimization of output augmented DEVS</article-title>. In: <conf-name>proceedings of 2003 IEEE conference on system, man, and cybernetics, IEEE</conf-name>, <year>2003</year>, pp.<fpage>409</fpage>–<lpage>414</lpage>.</citation>
</ref>
<ref id="bibr24-0037549712441742">
<label>24.</label>
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Hwang</surname><given-names>MH</given-names></name>
<name><surname>Cho</surname><given-names>SK</given-names></name>
</person-group>. <article-title>Timed behavior analysis of schedule preserved DEVS</article-title>. In: <conf-name>proceedings of 2004 summer computer simulation conference, Society for Computer Simulation International</conf-name>, <year>2004</year>, pp.<fpage>173</fpage>–<lpage>178</lpage>.</citation>
</ref>
<ref id="bibr25-0037549712441742">
<label>25.</label>
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Uhrmacher</surname><given-names>AM</given-names></name>
</person-group>. <article-title>Dynamic structures in modeling and simulation: a reflective approach</article-title>. <source>ACM Trans Model Comput Simulat</source> <year>2001</year>; <volume>11</volume>: <fpage>206</fpage>–<lpage>232</lpage>.</citation>
</ref>
<ref id="bibr26-0037549712441742">
<label>26.</label>
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Baati</surname><given-names>L</given-names></name>
<name><surname>Frydman</surname><given-names>C</given-names></name>
<name><surname>Giambiasi</surname><given-names>N</given-names></name>
</person-group>. <article-title>LSIS_DME MS environment extended by dynamic hierarchical structure DEVS modeling approach</article-title>. In: <conf-name>proceedings of the 2007 spring simulation multiconference</conf-name>, <conf-loc>Norfolk, VA</conf-loc>, <volume>Volume 2</volume>, <conf-date>25–29 March 2007</conf-date>, pp.<fpage>227</fpage>–<lpage>234</lpage>.</citation>
</ref>
<ref id="bibr27-0037549712441742">
<label>27.</label>
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Barros</surname><given-names>FJ</given-names></name>
</person-group>. <article-title>Dynamic structure discrete event system specification: formalism, abstract simulators and applications</article-title>. <source>Trans Soc Comput Simulat</source> <year>1996</year>; <volume>13</volume>: <fpage>35</fpage>–<lpage>46</lpage>.</citation>
</ref>
<ref id="bibr28-0037549712441742">
<label>28.</label>
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Barros</surname><given-names>FJ</given-names></name>
</person-group>. <article-title>Modeling formalisms for dynamic structure systems</article-title>. <source>ACM Trans Model Comput Simulat</source> <year>1997</year>; <volume>7</volume>: <fpage>501</fpage>–<lpage>515</lpage>.</citation>
</ref>
<ref id="bibr29-0037549712441742">
<label>29.</label>
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Deniz</surname><given-names>F</given-names></name>
<name><surname>Kara</surname><given-names>A</given-names></name>
<name><surname>Alpdemir</surname><given-names>MN</given-names></name>
<etal/>
</person-group>. <article-title>Variable structure and dynamism extensions to SiMA a DEVS based modeling -and simulation framework</article-title>. In: <conf-name>proceedings of summer computer simulation conference (SCSC’09)</conf-name>, <conf-loc>SCS</conf-loc>, <year>2009</year>, pp.<fpage>117</fpage>–<lpage>124</lpage>.</citation>
</ref>
<ref id="bibr30-0037549712441742">
<label>30.</label>
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Szabo</surname><given-names>C</given-names></name>
<name><surname>Teo</surname><given-names>YM</given-names></name>
</person-group>. <article-title>An Approach for validation of semantic composability in simulation models</article-title>. In: <conf-name>proceedings of the 2009 ACM/IEEE/SCS 23rd workshop on principles of advanced and distributed simulation (PADS ‘09), IEEE Computer Society</conf-name>, <conf-loc>Washington, DC</conf-loc>, <year>2009</year>, pp.<fpage>3</fpage>–<lpage>10</lpage>.</citation>
</ref>
<ref id="bibr31-0037549712441742">
<label>31.</label>
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Bartholet</surname><given-names>RG</given-names></name>
<name><surname>Brogan</surname><given-names>DC</given-names></name>
<name><surname>Reynolds</surname><given-names>PF</given-names></name>
</person-group>. <article-title>The computational complexity of component selection in simulation reuse</article-title>. In: <person-group person-group-type="editor">
<name><surname>Kuhl</surname><given-names>ME</given-names></name>
<name><surname>Steiger</surname><given-names>NM</given-names></name>
<name><surname>Armstrong</surname><given-names>FB</given-names></name>
<etal/>
</person-group>. (eds) <conf-name>proceedings of the 2005 winter simulation conference</conf-name>, <conf-date>2005</conf-date>, pp.<fpage>2472</fpage>–<lpage>2481</lpage>.</citation>
</ref>
<ref id="bibr32-0037549712441742">
<label>32.</label>
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Ahn</surname><given-names>JH</given-names></name>
<name><surname>Seok</surname><given-names>MG</given-names></name>
<name><surname>Sung</surname><given-names>CH</given-names></name>
<etal/>
</person-group>. <article-title>Hierarchical federation composition for information hiding in HLA-based distributed simulation</article-title>. In: <conf-name>proceedings of the 2010 IEEE/ACM 14th international symposium on distributed simulation and real time applications (DS-RT ‘10), IEEE Computer Society</conf-name>, <conf-loc>Washington, DC</conf-loc>, <conf-date>2010</conf-date>, pp.<fpage>223</fpage>–<lpage>226</lpage>.</citation>
</ref>
<ref id="bibr33-0037549712441742">
<label>33.</label>
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Al-Zoubi</surname><given-names>K</given-names></name>
<name><surname>Wainer</surname><given-names>GA</given-names></name>
</person-group>. <article-title>RISE: REST-ing heterogeneous simulations interoperability</article-title>. In: <conf-name>proceedings of the winter simulation conference 2010</conf-name>, <year>2010</year>, pp.<fpage>2968</fpage>–<lpage>2980</lpage>.</citation>
</ref>
</ref-list>
</back>
</article>