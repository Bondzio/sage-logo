<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  PUBLIC "-//NLM//DTD Journal Publishing DTD v2.3 20070202//EN" "journalpublishing.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article">
<front>
<journal-meta>
<journal-id journal-id-type="publisher-id">PIC</journal-id>
<journal-id journal-id-type="hwp">sppic</journal-id>
<journal-title>Proceedings of the Institution of Mechanical Engineers, Part C: Journal of Mechanical Engineering Science</journal-title>
<issn pub-type="ppub">0954-4062</issn>
<issn pub-type="epub">2041-2983</issn>
<publisher>
<publisher-name>SAGE Publications</publisher-name>
<publisher-loc>Sage UK: London, England</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="doi">10.1177/0954406212439810</article-id>
<article-id pub-id-type="publisher-id">10.1177_0954406212439810</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Design and Manufacture</subject>
</subj-group>
</article-categories>
<title-group>
<article-title>A knowledge-based system for multi-disciplinary conceptual design synthesis</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<name><surname>Liu</surname><given-names>Ze-Lin</given-names></name>
</contrib>
<contrib contrib-type="author" corresp="yes">
<name><surname>Chen</surname><given-names>Yong</given-names></name>
<xref ref-type="corresp" rid="corresp1-0954406212439810"/>
</contrib>
<contrib contrib-type="author">
<name><surname>Xie</surname><given-names>You-Bai</given-names></name>
</contrib>
</contrib-group>
<aff id="aff1-0954406212439810">Institute of Engineering Design, School of Mechanical Engineering, Shanghai Jiao Tong University, China</aff>
<author-notes>
<corresp id="corresp1-0954406212439810">Yong Chen, Institute of Engineering Design, School of Mechanical Engineering, Shanghai Jiao Tong University, Room A-838, No. 800 Dongchuan Road, Minhang District, Shanghai 200240, China. Email: <email>collin12032@sjtu.edu.cn</email></corresp>
</author-notes>
<pub-date pub-type="epub-ppub">
<month>12</month>
<year>2012</year>
</pub-date>
<volume>226</volume>
<issue>12</issue>
<fpage>2950</fpage>
<lpage>2966</lpage>
<history>
<date date-type="received"><day>4</day><month>11</month><year>2011</year></date>
<date date-type="accepted"><day>1</day><month>2</month><year>2012</year></date>
</history>
<permissions>
<copyright-statement>© IMechE 2012</copyright-statement>
<copyright-year>2012</copyright-year>
<copyright-holder content-type="society">Institution of Mechanical Engineers</copyright-holder>
</permissions>
<abstract>
<p>Exploring wide multi-disciplinary solution spaces to create conceptual design solutions is a difficult task for human designers due to lack of sufficient multi-disciplinary knowledge. A viable approach would be to develop a computer-aided system to synthesize the wide variety of knowledge for a given design task. However, the existing design synthesis systems are mainly domain-specific, focusing on conceptual design synthesis in a single or few limited disciplines. Therefore, this article introduces the development of a knowledge-based system for multi-disciplinary conceptual design synthesis, including the establishment of a knowledge base for organizing multi-disciplinary principle solutions and a design synthesis algorithm. The implementation of a prototype software is also reported, with the conceptual design of a solar fountain as a demonstrative case. The results of the case study show that the system can automatically and conveniently generate multi-disciplinary conceptual solutions.</p>
</abstract>
<kwd-group>
<kwd>Conceptual design</kwd>
<kwd>multi-disciplinary</kwd>
<kwd>knowledge base</kwd>
<kwd>design synthesis</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="sec1-0954406212439810" sec-type="intro"><title>Introduction</title>
<p>As a critical stage for developing creative products, conceptual design determines the principle solution (PS) of a product in early design. Today’s products often comprise various components from multiple engineering domains, such as mechanical, hydraulic, electrical, electronics, photoelectric, and energy domains. The exploration in wide multi-disciplinary solution spaces may enable designers to find novel and optimal PS concepts. Here, the ‘multi-disciplinary’ design exploration means that the design search space is expanded into the above multiple domains, rather than the conventional design exploration that often takes place in a single discipline (e.g. mechanical design). Since human designers are often educated and trained discipline-wise, they typically have insufficient knowledge about other disciplines. Moreover, human designers prefer to use familiar solutions to solve design problems,<sup><xref ref-type="bibr" rid="bibr1-0954406212439810">1</xref></sup> which may prevent them from finding creative solutions in a wider multi-disciplinary solution space. Therefore, it will be of great value to develop an automated conceptual design system for assisting human designers to synthesize multi-disciplinary knowledge, which can generate creative conceptual solutions without any biases.</p>
<p>The current commercial computer-aided design (CAD) systems, such as Pro/E, UG, and CATIA, mainly deal with the structural and geometric information of products. These systems are computer-aided modeling and drawing tools rather than CAD tools, as they cannot help designers to create a new product concept and cannot support the design thinking process. There rarely exist any software systems for conceptual design in industry. The existing research of conceptual design systems<sup><xref ref-type="bibr" rid="bibr2-0954406212439810">2</xref></sup><sup>–</sup><sup><xref ref-type="bibr" rid="bibr15-0954406212439810">15</xref></sup> is mainly domain-specific, limited to a single or very few disciplines (e.g. mechanical or electromechanical discipline), and few studies have been carried out on the conceptual design of multi-disciplinary systems. Therefore, this article reports the development of a knowledge-based system for multi-disciplinary conceptual design. This study is based on a theoretical framework, proposed in an earlier paper of Chen et al.,<sup><xref ref-type="bibr" rid="bibr16-0954406212439810">16</xref></sup> for the representation and reuse of multi-disciplinary PS knowledge. The proposed work in this article is the further development and implementation of the knowledge-based framework. It mainly consists of the establishment of a PS knowledge base, development of a design synthesis algorithm, and the software implementation for achieving the automated conceptual design synthesis in multi-discipline application.</p>
<p>In the following section, the related work about ‘conceptual design synthesis’ is reviewed, together with a brief introduction of the knowledge-based framework of the authors, upon which the system is based. ‘Multi-disciplinary PS knowledge base’ section introduces the establishment of PS knowledge base, including knowledge representation and acquisition of known PSs. An algorithm for automated ‘design synthesis’ is presented in the subsequent section. Based on the proposed knowledge base and synthesis algorithm, ‘Software implementation’ section reports the implementation of a prototype software. With the conceptual design of a solar fountain, ‘Case study’ section describes how the prototype system works. In ‘Discussion’ section, the results of a case study are outlined and finally the article concludes.</p>
</sec>
<sec id="sec2-0954406212439810"><title>Conceptual design synthesis methodology</title>
<p>Since computer-aided support in conceptual design can help designers create product concepts more effectively, much effort has been put into developing design synthesis systems, with a result of many prototype tools.<sup><xref ref-type="bibr" rid="bibr2-0954406212439810">2</xref></sup><sup>–</sup><sup><xref ref-type="bibr" rid="bibr15-0954406212439810">15</xref></sup> These design synthesis systems can be primarily classified into two types: human-oriented systems and computer-oriented systems. The former focuses on assisting human designers to achieve the synthesis task, whereas the latter focuses on generating conceptual solutions automatically.</p>
<p>Umeda et al.<sup><xref ref-type="bibr" rid="bibr2-0954406212439810">2</xref>,<xref ref-type="bibr" rid="bibr3-0954406212439810">3</xref></sup> propose a Function–Behavior–State (FBS) model for conceptual design. They develop a conceptual design system called ‘FBS-modeler’ for supporting designers to achieve conceptual design synthesis and analysis. Prabhakar and Goel<sup><xref ref-type="bibr" rid="bibr4-0954406212439810">4</xref></sup> report an environmentally bound structure–behavior–function model for the functional representation of a device, including the role of its environmental interactions. Their model has been implemented with a software system, called ‘Environmental KRITIK.’ The above systems are typical human-oriented systems (human–computer interactive design synthesis). A major drawback of such systems is that they are prone to design bias toward familiar PSs since decision making in design synthesis still largely depends on the experience of human designers.</p>
<p>Compared with the first type of systems, the computer-oriented systems pay more attention to the automation in conceptual design synthesis. Kota and Chiou<sup><xref ref-type="bibr" rid="bibr5-0954406212439810">5</xref>,<xref ref-type="bibr" rid="bibr6-0954406212439810">6</xref></sup> identify a finite set of ‘functional building blocks’ to represent basic mechanisms (e.g. crank–slider, rack–pinion, etc), and develop a motional matrix-decomposing system for generating combinatorial mechanism automatically. Based on bond graph representation, Bracewell and Sharpe<sup><xref ref-type="bibr" rid="bibr7-0954406212439810">7</xref></sup> develop a software tool called ‘Schemebuilder’ for generating design concepts of electromechanical products. Ulrich and Seering<sup><xref ref-type="bibr" rid="bibr8-0954406212439810">8</xref></sup> describe a schematic synthesis system that searches for combinations of structural parts that satisfy a specification of input–output behavior. Kannapan and Marshek<sup><xref ref-type="bibr" rid="bibr9-0954406212439810">9</xref></sup> develop a design reasoning system which can generate solutions based on functional and geometric requirements. A graph-based approach is used in their work for representing some predefined machine elements. Li et al.<sup><xref ref-type="bibr" rid="bibr10-0954406212439810">10</xref></sup> provide a rule-based paradigm to automate the computational synthesis of the conceptual design of mechanisms. The design algorithm employs the best-first heuristic searches in a library of mechanical devices. Campbell et al.<sup><xref ref-type="bibr" rid="bibr11-0954406212439810">11</xref></sup><sup>–</sup><sup><xref ref-type="bibr" rid="bibr13-0954406212439810">13</xref></sup> present a design generation approach called A-design, combining multi-objective optimization, multi-agent systems, and automated design synthesis for electromechanical configuration design. Tang<sup><xref ref-type="bibr" rid="bibr14-0954406212439810">14</xref></sup> develops an automated conceptual design system for mechanism combination, which is suitable for both single and many degree-of-freedom mechanisms. Chen et al.<sup><xref ref-type="bibr" rid="bibr15-0954406212439810">15</xref></sup> develop a morphological matrix-based synthesis system for achieving conceptual design of mechanisms, where design catalogs are used for organizing various kinds of knowledge about basic mechanisms. These above systems are computer-oriented, aiming to achieve conceptual design synthesis automatically. However, they are not feasible for the conceptual design in multi-disciplinary since their function representation models and hence the design synthesis are limited to mechanical or electromechanical disciplines. The knowledge-based system presented in this article is also a kind of computer-oriented system. Compared with equivalent systems, it can achieve the multi-disciplinary design synthesis since the functional representation framework<sup><xref ref-type="bibr" rid="bibr16-0954406212439810">16</xref></sup> upon which it based supports knowledge acquisition from multiple disciplines.</p>
<p>There are also some studies<sup><xref ref-type="bibr" rid="bibr17-0954406212439810">17</xref></sup><sup>–</sup><sup><xref ref-type="bibr" rid="bibr25-0954406212439810">25</xref></sup> dealing with multi-disciplinary design. Few systems based on TRIZ theory<sup><xref ref-type="bibr" rid="bibr17-0954406212439810">17</xref></sup> can be used for conceptual design of multi-disciplinary systems. However, the design principles (derived from a large patent library) retrieved cannot be directly used to solve the design problems; instead, they can merely provide some guidelines for experienced designers. Other research about multi-disciplinary design is mostly based on bond Graph,<sup><xref ref-type="bibr" rid="bibr18-0954406212439810">18</xref></sup> which is a framework built on a lumped-parameter simplification of the general energy equation. In this regard, Rinderle and Finger<sup><xref ref-type="bibr" rid="bibr19-0954406212439810">19</xref></sup> develop a graph production grammar for configurations of machine components. Welch and Dixon<sup><xref ref-type="bibr" rid="bibr20-0954406212439810">20</xref></sup> present a bond graph based behavior reasoning approach for conceptual design. Tay et al.<sup><xref ref-type="bibr" rid="bibr21-0954406212439810">21</xref></sup> present a bond graph based behavior representation, carrying out behavior and configuration transformation to produce design variables to realize design synthesis. Seo et al.<sup><xref ref-type="bibr" rid="bibr22-0954406212439810">22</xref></sup> propose a bond graph based automated design methodology for synthesizing designs for multi-domain systems. These above works take advantage of the bond graph as functional and behavioral representation in design. In addition, there are some other research extend the bond graph approach. Liang and Paredis<sup><xref ref-type="bibr" rid="bibr23-0954406212439810">23</xref></sup> develop a ‘port ontology’ method for conceptual design synthesis. Wu et al.<sup><xref ref-type="bibr" rid="bibr24-0954406212439810">24</xref></sup> provide a ‘conceptual dynamics graph’ for conceptual design of dynamic systems. Roychoudhury et al.<sup><xref ref-type="bibr" rid="bibr25-0954406212439810">25</xref></sup> provide a ‘hybrid bond graph’ for simulation of hybrid system. The graphical representations in these approaches all take the bond graph as their basis. Additional works about bond graph based multi-disciplinary systems can be found in Borutzky<sup><xref ref-type="bibr" rid="bibr26-0954406212439810">26</xref></sup> Although the bond graph can be used to represent the function (behavior) of a component, it can merely be employed to deal with scalar variables. For example, since bond graph theory cannot consider the orientation information, these bond graph based approaches cannot consider the orientation change achieved by a perpendicular bevel gear pair during design synthesis.</p>
<p>A general knowledge-based framework has been proposed in the earlier papers of Chen et al.<sup><xref ref-type="bibr" rid="bibr16-0954406212439810">16</xref></sup> for formal representation of multi-disciplinary knowledge. This framework primarily comprised three parts, i.e. a flexible constraint-based approach for representing desired functions, a situation-free approach for modeling functional knowledge of known PSs, and an agent-based approach for synthesizing these known PSs for achieving desired functions. To be specific, the desired function is represented as a pair of constraints on the input and output flows, aiming at formally representing the design problem. The functional knowledge of a PS decides whether it can be properly retrieved during design synthesis, and its representation comprises the input–output flow name pair, the attribute constraints on the input–output flow, and the flow attribute mapping rules. Based on the knowledge representation, an agent-based design synthesis approach is also provided for achieving automated conceptual design of multi-disciplinary systems. <xref ref-type="fig" rid="fig1-0954406212439810">Figure 1</xref> illustrates this knowledge-based framework and its associated phases in conceptual design synthesis. More detailed discussion about this framework can be found in Chen et al.<sup><xref ref-type="bibr" rid="bibr16-0954406212439810">16</xref></sup>
<fig id="fig1-0954406212439810" position="float"><label>Figure 1.</label><caption><p>Methodology model of the knowledge-based framework.</p></caption><graphic xlink:href="10.1177_0954406212439810-fig1.tif"/>
</fig></p>
<p>Based on this framework, there are two main tasks included in the development of the knowledge-based conceptual design synthesis system, i.e. the establishment of a multi-disciplinary PS knowledge base and the development of a design synthesis algorithm. The implementation results in a prototype software.</p>
</sec>
<sec id="sec3-0954406212439810"><title>Multi-disciplinary PS knowledge base</title>
<p>According to the proposed knowledge-based framework, the generation of conceptual solutions largely depends on the reuse of known PSs (the basic physical mechanism of a system or sub-system for achieving a desired function<sup><xref ref-type="bibr" rid="bibr16-0954406212439810">16</xref></sup>), which serves as the foundation of the design synthesis. The establishment of knowledge base is imperative for the storage and retrieval of known PSs and their related design knowledge. Formal representation of the multi-disciplinary PS knowledge is crucial for the knowledge base. Therefore, in this section, PS knowledge representation will be introduced first, and then the recent progress of PS knowledge acquisition.</p>
<sec id="sec4-0954406212439810"><title>PS knowledge representation</title>
<p>The knowledge of a PS can be categorized into three groups, i.e. functional, structural, and application. At conceptual design stage, details of structural and application knowledge of PSs are less important than its functional knowledge, which is responsible for the retrieval of known PSs. These PSs should be indexed with their functions in the knowledge base for conceptual design synthesis. Therefore, how to represent the function(s) of a known PS is crucial in PS knowledge representation.</p>
<p>In the knowledge-based framework, a formal scheme is developed for qualitatively representing the functional knowledge of known PSs, which comprises an input–output flow name pair, the attribute constraints on the input–output flow, and the flow attribute mapping rules. The input–output flow name pair (<italic>I<sub>F</sub></italic>, <italic>O<sub>F</sub></italic>) is employed to represent the transformation of the flow’s name from input to output achieved by a known PS, where <italic>I<sub>F</sub></italic> and <italic>O<sub>F</sub></italic> denote the name of the input and output flows, respectively. Obviously, this flow name pair is just a rough description of a PS function, more detailed features of the flows should be represented. Here, the features of a flow are represented as a set of attributes and values. For example, the to-and-fro feature of a flow ‘Linear_Velocity’ can be represented as a combination of the attribute <italic>direction</italic> and the value ‘To-and-Fro.’ Based on this, the attribute constraints on input flow of a PS prescribe what values the flow’s attributes should have in order for it to be correctly processed, whereas the attribute constraints on its output flow determine what values the output flow’s attributes should be. Moreover, not only the transformation of related flow names, but also that of the values of their attributes is involved in the functional knowledge of a PS. A production rule-based approach is adopted to represent such attribute transformation knowledge, i.e. the attribute mapping rule. The precondition part denotes what value the related attribute of the input flow should have in order for the rule to be activated, whereas the action part indicates what value(s) the corresponding attribute of the output flow can have after the rule is executed. The functional representation of a known PS is shown in the upper part of <xref ref-type="fig" rid="fig2-0954406212439810">Figure 2</xref>.
<fig id="fig2-0954406212439810" position="float"><label>Figure 2.</label><caption><p>The scheme of PS knowledge representation. PS: principle solution.</p></caption><graphic xlink:href="10.1177_0954406212439810-fig2.tif"/>
</fig></p>
<p>Beside the functional knowledge, structural and application knowledge are also essential for detailing a PS, but they are not directly used in design synthesis for PS retrieving, so it will just be briefly introduced here. The structural knowledge of a PS refers to its main physical components and their assembly relations, and the application knowledge of a PS refers to its performance description, environmental effects, and side effects. All the three types of knowledge exhibit a comprehensive view of a PS together. In <xref ref-type="fig" rid="fig3-0954406212439810">Figure 3</xref>, an electric motor case is presented to illustrate the overall scheme of PS knowledge. In this figure, the functional knowledge of this PS is represented according to the aforementioned formal scheme in <xref ref-type="fig" rid="fig2-0954406212439810">Figure 2</xref>, following that is the structural and application knowledge.
<fig id="fig3-0954406212439810" position="float"><label>Figure 3.</label><caption><p>The scheme of PS knowledge: an electric motor case. PS: principle solution.</p></caption><graphic xlink:href="10.1177_0954406212439810-fig3.tif"/>
</fig></p>
</sec>
<sec id="sec5-0954406212439810"><title>PS knowledge acquisition</title>
<p>The establishment of a PS knowledge base requires the knowledge collectors not only be familiar with regard to the knowledge representation scheme, but also posses certain amount of domain knowledge. Therefore, several graduates in engineering background are recruited to do the knowledge acquisition work. They major in mechanical engineering, environmental engineering, electronic, and electrical engineering. With their assistance, the PS knowledge is acquired through viewing textbooks and consulting domain experts. Here, there are two primary sources of PS knowledge. The first is the common mechanisms or elements in each discipline, for example, students from mechanism design summarized a list of the basic mechanisms such as slider–crank mechanism, crank–rocker mechanism, spur gear pair, and oscillating cam follower mechanism. Also, students from hydraulic engineering summarized the common hydraulic components such as gear pump, centrifugal pump, hydraulic cylinder, and one-way valve. The other method is by analyzing some typical product systems, decomposing them into independent functional blocks. For example, several PSs (such as AC motor, slider–crank mechanism, etc.) can be abstracted from a punching machine.</p>
<p>According to the proposed knowledge representation scheme, a basic procedure for the acquisition of PS knowledge should be followed by collectors, which is described as follows.
<list id="list1-0954406212439810" list-type="order">
<list-item><p>Identify the input–output flow of a potential PS, standardize the flow names, and symbols.</p></list-item>
<list-item><p>Specify the constraints on flows. These constraints refer to the detail features of a flow. For example, a reciprocating translation can be regarded as a ‘Linear_Velocity’ flow, the constraints on it can be represented as <italic>direction</italic> (Linear_Velocity): <italic>[To-and-Fro]</italic> (<xref ref-type="fig" rid="fig2-0954406212439810">Figure 2</xref>).</p></list-item>
<list-item><p>Identify the possible causal relationship between the attributes of input and output flows; represent it as a production rule. For example, for a PS ‘Spur gear pair,’ if the ‘<italic>direction</italic>’ of its input rotation is ‘<italic>clockwise</italic>,’ then the corresponding ‘<italic>direction</italic>’ of the output rotation should be ‘<italic>anti-clockwise</italic>.’ This can be represented as ‘<italic>IF (direction, “clockwise”)</italic>, <italic>THEN (direction, “anti-clockwise”)</italic>’ (<xref ref-type="fig" rid="fig2-0954406212439810">Figure 2</xref>).</p></list-item>
<list-item><p>Acquire the structural and application knowledge of the PS, including its schematic sketch, main components and their assembly relations, and the application parameters such as ‘<italic>complexity</italic>,’ ‘<italic>noise</italic>,’ and ‘<italic>endurance</italic>.’</p></list-item>
</list></p>
<p>In this way, the multi-disciplinary PS knowledge is translated into a formal language which can be processed by a computer program. At present, the PS knowledge base comprises about 102 PSs, including mechanical PSs (e.g. slider–crank mechanism), hydraulic PSs (e.g. hydraulic gear pump), electrical PSs (e.g. AC motor), electronics PSs (e.g. electrical inverter) and energy PSs (e.g. solar battery). All the PSs in the knowledge base are acquired and then represented in a format similar to <xref ref-type="fig" rid="fig3-0954406212439810">Figure 3</xref>.</p>
</sec>
</sec>
<sec id="sec6-0954406212439810"><title>Design synthesis</title>
<p>Based on the established PS knowledge base, the new design concept generating process can be facilitated by retrieving and synthesizing the known PSs. The basic mechanism of the design synthesis process is described as follows.</p>
<p>The existing PSs in the knowledge base form a possible solution space to a given design problem (abstracted as a desired function). The input flow derived from the desired function can be viewed as the initial flow, now taken as a current flow by the conceptual design agent (CDA) to trigger the synthesis process, whereas the output flow of the desired function is the target flow. Synthesis proceeds by comparing the differences in characteristics between the current flow and the input flows of various PSs, retrieving the functional knowledge of the eligible ones to act on the current flow, and then resulting in several output flows. These output flows will be compared with the target flow. If there are no matches, they will be in turn taken as new current flows for further PS selection, and this iterative process will continue until the target flow is reached. Else, the feasible output flows will wait for the final back track of the CDA when the PS searching process is all over. After backtracking, the search paths will emerge by connecting several eligible PSs in sequence. In this way, these PSs are selected and combined into conceptual solutions to achieve a desired function. <xref ref-type="fig" rid="fig4-0954406212439810">Figure 4</xref> generally illustrates the synthesis process. Also, in order to prevent this process from falling into an endless cycle, the designer should prescribe the maximum search depth (MSD) (the depth of search tree, see <xref ref-type="fig" rid="fig4-0954406212439810">Figure 4</xref>) in advance.
<fig id="fig4-0954406212439810" position="float"><label>Figure 4.</label><caption><p>General schema of the search tree.</p></caption><graphic xlink:href="10.1177_0954406212439810-fig4.tif"/>
</fig></p>
<p>In the synthesis process, each flow is represented with a flow name, together with a set of attributes and values. When the CDA identifies an eligible PS to act on a current flow, it will then determine the output flow and its attribute value. This attribute-value determination process includes retrieving the attribute mapping rules of the selected PS whilst checking the constraints on the PSs output flow. An example of the CDAs action process is illustrated in <xref ref-type="fig" rid="fig5-0954406212439810">Figure 5</xref>.
<fig id="fig5-0954406212439810" position="float"><label>Figure 5.</label><caption><p>An example of CDAs action process. CDAs: conceptual design agents.</p></caption><graphic xlink:href="10.1177_0954406212439810-fig5.tif"/>
</fig></p>
<p>In order to find novel and promising PS combinations, the exhaustive search strategy<sup><xref ref-type="bibr" rid="bibr27-0954406212439810">27</xref>,<xref ref-type="bibr" rid="bibr28-0954406212439810">28</xref></sup> is employed to develop the synthesis algorithm. <xref ref-type="fig" rid="fig6-0954406212439810">Figure 6</xref> shows a flow chart of this algorithm. Detailed introduction of the synthesis process is as follows.
<list id="list2-0954406212439810" list-type="simple">
<list-item><p><italic>Step 1</italic>: Input a desired function <italic>F</italic>(<italic>f</italic><sub>I</sub>, <italic>f</italic><sub>O</sub>), initialize its input flow <italic>f</italic><sub>I</sub>, including specify the constraints on it. These are the initial states of flow which will trigger the PS searching process later. Set the value of <italic>d</italic><sub>max</sub> to control the MSD.</p></list-item>
<list-item><p><italic>Step 2</italic>: Construct a set of flows based on the input constraints <italic>C</italic>(<italic>f</italic><sub>I</sub>). Because the <italic>C</italic>(<italic>f</italic><sub>I</sub>) defined by the designer may be partial or incomplete. The computer will presume the possible value(s) of flow attributes, in order to generate a set of flows with determined initial value.</p></list-item>
<list-item><p><italic>Step 3</italic>: Traverse the flow set and put each flow record into a stack (a temporary table to record the information generated during synthesis process).</p></list-item>
<list-item><p><italic>Step 4</italic>: Try to select one unexplored flow from the stack as a current flow <italic>f</italic><sub>c</sub>. If succeed, go to the next step; else, there are no unexplored records left in the stack, exit from the current search.</p></list-item>
<list-item><p><italic>Step 5</italic>: Check if the current search depth <italic>d<sub>i</sub></italic> exceeds the MSD <italic>d</italic><sub>max</sub> or not. If passed, go to <italic>Step 7</italic>; else, go to <italic>Step 6</italic>.</p></list-item>
<list-item><p><italic>Step 6</italic>: Update the state of the current flow <italic>f</italic><sub>c</sub> as ‘explored’ and then go to <italic>Step 4</italic>.</p></list-item>
<list-item><p><italic>Step 7</italic>: Select all the suitable PSs from the knowledge base that can act on the current flow <italic>f</italic><sub>c</sub> as a PS set (if the input flow name of certain PSs is the same as <italic>f</italic><sub>c</sub> and they are unexplored, then these PSs are ‘eligible’ here).</p></list-item>
<list-item><p><italic>Step 8</italic>: Try to select one unexplored PS from the set as the current PS, if succeed, go on to check its input flow state satisfies the constraints on <italic>f</italic><sub>c</sub> or not; else, select next unexplored PS record as current PS.</p></list-item>
<list-item><p><italic>Step 9</italic>: If no unexplored PS can be found, update the current search depth <italic>d<sub>i</sub></italic> as <italic>d<sub>i</sub></italic> = <italic>d<sub>i</sub></italic> + 1 and then go to <italic>Step 6.</italic></p></list-item>
<list-item><p><italic>Step 10</italic>: If the input flow state of the current PS satisfies the constraints on <italic>f</italic><sub>c</sub>, use the functional knowledge of the current PS to act on <italic>f</italic><sub>c</sub>, resulting in its output flow.</p></list-item>
<list-item><p><italic>Step 11</italic>: If the output flow state satisfies the constraints on <italic>f</italic><sub>O</sub> (goal condition), go to <italic>Step 12</italic>; else, put the output flow into the stack as a new flow record which would trigger the next search round.</p></list-item>
<list-item><p><italic>Step 12</italic>: Mark the output flow of the PS for final trace back and set the state of current PS as explored, then go to <italic>Step 7.</italic></p></list-item>
<list-item><p><italic>Step 13</italic>: After all the flows in the stack are explored, trace the flow-transforming path back and generate combinatorial PSs as solutions, then exit.</p></list-item>
</list>
<fig id="fig6-0954406212439810" position="float"><label>Figure 6.</label><caption><p>Flow chart of the design synthesis algorithm.</p></caption><graphic xlink:href="10.1177_0954406212439810-fig6.tif"/>
</fig></p>
</sec>
<sec id="sec7-0954406212439810"><title>Software implementation</title>
<p>There are two primary objectives to develop the knowledge-based system: one is to assist designers to manage the multi-disciplinary PS knowledge for reuse, the other is for automated conceptual design synthesis. Based on the knowledge base and design synthesis algorithm, what introduced below are the data schema design of the knowledge base and the development of a software tool for distributed access to the knowledge base and for design synthesis.</p>
<p>The existing software tools for design synthesis are mostly Client/Server (C/S) architecture based.<sup><xref ref-type="bibr" rid="bibr2-0954406212439810">2</xref></sup><sup>–</sup><sup><xref ref-type="bibr" rid="bibr15-0954406212439810">15</xref></sup> The knowledge-based system is different as it is developed based on Browser/Server (B/S) architecture, which can enable users to access the PS knowledge base more conveniently via the internet, through multiple distributed clients using common web browsers. It has various web-based interfaces for knowledge entry, browsing, and maintenance. This prototype software is called Intelligent Conceptual Design Platform (ICDP).</p>
<p>The ICDP system makes use of ASP.NET in Microsoft Visual Studio 2008 as the web application tool. The database used for establishing the knowledge base is Microsoft SQL 2005.</p>
<p>In this section, first, the architecture of the system will be generally described, and then the data schema design of the PS knowledge base, after that, the software platform will be introduced together with several typical user-interfaces.</p>
<sec id="sec8-0954406212439810"><title>Architecture of the system</title>
<p>The architecture of the ICDP can be distinguished as the external and the internal parts (<xref ref-type="fig" rid="fig7-0954406212439810">Figure 7</xref>). The former refers to the hardware environment, including several distributed client terminals, the internet, web server, database server and the data exchange among them. The external architecture is illustrated in <xref ref-type="fig" rid="fig7-0954406212439810">Figure 7</xref> (part 1). As the user operates on the point-and-click interface, the web browser sends Hypertext Transfer Protocol (HTTP) requests to a web server. The compiled program running on the web server processes the requests into Structured Query Language (SQL) queries that are sent to a database server. The SQL queries retrieve the data of design knowledge from the database and return the data as texts to the program on the web server, which then format the data in HTML for viewing through a web browser. The formatted data are then sent from the HTTP server back to the user. Note that there are primarily two kinds of users associated with the software system. The first are the product designers, who will be returned with design solutions generated by the system after he/she sends a design request to the system. Also, the other is the knowledge engineer who is responsible for acquiring and maintaining the knowledge in the database.
<fig id="fig7-0954406212439810" position="float"><label>Figure 7.</label><caption><p>The architecture of ICDP. ICDP: Intelligent Conceptual Design Platform.</p></caption><graphic xlink:href="10.1177_0954406212439810-fig7.tif"/>
</fig></p>
<p>The internal architecture of the ICDP refers to its various component–modules and affiliation. This software system is mainly composed of three sub-systems, i.e. the basic data management, the PS knowledge management, and the conceptual design synthesis. The first one enables human users to manage the basic terms that the software system uses, such as flow taxonomy, flow names, attributes, values, etc. It consists of four modules as ‘flow taxonomy term management’, ‘flow name term management,’ ‘flow attributes management,’ and ‘flow attri_value deployment.’ The second is for managing the functional knowledge of PSs, as well as their structural and application knowledge, which takes a form similar to design catalogs. It has many sub-modules such as ‘PS basic_info management,’ ‘functional knowledge management,’ ‘structural knowledge management,’ and ‘application knowledge management.’ The development of the first two sub-systems is based on the knowledge representation approach in our framework, but dealing with the data in different complex levels. The third is primarily for generating creative combinatorial PSs for desired functions. The implementation of this sub-system follows the synthesis algorithm introduced in ‘Software implementation’ section, including modules of ‘problem definition,’ ‘problem reasoning,’ ‘selection of solutions,’ and ‘solution inquiry.’ <xref ref-type="fig" rid="fig7-0954406212439810">Figure 7</xref> (part 2) shows the main modules (for each module, it may have several sub-modules) of each sub-system, and the data-interacting relationships between these sub-systems and database.</p>
</sec>
<sec id="sec9-0954406212439810"><title>Data schema design of the knowledge base</title>
<p>The knowledge base schema is built and served by Microsoft SQL server 2005, a relational database system. According to the introduction of knowledge representation and acquisition in ‘Multi-disciplinary PS knowledge base’ section, the organization of design knowledge is PS-centric. This means that for any design property to exist in conceptual design, it must be linked to a PS directly or indirectly. Therefore, the knowledge base is built with the hub of PS knowledge. <xref ref-type="fig" rid="fig8-0954406212439810">Figure 8</xref> illustrates a graphic view of database tables. In this figure, there are two primary categories of tables: (1) those with no background color store basic data such as the flow terms, flow taxonomy, and flow attribute terms; (2) those with dark background color store the data of relationships and associations between basic terms, e.g. functional knowledge. It is constructed as input–output flow pair in ‘function knowledge table,’ where the flow terms used is picked from the ‘flow term table.’ In other words, the flow term table is referenced by the function table, and the latter stores the data of relation between each two individual flow terms. The arrows in the figure show the reference relations, arrow direction means ‘is referenced by,’ i.e. the table on a starting point is referenced by the table on the related ending point. Moreover, some tables may reference themselves to establish hierarchies, such as flow taxonomy table and object structure table. In addition, according to the previous PS knowledge classification in ‘PS knowledge representation’ section, there are a group of related database tables corresponding to each kind of knowledge. In <xref ref-type="fig" rid="fig8-0954406212439810">Figure 8</xref>, the left part (circled in dashed line) is the group of database tables to store functional knowledge of PS, consisting of nine tables. The table group of application knowledge is in the middle part and the right part is the table group of structural knowledge.
<fig id="fig8-0954406212439810" position="float"><label>Figure 8.</label><caption><p>Graphical view of the database tables about PS knowledge. PS: principle solution.</p></caption><graphic xlink:href="10.1177_0954406212439810-fig8.tif"/>
</fig></p>
<p>In the present approach, the function is used as a link to retrieve the existing PSs and their related design knowledge according to design enquiries. Therefore, its data schema design is selected here for illustration of data schema of the knowledge base (<xref ref-type="fig" rid="fig9-0954406212439810">Figure 9</xref>). The structural knowledge and application knowledge of PSs are also essential for constructing the conceptual solutions. However, due to limited space, their data schema designs will not be detailed individually.
<fig id="fig9-0954406212439810" position="float"><label>Figure 9.</label><caption><p>The data schema design of PS functional knowledge. PS: principle solution.</p></caption><graphic xlink:href="10.1177_0954406212439810-fig9.tif"/>
</fig></p>
</sec>
<sec id="sec10-0954406212439810"><title>The automated conceptual design system</title>
<p>In previous sections, the technical background has been introduced for the development of ICDP. This section mainly focuses on the basic operations of this software system with illustration of several typical user-interfaces.</p>
<p>As mentioned before, ICDP has two main functions as knowledge base management and automated conceptual design synthesis. <xref ref-type="fig" rid="fig10-0954406212439810">Figure 10</xref> shows the basic operation procedure of the system. The first step is to standardize the flows and related terms from different disciplines, and then store them in corresponding database tables as basic data. These are element terms for knowledge construction. The following step is to construct PS knowledge by use of the terms in basic term tables. These two steps (as the first phase) are for establishment of the knowledge base and the following maintenance. Existing design knowledge is used as the foundation for design synthesis. Based on this, the designer can initialize a design problem and search for potential solutions using the software system (as the second phase). If no solutions are generated, meaning that the existing PS knowledge is not enough to solve the current problem, and further development of the knowledge base is necessary.
<fig id="fig10-0954406212439810" position="float"><label>Figure 10.</label><caption><p>Operation flow chart of ICDP with typical user-interfaces. ICDP: Intelligent Conceptual Design Platform.</p></caption><graphic xlink:href="10.1177_0954406212439810-fig10.tif"/>
</fig></p>
<p>These system operations introduced above are all achieved though different user-interfaces, which serve as the end user’s access points to the knowledge base. <xref ref-type="fig" rid="fig10-0954406212439810">Figure 10</xref> also shows the screenshot of some typical user-interfaces, including one for basic data entry, two for specifying PSs and their related knowledge, and one for exhibition of design synthesis results. In the flow chart, the first phase focuses on the management of PS knowledge and the second on the conceptual design synthesis.</p>
</sec>
</sec>
<sec id="sec11-0954406212439810"><title>Case study</title>
<p>In some modern villages and towns, a small fountain is desired by many families for decoration of their backyards, domestic ponds, or for garden irrigation. As environmental issues are becoming more and more important today, solar energy is supposed to be taken as the power source of the small device. This design task could be summarized as designing a solar fountain, with the solar energy as its input, and the volumetric water flow as its output. Obviously, this task deals with the design knowledge from multiple disciplines, and it is very possible that a designer cannot generate a suitable PS for this design task since he does not have related multi-disciplinary knowledge. Therefore, this design case is chosen here to test the ICDP, to verify whether it can generate some novel and promising combinatorial PSs.</p>
<sec id="sec12-0954406212439810"><title>Specifying the desired function</title>
<p>The statement of above design task cannot be directly processed by the ICDP. Therefore, at first, the designer should specify a desired function. Here, the input flow of the desired function is ‘<italic>Solar_light</italic>,’ whereas the output flow is ‘<italic>Volumetric_flow</italic>.’ According to the functional representation in the aforementioned knowledge-based framework, this desired function can be expressed as follows.
<list id="list3-0954406212439810" list-type="simple">
<list-item><p>    <italic>Function:</italic></p></list-item>
<list-item><p>   {<italic>Semantic_Description:</italic></p></list-item>
<list-item><p>     <italic>&lt;Convert solar light into volumetric flow&gt;</italic></p></list-item>
<list-item><p>   <italic>Input_Flow_Name: “Solar_Light”</italic></p></list-item>
<list-item><p>   <italic>[(stability, “Constant”||”Variable”)</italic></p></list-item>
<list-item><p>     <italic>(intermittence, “Continuous”)</italic></p></list-item>
<list-item><p>     <italic>(type, “Visual_Light”)]</italic></p></list-item>
<list-item><p>   <italic>Output_Flow_Name: “Volumetric_Flow”</italic></p></list-item>
<list-item><p>   <italic>[(magnitude, “Variable”)</italic></p></list-item>
<list-item><p>     <italic>(direction, “X”||”Y”||”Z”)</italic></p></list-item>
<list-item><p>   <italic>  (intermittence, “Continuous”)]</italic></p></list-item>
<list-item><p>    }</p></list-item>
</list></p>
</sec>
<sec id="sec13-0954406212439810"><title>Conceptual design synthesis process</title>
<p>In the conceptual design synthesis process, the ICDP plays the role of the design agent. According to the synthesis algorithm, the primary synthesis process is as follows.</p>
<p>First, the ICDP transforms the constraint-based representation of the initial flow into a set of environmental flows with detailed features. Since the attribute ‘<italic>stability</italic>’ of the Solar_Light flow has two values (i.e. ‘Constant’ and ‘Variable’), two environmental flows can then be constructed, i.e. ‘{<italic>stability</italic>: Constant; <italic>intermittence</italic>: Continuous; <italic>Type</italic>: Visual_Light}’ and ‘Solar_Light {<italic>stability</italic>: Variable; <italic>intermittence</italic>: Continuous; <italic>Type</italic>: Visual_Light}’.</p>
<p>Second, the ICDP begins to sense its environment, taking the first environmental flow, ‘Solar_Light {<italic>stability</italic>: Constant; <italic>intermittence</italic>: Continuous; <italic>Type:</italic> Visual_Light}’ as the current flow. After that, the system then analyzes the constraints of each known PS on its input flow to find suitable PSs for acting on the current flow. As a result, the <italic>Solar-Battery</italic> is then selected as an eligible PS.</p>
<p>Third, the ICDP retrieves the functional knowledge of the selected PS to act on the environmental flow, and then this PS will output an Electrical_Current flow. The primary constraints on the output flow of this PS are that its direction must be positive and that the current type must be DC. For the current flow, this PS also has two executable attribute mapping rules, i.e. ‘IF (<italic>stability</italic> (Solar_Light) = “Constant”), THEN (<italic>stability</italic> (Electrical_Current) = “Constant”),’ and ‘IF (<italic>intermittence</italic> (Solar_Light) = “Continuous”), THEN (<italic>intermittence</italic> (Electrical_Current) = “Continuous”).’ Based on these two rules, the ICDP know that the values of the attributes <italic>stability</italic> and <italic>intermittence</italic> for the output Electrical_Current flow are ‘Constant’ and ‘Continuous,’ respectively. As a result, the system can generate an output flow for this PS, ‘Electrical_Current {<italic>stability</italic>: Constant; <italic>intermittence</italic>: Continuous; <italic>direction:</italic> Positive; <italic>Type</italic>: DC},’ which will be further put into its environment.</p>
<p>The ICDP will continue to sense its environment, i.e. it will get the environmental flow next to the current one, set it as the current flow and find suitable PSs to act on it again. This iterative process will continue until all environmental flows have been explored. More details about the synthesis process are illustrated in <xref ref-type="fig" rid="fig11-0954406212439810">Figure 11</xref>.
<fig id="fig11-0954406212439810" position="float"><label>Figure 11.</label><caption><p>Illustration of the design synthesis process about solar fountain.</p></caption><graphic xlink:href="10.1177_0954406212439810-fig11.tif"/>
</fig></p>
<p>Finally, when the above search process ends, the ICDP will verify whether there are some flows in its environment that can satisfy the constraints on the output flow of the desired function, and then output the combinatorial PSs. For example, when the flow, ‘Volumetric_Flow {<italic>stability</italic>: Variable; <italic>intermittence</italic>: Continuous; <italic>axial-orientation</italic>: Y},’ is identified as a satisfying output flow, the system will then get the corresponding previous flows through a backtracking process, and link them together as a flow sequence, e.g. ‘Volumetric_Flow {<italic>stability</italic>: Variable; <italic>intermittence</italic>: Continuous; <italic>axial-orientation</italic>: Y} ← Angular_Velocity {<italic>stability</italic>: Constant; <italic>intermittence</italic>: Continuous; <italic>direction:</italic> Clockwise; <italic>axial-orientation</italic>: Y} ← Electrical_Current {<italic>stability</italic>: Constant; <italic>intermittence</italic>: Continuous; <italic>direction:</italic> Positive; <italic>Type</italic>: DC} ← Solar_Light {<italic>stability</italic>: Constant; <italic>intermittence</italic>: Continuous; <italic>Type</italic>: Visual _Light}.’ Corresponding to this flow-transforming chain, the combinatorial PS is ‘<italic>Centrifugal pump</italic> ← <italic>DC-Motor</italic> ← <italic>Solar-Battery</italic>.’</p>
    <p>The above PS searching and combining process can be automatically achieved by ICDP. The user-interfaces for defining a design problem and listing the search results is shown in <xref ref-type="fig" rid="fig12-0954406212439810">Figure 12(a)</xref> and (<xref ref-type="fig" rid="fig12-0954406212439810">b</xref>). If the user wants to see more details about the functional reasoning process, he/she may click the link following each solution, and then a new web page will be opened to show every single step of the flow-transformation process (<xref ref-type="fig" rid="fig12-0954406212439810">Figure 12(c)</xref>). In order to prevent this exhaustive search process falling into an endless circle, the MSD should be set by users before the synthesis process is launched. When the MSD is set as ‘3,’, two typical combinatorial PSs are: ‘<italic>Solar-Battery</italic> → <italic>DC pump</italic>’ and ‘<italic>Solar-Battery</italic> → <italic>DC motor</italic> → <italic>Centrifugal pump</italic>.’ If the user is unsatisfied with the results, he can increase the MSD and launch the conceptual design synthesis again. Here, when the MSD is set as ‘4,’ more combinatorial PSs will be generated, such as ‘<italic>Solar-Battery</italic> → <italic>DC motor</italic> → <italic>Spur gear pair</italic> → <italic>Centrifugal pump</italic>’ and ‘<italic>Solar-Battery</italic> → <italic>DC-AC inverter</italic> → <italic>AC Motor</italic> → <italic>Centrifugal pump</italic>.’ Now, the ICDP is only responsible for generating the combinatorial PSs for designers. Further evaluation of these solutions still relies on the effort of designers based on the structural and application knowledge of PSs, which also can be provided by ICDP. The improvement of such a system for solution evaluation is still one of the authors’ prospective targets.
<fig id="fig12-0954406212439810" position="float"><label>Figure 12.</label><caption><p>Interfaces of ICDP on design synthesis. ICDP: Intelligent Conceptual Design Platform.</p></caption><graphic xlink:href="10.1177_0954406212439810-fig12.tif"/>
</fig></p>
</sec>
</sec>
<sec id="sec14-0954406212439810" sec-type="discussion"><title>Discussion</title>
<p>Compared with the existing conceptual design systems,<sup><xref ref-type="bibr" rid="bibr2-0954406212439810">2</xref></sup><sup>–</sup><sup><xref ref-type="bibr" rid="bibr15-0954406212439810">15</xref></sup> ICDP provides designers with several advantages.
<list id="list4-0954406212439810" list-type="order">
<list-item><p>It is a web-based platform that allows users to store and retrieve design knowledge easily and conveniently via multiple user-interfaces. The B/S architecture supports distributed access to design knowledge, allowing the knowledge base to be enlarged conveniently. More knowledge about future PSs can be acquired and accessed along with the new advancements in product design.</p></list-item>
<list-item><p>It can automatically achieve the conceptual design synthesis. Functional reasoning process follows the synthesis algorithm, which can ensure PS selection without any bias.</p></list-item>
<list-item><p>The knowledge-based framework, upon which it is based, supports knowledge acquisition from multiple disciplines. This enables the PS exploring in a much wider range of design space. Unlike the domain-specific design synthesis systems developed previously.</p></list-item>
<list-item><p>In addition to the functional knowledge, the structural and application knowledge are all integrated into the PS model, so that designers do not need to remember these related knowledge in conceptual design.</p></list-item>
</list></p>
<p>A major obstacle in multi-disciplinary design is the semantic problem, i.e. there are no common inter-disciplinary design terms. This problem might be avoided using ontological approaches,<sup><xref ref-type="bibr" rid="bibr29-0954406212439810">29</xref>,<xref ref-type="bibr" rid="bibr30-0954406212439810">30</xref></sup> which provide a unifying knowledge framework for annotating the data are required to facilitate the semantic integration, knowledge-based searching, and unambiguous interpretation. In conceptual design, ontology is used to build a cross-domain functional representation.<sup><xref ref-type="bibr" rid="bibr31-0954406212439810">31</xref></sup> In this regard, in the previous work of Chen et al.,<sup><xref ref-type="bibr" rid="bibr16-0954406212439810">16</xref></sup> a flow taxonomy approach is also developed to standard the flow terms for functional representation, in order to keep the consistency of multi-disciplinary knowledge.</p>
<p>Although progress has been made on the research of computer-aided conceptual design, there are also some limitations of the ICDP system. First, the PS, as the fundamental element of the design synthesis, must be a system or sub-system which derived from known products. For example, the slider–crank mechanism could be a PS, instead of its components such as rods, levers, etc. (in such case, these components would be so diverse and the input–output flows of them cannot be clearly identified). Second, the ICDP now can only generate combinatorial PSs after design synthesis. Further evaluation of these solutions still needs the designer’s effort. Third, the exhaustive search strategy employed in design synthesis is inefficient for solution generation, especially when the capacity of knowledge base is greatly enlarged. More heuristics should be added to the design synthesis process to make this system more intelligent.</p>
</sec>
<sec id="sec15-0954406212439810" sec-type="conclusions"><title>Conclusions</title>
<p>Since human designers often have difficulty in exploring wide multi-disciplinary solution spaces for novel PSs, it is of great value to develop an automated multi-disciplinary conceptual design system so that PSs from various disciplines can be automatically synthesized together for achieving desired functions.</p>
<p>This article introduces the development of a knowledge-based system for the multi-disciplinary conceptual design synthesis. It is primarily composed of the establishment of a multi-disciplinary knowledge base, including PS knowledge representation and acquisition; the development of a design synthesis algorithm; and the development of a prototype software called ICDP. A test of the ICDP demonstrates that it can successfully generate solutions for a desired function through integrating PSs in various disciplines together, among which promising combinatorial PSs can be found.</p>
<p>There are many situations where human designers may find ICDP useful. First, when a designer does not have sufficient multi-disciplinary knowledge required for solving a desired function, ICDP can generate many combinatorial PSs by retrieving the known PSs in its knowledge base. Second, when a designer wants to innovate an existing system, ICDP can also search in a wider solution space again for better PSs. Third, through providing designers with all possible PSs, ICDP can help the designer avoid design bias effectively.</p>
</sec>
</body>
<back>
<sec id="sec16-0954406212439810"><title>Funding</title>
<p>This work was supported by Natural Science Foundation of China (grant no. 50975173 and 50935004), Ministry of Science and Technology of China (grant no. 2008AA04Z108), and Science and Technology Commission of Shanghai Municipality (grant no. 09QA1402800).</p>
</sec>
<ack>
<title>Acknowledgments</title>
<p>We are grateful to the reviewers and the editors for their constructive suggestions. Special thanks to Mr K Andrew for improving the quality of this study.</p></ack>
<ref-list>
<title>References</title>
<ref id="bibr1-0954406212439810"><label>1</label><citation citation-type="book"><person-group person-group-type="author"><name><surname>Pahl</surname><given-names>G</given-names></name><name><surname>Beitz</surname><given-names>W</given-names></name></person-group><source>Engineering design-a systematic approach</source>, <edition>3rd edn</edition>. <publisher-loc>New York, NY</publisher-loc>: <publisher-name>Springer-Verlag</publisher-name>, <year>1996</year>.</citation></ref>
<ref id="bibr2-0954406212439810"><label>2</label><citation citation-type="book"><person-group person-group-type="author"><name><surname>Umeda</surname><given-names>Y</given-names></name><name><surname>Takeda</surname><given-names>H</given-names></name><name><surname>Tomiyama</surname><given-names>T</given-names></name><etal/></person-group> <article-title>Function, behavior and structure</article-title>. <person-group person-group-type="editor"><name><surname>Gero</surname><given-names>JS</given-names></name></person-group>. <source>Applications of artificial intelligence in engineering V</source>. <publisher-loc>Berlin</publisher-loc>: <publisher-name>Computational Mechanics Publications/Springer-Verlag</publisher-name>,<year>1990</year><fpage>177</fpage>–<lpage>193</lpage></citation></ref>
<ref id="bibr3-0954406212439810"><label>3</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Umeda</surname><given-names>Y</given-names></name><name><surname>Ishii</surname><given-names>M</given-names></name><name><surname>Yoshioka</surname><given-names>M</given-names></name><etal/></person-group>. <article-title>Supporting conceptual design based on the function-behavior-state modeler</article-title>. <source>AI EDAM</source> <year>1996</year>; <volume>10</volume><issue>4</issue><fpage>275</fpage>–<lpage>288</lpage>.</citation></ref>
<ref id="bibr4-0954406212439810"><label>4</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Prabhakar</surname><given-names>S</given-names></name><name><surname>Goel</surname><given-names>AK</given-names></name></person-group>. <article-title>Functional modeling for enabling adaptive design of devices for new environments</article-title>. <source>Artif Intell Eng</source> <year>1998</year>; <volume>12</volume>: <fpage>417</fpage>–<lpage>444</lpage>.</citation></ref>
<ref id="bibr5-0954406212439810"><label>5</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Kota</surname><given-names>S</given-names></name><name><surname>Chiou</surname><given-names>SJ</given-names></name></person-group>. <article-title>Conceptual design of mechanisms based on computational synthesis and simulation of kinematic building blocks</article-title>. <source>Res Eng Des</source> <year>1992</year>; <volume>4</volume>: <fpage>75</fpage>–<lpage>87</lpage>.</citation></ref>
<ref id="bibr6-0954406212439810"><label>6</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Chiou</surname><given-names>SJ</given-names></name><name><surname>Kota</surname><given-names>S</given-names></name></person-group>. <article-title>Automated conceptual design of mechanisms</article-title>. <source>Mech Mach Theory</source> <year>1999</year>; <volume>34</volume>: <fpage>467</fpage>–<lpage>495</lpage>.</citation></ref>
<ref id="bibr7-0954406212439810"><label>7</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Bracewell</surname><given-names>RH</given-names></name><name><surname>Sharpe</surname><given-names>JEE</given-names></name></person-group>. <article-title>Functional description used in computer support for qualitative scheme generation-Schemebuilder</article-title>. <source>AI EDAM</source> <year>1996</year>; <volume>10</volume>: <fpage>333</fpage>–<lpage>345</lpage>.</citation></ref>
<ref id="bibr8-0954406212439810"><label>8</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Ulrich</surname><given-names>K</given-names></name><name><surname>Seering</surname><given-names>W</given-names></name></person-group>. <article-title>Synthesis of schematic descriptions in mechanical design</article-title>. <source>Res Eng Des</source> <year>1989</year>; <volume>1</volume><issue>1</issue><fpage>3</fpage>–<lpage>18</lpage>.</citation></ref>
<ref id="bibr9-0954406212439810"><label>9</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Kannapan</surname><given-names>SM</given-names></name><name><surname>Marshek</surname><given-names>KM</given-names></name></person-group>. <article-title>Design synthesis reasoning: a methodology for mechanical design</article-title>. <source>Res Eng Des</source> <year>1991</year>; <volume>2</volume><issue>4</issue><fpage>221</fpage>–<lpage>238</lpage>.</citation></ref>
<ref id="bibr10-0954406212439810"><label>10</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>CL</given-names></name><name><surname>Tan</surname><given-names>ST</given-names></name><name><surname>Chan</surname><given-names>KW</given-names></name></person-group>. <article-title>A qualitative and heuristic approach to the conceptual design of mechanism</article-title>. <source>Eng Appl Artif Intell</source> <year>1996</year>; <volume>9</volume><issue>1</issue><fpage>17</fpage>–<lpage>32</lpage>.</citation></ref>
<ref id="bibr11-0954406212439810"><label>11</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Campbell</surname><given-names>M</given-names></name><name><surname>Cagan</surname><given-names>J</given-names></name><name><surname>Kotovsky</surname><given-names>K</given-names></name></person-group>. <article-title>A-design: an agent-based approach to conceptual design in a dynamic environment</article-title>. <source>Res Eng Des</source> <year>1999</year>; <volume>11</volume>: <fpage>172</fpage>–<lpage>192</lpage>.</citation></ref>
<ref id="bibr12-0954406212439810"><label>12</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Campbell</surname><given-names>M</given-names></name><name><surname>Cagan</surname><given-names>J</given-names></name><name><surname>Kotovsky</surname><given-names>K</given-names></name></person-group>. <article-title>Agent-based synthesis of electro-mechanical design configurations</article-title>. <source>J Mech Des</source> <year>2000</year>; <volume>122</volume>: <fpage>61</fpage>–<lpage>69</lpage>.</citation></ref>
<ref id="bibr13-0954406212439810"><label>13</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Campbell</surname><given-names>M</given-names></name><name><surname>Cagan</surname><given-names>J</given-names></name><name><surname>Kotovsky</surname><given-names>K</given-names></name></person-group>. <article-title>The A-design approach to managing automated design synthesis</article-title>. <source>Res Eng Des</source> <year>2003</year>; <volume>14</volume>: <fpage>12</fpage>–<lpage>24</lpage>.</citation></ref>
<ref id="bibr14-0954406212439810"><label>14</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Tang</surname><given-names>L</given-names></name></person-group>. <article-title>Many-degree-of-freedom mechanism combination in automated conceptual design of mechanism systems</article-title>. <source>Proc IMechE Part C: J Mechanical Engineering Science</source> <year>2006</year>; <volume>220</volume><issue>5</issue><fpage>724</fpage>–<lpage>740</lpage>.</citation></ref>
<ref id="bibr15-0954406212439810"><label>15</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Chen</surname><given-names>Y</given-names></name><name><surname>Feng</surname><given-names>PE</given-names></name><name><surname>He</surname><given-names>B</given-names></name><etal/></person-group>. <article-title>Automated conceptual design of mechanisms using improved morphological matrix</article-title>. <source>ASME J Mech Des</source> <year>2006</year>; <volume>128</volume>: <fpage>516</fpage>–<lpage>526</lpage>.</citation></ref>
<ref id="bibr16-0954406212439810"><label>16</label><citation citation-type="other"><comment>Chen Y, Liu ZL and Xie YB. A general knowledge-based framework for conceptual design of multi-disciplinary systems. In: <italic>Design Computing and Cognition '10</italic>, VI, pp.425–443, DOI: 10.1007/978-94-007-0510-4_23</comment>.</citation></ref>
<ref id="bibr17-0954406212439810"><label>17</label><citation citation-type="book"><person-group person-group-type="author"><name><surname>Altshuller</surname><given-names>G</given-names></name></person-group><source>The innovation algorithm: TRIZ, systematic innovation and technical creativity</source>. <publisher-loc>Worcester, MA</publisher-loc>: <publisher-name>Technical Innovation Center Inc.</publisher-name>, <year>1999</year>.</citation></ref>
<ref id="bibr18-0954406212439810"><label>18</label><citation citation-type="book"><person-group person-group-type="author"><name><surname>Paynter</surname><given-names>HM</given-names></name></person-group><source>Analysis and design of engineering systems</source>. <publisher-loc>Cambridge, MA</publisher-loc>: <publisher-name>The MIT Press</publisher-name>, <year>1961</year>.</citation></ref>
<ref id="bibr19-0954406212439810"><label>19</label><citation citation-type="other"><comment>Finger S and Rinderle JR. A transformational approach to mechanical design using a Bond Graph grammar. <italic>ASME Design Theory and Methodology</italic> 1989; 17: 107–116</comment>.</citation></ref>
<ref id="bibr20-0954406212439810"><label>20</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Welch</surname><given-names>RV</given-names></name><name><surname>Dixon</surname><given-names>JR</given-names></name></person-group>. <article-title>Guiding conceptual design through behavioral reasoning</article-title>. <source>Res Eng Des</source> <year>1994</year>; <volume>6</volume>: <fpage>169</fpage>–<lpage>188</lpage>.</citation></ref>
<ref id="bibr21-0954406212439810"><label>21</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Tay</surname><given-names>EH</given-names></name><name><surname>Flowers</surname><given-names>W</given-names></name><name><surname>Barrus</surname><given-names>J</given-names></name></person-group>. <article-title>Automated generation and analysis of dynamic system designs</article-title>. <source>Res Eng Des</source> <year>1998</year>; <volume>10</volume>: <fpage>15</fpage>–<lpage>29</lpage>.</citation></ref>
<ref id="bibr22-0954406212439810"><label>22</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Seo</surname><given-names>K</given-names></name><name><surname>Fan</surname><given-names>Z</given-names></name><name><surname>Hu</surname><given-names>J</given-names></name><etal/></person-group>. <article-title>Toward a unified and automated design methodology for multi-domain dynamic systems using bond graphs and genetic programming</article-title>. <source>Mechatronics</source> <year>2003</year>; <volume>13</volume><issue>8–9</issue><fpage>851</fpage>–<lpage>885</lpage>.</citation></ref>
<ref id="bibr23-0954406212439810"><label>23</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Liang</surname><given-names>VC</given-names></name><name><surname>Paredis</surname><given-names>CJJ</given-names></name></person-group>. <article-title>A port ontology for conceptual design of systems</article-title>. <source>J Comput Inf Sci Eng</source> <year>2004</year>; <volume>4</volume>: <fpage>206</fpage>–<lpage>217</lpage>.</citation></ref>
<ref id="bibr24-0954406212439810"><label>24</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Wu</surname><given-names>Z</given-names></name><name><surname>Campbell</surname><given-names>M</given-names></name><name><surname>Fernández</surname><given-names>B</given-names></name></person-group>. <article-title>Bond graph based automated modeling for computer-aided design of dynamic systems</article-title>. <source>J Mech Des</source> <year>2008</year>; <volume>130</volume><issue>4</issue><fpage>041102-1</fpage>–<lpage>041102-11</lpage>.</citation></ref>
<ref id="bibr25-0954406212439810"><label>25</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Roychoudhury</surname><given-names>I</given-names></name><name><surname>Daigle</surname><given-names>MJ</given-names></name><name><surname>Biswas</surname><given-names>G</given-names></name></person-group>. <article-title>Efficient simulation of hybrid systems: a hybrid bond graph approach</article-title>. <source>Simulation</source> <year>2011</year>; <volume>87</volume><issue>6</issue><fpage>467</fpage>–<lpage>498</lpage>.</citation></ref>
<ref id="bibr26-0954406212439810"><label>26</label><citation citation-type="book"><person-group person-group-type="author"><name><surname>Borutzky</surname><given-names>W</given-names></name></person-group><source>Bond graph methodology-development and analysis of multidisciplinary dynamic system models</source>. <publisher-loc>London, UK</publisher-loc>: <publisher-name>Springer-Verlag, ISBN: 978-1-84882-881-0</publisher-name>, <year>2010</year>.</citation></ref>
<ref id="bibr27-0954406212439810"><label>27</label><citation citation-type="book"><person-group person-group-type="author"><name><surname>Russell</surname><given-names>S</given-names></name><name><surname>Norvig</surname><given-names>P</given-names></name></person-group><source>Artificial intelligence: a modern approach</source>, <edition>2nd ed</edition>. <publisher-loc>Hong Kong</publisher-loc>: <publisher-name>Pearson Education Asia Limited and Tsinghua University Press</publisher-name>, <year>2006</year>.</citation></ref>
<ref id="bibr28-0954406212439810"><label>28</label><citation citation-type="book"><person-group person-group-type="author"><name><surname>Nilsson</surname><given-names>NJ</given-names></name></person-group><source>Artificial intelligence: a new synthesis</source>. <publisher-loc>San Mateo, CA</publisher-loc>: <publisher-name>Morgan Kaufmann</publisher-name>, <year>1998</year>.</citation></ref>
<ref id="bibr29-0954406212439810"><label>29</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Lin</surname><given-names>HK</given-names></name><name><surname>Harding</surname><given-names>JA</given-names></name><name><surname>Shahbaz</surname><given-names>M</given-names></name></person-group>. <article-title>Manufacturing system engineering ontology for semantic interoperability across extended project teams</article-title>. <source>Int J Prod Res</source> <year>2004</year>; <volume>42</volume>: <fpage>5099</fpage>–<lpage>5118</lpage>.</citation></ref>
<ref id="bibr30-0954406212439810"><label>30</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Wheeler</surname><given-names>TJ</given-names></name></person-group>. <article-title>Collaborative multi-discipline/multi-scale analysis, modeling, simulation and integration in complex systems: system biology</article-title>. <source>Comput Sci Appl</source> <year>2006</year>; <volume>3980</volume>: <fpage>654</fpage>–<lpage>664</lpage>.</citation></ref>
<ref id="bibr31-0954406212439810"><label>31</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Kitamura</surname><given-names>Y</given-names></name><name><surname>Mizoguchi</surname><given-names>R</given-names></name></person-group>. <article-title>Ontology-based systematization of functional knowledge</article-title>. <source>J Eng Des</source> <year>2004</year>; <volume>15</volume><issue>4</issue><fpage>327</fpage>–<lpage>351</lpage>.</citation></ref>
</ref-list>
</back>
</article>