<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  PUBLIC "-//NLM//DTD Journal Publishing DTD v2.3 20070202//EN" "journalpublishing.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article">
<front>
<journal-meta>
<journal-id journal-id-type="publisher-id">WMR</journal-id>
<journal-id journal-id-type="hwp">spwmr</journal-id>
<journal-id journal-id-type="nlm-ta">Waste Manag Res</journal-id>
<journal-title>Waste Management &amp; Research</journal-title>
<issn pub-type="ppub">0734-242X</issn>
<issn pub-type="epub">1096-3669</issn>
<publisher>
<publisher-name>SAGE Publications</publisher-name>
<publisher-loc>Sage UK: London, England</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="doi">10.1177/0734242X11402870</article-id>
<article-id pub-id-type="publisher-id">10.1177_0734242X11402870</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Short Reports</subject>
</subj-group>
</article-categories>
<title-group>
<article-title>A method for optimizing waste collection using mathematical programming: a Buenos Aires case study</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<name><surname>Bonomo</surname><given-names>Flavio</given-names></name>
<xref ref-type="aff" rid="aff1-0734242X11402870">1</xref>
<xref ref-type="aff" rid="aff2-0734242X11402870">2</xref>
</contrib>
<contrib contrib-type="author" corresp="yes">
<name><surname>Durán</surname><given-names>Guillermo</given-names></name>
<xref ref-type="aff" rid="aff2-0734242X11402870">2</xref>
<xref ref-type="aff" rid="aff3-0734242X11402870">3</xref>
<xref ref-type="aff" rid="aff4-0734242X11402870">4</xref>
</contrib>
<contrib contrib-type="author">
<name><surname>Larumbe</surname><given-names>Frederico</given-names></name>
<xref ref-type="aff" rid="aff1-0734242X11402870">1</xref>
</contrib>
<contrib contrib-type="author">
<name><surname>Marenco</surname><given-names>Javier</given-names></name>
<xref ref-type="aff" rid="aff1-0734242X11402870">1</xref>
<xref ref-type="aff" rid="aff5-0734242X11402870">5</xref>
</contrib>
</contrib-group>
<aff id="aff1-0734242X11402870"><label>1</label>Departamento de Computación, FCEyN, Universidad de Buenos Aires, Buenos Aires, Argentina</aff>
<aff id="aff2-0734242X11402870"><label>2</label>CONICET, Argentina</aff>
<aff id="aff3-0734242X11402870"><label>3</label>Departamento de Matemática, FCEyN, Universidad de Buenos Aires, Buenos Aires, Argentina</aff>
<aff id="aff4-0734242X11402870"><label>4</label>Departamento de Ingeniería Industrial, FCFM, Universidad de Chile, Santiago, Chile</aff>
<aff id="aff5-0734242X11402870"><label>5</label>Instituto de Ciencias, Universidad Nacional de General Sarmiento, Los Polvorines, Argentina</aff>
<author-notes>
<corresp id="corresp1-0734242X11402870">Guillermo Durán, Departamento de Matemática, FCEyN, Universidad de Buenos Aires Ciudad Universitaria - pab. I (1428) Buenos Aires, Argentina Email: <email>gduran@dm.uba.ar</email></corresp>
</author-notes>
<pub-date pub-type="epub-ppub">
<month>3</month>
<year>2012</year>
</pub-date>
<volume>30</volume>
<issue>3</issue>
<fpage>311</fpage>
<lpage>324</lpage>
<history>
<date date-type="received">
<day>28</day>
<month>12</month>
<year>2010</year>
</date>
<date date-type="accepted">
<day>12</day>
<month>2</month>
<year>2011</year>
</date>
</history>
<permissions>
<copyright-statement>© The Author(s) 2012</copyright-statement>
<copyright-year>2012</copyright-year>
<copyright-holder content-type="society">International Solid Waste Association</copyright-holder>
</permissions>
<abstract>
<p>A method is proposed that uses operations research techniques to optimize the routes of waste collection vehicles servicing dumpster or skip-type containers. The waste collection problem is reduced to the classic travelling salesman problem, which is then solved using the Concorde solver program. A case study applying the method to the collection system in the southern zone of Buenos Aires is also presented. In addition to the typical minimum distance criterion, the optimization problem incorporates the objective of reducing vehicle wear and tear as measured by the physics concept of mechanical work. The solution approach, employing graph theory and mathematical programming tools, is fully described and the data correction process is also discussed. The application of the proposed method minimized the distance travelled by each collection vehicle in the areas studied, with actual reductions ranging from 10 to 40% of the existing routes. The shortened distances led in turn to substantial decreases in work done and therefore in vehicle wear and tear. Extrapolation of the results to the entire southern zone of Buenos Aires indicates potential savings for the civic authorities of more than US$200 000 per year in addition to the qualitative impacts of less traffic disruption, less vehicle driver fatigue and less pollution.</p>
</abstract>
<kwd-group>
<kwd>Environment</kwd>
<kwd>mathematical programming</kwd>
<kwd>waste collection</kwd>
<kwd>vehicle routing</kwd>
<kwd>TSP</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="section1-0734242X11402870" sec-type="intro">
<title>Introduction</title>
<p>Designing efficient urban waste collection systems has become a priority for local governments of major cities around the world due to concerns regarding pollution, public health and the environment as well as the budgetary impacts of the systems’ transport, operating and labour costs. In this article a method that uses operations research techniques to optimize the routes of waste collection vehicles servicing dumpster or skip-type containers is proposed. The waste collection problem is reduced to the classic travelling salesman problem, which is then solved using the Concorde solver program. A case study applying the method to the collection system in the southern zone of Buenos Aires (Argentina) is also presented.</p>
<p>There are three principal types of waste collection: residential, commercial and industrial (<xref ref-type="bibr" rid="bibr7-0734242X11402870">Golden et al., 2002</xref>). Residential collection serves private homes; a single garbage truck is capable of servicing from 100 to 1000 such residences per day. Although frequencies will vary from city to city, daily pick-up is not unusual. Commercial collection, on the other hand, provides garbage removal for customers such as shopping centres, restaurants and office buildings, which may be assigned a pick-up time window. Each commercial route can service between 60 and 400 customers daily with two or three visits to a transfer station or disposal site. Finally, industrial collection services factories, building sites and other major construction projects. What distinguishes it from commercial collection is that industrial waste containers tend to be four or five times bigger and often only one can be emptied per pick-up. This poses a vehicle routing problem that is very different from the situation facing commercial collection services. The objectives of waste collection routing problems vary considerably, typical examples being to minimize the number of vehicles, minimize the distance covered, identify compact routes or minimize vehicle wear and tear.</p>
<p>A considerable literature exists on waste collection optimization. <xref ref-type="bibr" rid="bibr12-0734242X11402870">Liebman (1975)</xref> covers the entire range of problems on the subject, including simulation and optimization models for the installation of transfer, treatment and disposal facilities and for collection vehicle routing and human resource planning. <xref ref-type="bibr" rid="bibr13-0734242X11402870">Male and Liebman (1978)</xref> set out one of the first algorithms designed to simultaneously generate the zoning and vehicle routing for a garbage collection system.</p>
<p>A survey of works on waste collection vehicle routing may be found in (<xref ref-type="bibr" rid="bibr9-0734242X11402870">Kim et al., 2006</xref>). <xref ref-type="bibr" rid="bibr5-0734242X11402870">Eisenstein and Iyer (1997)</xref> present a ‘dynamic scheduling algorithm’ that generates dynamic schedules for maximizing the service level in Chicago’s collection system. <xref ref-type="bibr" rid="bibr3-0734242X11402870">Chang et al. (1997)</xref> propose an integer programming method integrated with a geographical information system for the city of Kaohsiung (Taiwan). Given the complexity inherent in garbage collection vehicle routing, some approaches have resorted to heuristic procedures, examples of which are <xref ref-type="bibr" rid="bibr15-0734242X11402870">Mourao and Almeida (2000)</xref> for Lisbon (Portugal) and <xref ref-type="bibr" rid="bibr16-0734242X11402870">Yeomans et al. (2003)</xref> for the Canadian city of Hamilton. Finally, <xref ref-type="bibr" rid="bibr2-0734242X11402870">Arribas et al. (2010)</xref> develop a method combining heuristics with integer linear programming techniques that was successfully applied in Santiago, Chile.</p>
<p>A new residential waste collection system currently being implemented in Buenos Aires will require local residents to deposit their garbage into dumpster or skip-type containers located throughout the city. Each container has a capacity of 1000 L. The idea is to replace the old system of individual household waste receptacles with one that affords greater environmental protection and collection efficiency.</p>
<p>For organizational purposes Buenos Aires is divided into six waste collection zones as shown in <xref ref-type="fig" rid="fig1-0734242X11402870">Figure 1</xref>. The shaded areas are the parts of each zone where the new system is already in operation. Responsibility for managing collection in zones 1 to 4 and zone 6 has been assigned to individual private operators whereas in zone 5, covering the city’s southern district, the same duties are handled by the city government’s urban sanitation authority known as the Ente de Higiene Urbano (EHU).</p>
<fig id="fig1-0734242X11402870" position="float">
<label>Figure 1.</label>
<caption>
<p>Waste collection zones in Buenos Aires. Scale 1 : 120 000 (1 cm = 1.2 km).</p>
</caption>
<graphic xlink:href="10.1177_0734242X11402870-fig1.tif"/>
</fig>
<p>The precise locations of the containers are specified in advance. Those serviced by the EHU, which will be the exclusive focus of the present article, are grouped into four sub-zones. Each of the four is assigned a single collection vehicle, thus excluding zone definition from the scope of the present investigation. The trucks make two identical trips daily, one in the morning and another in the evening. A trip begins when a vehicle starts out from the EHU in the direction of the first container in its sub-zone. After servicing all of its assigned containers it then heads to the transfer station to dump the collected waste before returning to the depot. Emptying a container and cleaning up in the immediate vicinity takes about 3 min. On the morning trip the trucks depart the EHU at 0700 h and return at approximately 1500 h whereas on the evening trip they set out at 1800 h. The four subz-ones have 47, 133, 134 and 161 containers, respectively, for a total of 375. The new system is marked for expansion in the short term to 20 subzones with 2000 to 2500 containers.</p>
<p>Each collection vehicle can hold 15 000 kg of waste. During the morning round, each vehicle collects between 10 000 and 15 000 kg, whereas on the afternoon trip, each one picks up from 2500 to 5000 kg. Every 10 days a truck follows behind the collection vehicles and cleans the containers as they are emptied. At the transfer station the garbage is compacted before being transported by larger vehicles to the final disposal site located in the greater urban area.</p>
<p>The purpose of this study was to improve the routes currently followed by the collection vehicles while maintaining the above-described general pattern in which each truck starts out from the EHU, empties all the containers in its assigned sub-zone, dumps the waste at the transfer station and returns to the EHU. The two objectives of this improvement are, in order of importance, the minimization of distance travelled and the reduction of vehicle wear. As carrying large loads puts considerable strain on various parts of the vehicles, reducing the distance travelled while heavily loaded would bring substantial benefits to the system operator.</p>
<p>With regard to labour costs, this route optimization has no effect, given that the waste collection workers are paid a fixed amount per shift. Shorter distances would presumably lessen driver fatigue, however, as well as diminishing vehicle wear, and would also mean less pollution and disruption of city traffic. The quantifiable economic savings are due to the reduction in fuel consumption, lower vehicle maintenance costs and longer vehicle service lives.</p>
<p>It should be noted that with the data currently available, travel times along the streets covered by the vehicles cannot be accurately estimated. For this reason, total distance travelled rather than travel time was chosen as the principal objective.</p>
<p>To quantify vehicle wear the concept of mechanical work is borrowed from physics. It is measured for a given route segment as the product of the distance travelled and the force exerted. The unit of this metric in the International System of Units is the joule (J), formally defined as the force of 1 N acting to move an object through a distance of 1 m. Thus, the work done by a vehicle over any segment between two consecutive containers is the distance separating them multiplied by the load carried, and the total work for the entire route is just the sum of the work done on each segment. To the best of the authors’ knowledge, no existing studies in the literature on the optimization of waste collection include the reduction of work done by the collection vehicles as a criterion.</p>
<p>This paper describes how computational tools were applied to effectively solve the optimization problem of the waste collection vehicles in the four EHU sub-zones using integer linear programming techniques. The computational tools and the correction and interpretation of the data are also discussed. As will be seen in section entitled ‘Results and discussion’ the proposed optimization process generated routes that were highly efficient in terms of the objectives adopted, with reductions of distance travelled and work done by the trucks of 10 to 45% in comparison with the existing routes.</p>
<p>The remainder of this article is organized as follows. The next section defines a natural representation of the map of the southern zone of Buenos Aires City with graph theory techniques. The following section shows how the waste collection problem can be reduced to the classic travelling salesman problem and briefly outlines the implementation of a software tool that carries out map processing tasks, calculates optimal routes and displays the results, which are presented in the following section. The next section sets out a sensitivity analysis of the impact of adding new waste collection vehicles to each city sub-zone, and finally, the article closes with the conclusions drawn and some indications for extensions of the work reported here.</p>
</sec>
<sec id="section2-0734242X11402870">
<title>A graph-theoretic representation of the Buenos Aires southern zone map</title>
<p>This section describes the data that was available and defines in detail how the map of the southern zone of Buenos Aires was represented by a graph. The representation is the heart of the entire implementation, laying the basis for the tasks of calculating vehicle routes and distances, validating the processed information and eliminating incorrect data.</p>
<p>Note first of all that the basic unit of the map is the city block, used here in the sense of a section of street between two consecutive cross streets. As in many cities, address numbers within a single block in Buenos Aires generally increase over an interval of 100, with odd numbers on one side and even on the other. As the streets of the city tend to follow a grid pattern, adjacent blocks in parallel streets have the same address interval. This enables the location of any block along the length of a street to be identified in terms of its ‘100-block’ number, hereafter denoted simply as the block number.</p>
<p>The map used was provided by the Buenos Aires city government in the form of a shapefile, one of the standard computer file formats for representing maps and geographical information. The file is a database that for every city block stores the locations of its corners, the name of the street, the initial and final block addresses, the traffic direction (one way or two way), and the positions of any traffic signals. Notation for this and the following section is included in <xref ref-type="table" rid="table1-0734242X11402870">Table 1.</xref></p>
<table-wrap id="table1-0734242X11402870" position="float">
<label>Table 1.</label>
<caption>
<p>Notation for sections entitled ‘A graph-theoretic representation of the Buenos Aires southern zone map’ and ‘Solution strategy’</p>
</caption>
<graphic alternate-form-of="table1-0734242X11402870" xlink:href="10.1177_0734242X11402870-table1.tif"/>
<table>
<colgroup>
<col align="left"/>
<col align="left"/>
</colgroup>
<thead>
<tr>
<th align="left">Symbol</th>
<th align="left">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td><italic>p</italic></td>
<td>point in the map</td>
</tr>
<tr>
<td><italic>D</italic></td>
<td>threshold distance to associate traffic signals to street intersections (in m)</td>
</tr>
<tr>
<td><italic>G</italic> = (<italic>V</italic>,<italic>A</italic>)</td>
<td>digraph modelling the city</td>
</tr>
<tr>
<td><italic>C</italic> = {<italic>c</italic><sub>1</sub> = (<italic>s</italic><sub>1</sub>, <italic>p</italic><sub>1</sub>), … , <italic>c<sub>n</sub></italic> = (<italic>s<sub>n</sub></italic>, <italic>p<sub>n</sub></italic>)}</td>
<td>city blocks</td>
</tr>
<tr>
<td><italic>s</italic> ∈ {increasing, decreasing, two-way}</td>
<td>possible street directions</td>
</tr>
<tr>
<td><italic>p<sub>i</sub></italic> = (<italic>q</italic>(<italic>i</italic><sub>1</sub>), … , <italic>q</italic>(<italic>i<sub>t</sub></italic><sub>(<italic>i</italic></sub><sub>)</sub>))</td>
<td>vector of geographic points of block <italic>c</italic><sub>i</sub> for <italic>i</italic> = 1, … , <italic>n</italic></td>
</tr>
<tr>
<td><italic>q</italic>(<italic>i</italic><sub>1</sub>) and <italic>q</italic>(<italic>i<sub>t</sub></italic><sub>(</sub><italic><sub>i</sub></italic><sub>)</sub>)</td>
<td>intersection corners</td>
</tr>
<tr>
<td><italic>q</italic>(<italic>i</italic><sub>2</sub>),…,<italic>q</italic>(<italic>i<sub>t</sub></italic><sub>(</sub><italic><sub>i</sub></italic><sub>)−1</sub>)</td>
<td>container locations in the block</td>
</tr>
<tr>
<td><italic>Q<sub>i</sub></italic> = {q(<italic>i</italic><sub>1</sub>), … , <italic>q</italic>(<italic>i<sub>t</sub></italic><sub>(<italic>i</italic>)</sub>)}</td>
<td>set of points in block <italic>c<sub>i</sub></italic> (the vector <italic>p<sub>i</sub></italic> considered as a set)</td>
</tr>
<tr>
<td><italic>M<sub>i</sub></italic></td>
<td>set of permitted traffic directions for the block <italic>c<sub>i</sub></italic></td>
</tr>
<tr>
<td><italic>V<sub>i</sub></italic> = {<italic>c<sub>i</sub></italic>} × <italic>Q<sub>i</sub></italic> × <italic>M<sub>i</sub></italic></td>
<td>set of graph nodes for the block <italic>c<sub>i</sub></italic></td>
</tr>
<tr>
<td><italic>V</italic> = <italic>U<sub>i</sub></italic><sub> = 1</sub><italic><sup>n</sup> V<sub>i</sub></italic></td>
<td>set of nodes of graph G</td>
</tr>
<tr>
<td><italic>R</italic></td>
<td>set of exit points of blocks with traffic signals</td>
</tr>
<tr>
<td><italic>A</italic> = {(<italic>v</italic><sub>1</sub>, <italic>v</italic><sub>2</sub>) ∈ <italic>V</italic> × <italic>V</italic>: <italic>v</italic><sub>1</sub> and <italic>v</italic><sub>2</sub> are consecutive, or a turn is permitted from <italic>v</italic><sub>1</sub> to <italic>v</italic><sub>2</sub>}</td>
<td>set of arcs of graph G</td>
</tr>
<tr>
<td><italic>G</italic><sub>1</sub> = (<italic>V</italic><sub>1</sub>, <italic>A</italic><sub>1</sub>)</td>
<td>weighted digraph representing the city, the EHU and the transfer station</td>
</tr>
<tr>
<td><italic>w</italic><sub>1</sub>: <italic>A</italic><sub>1</sub> → <bold>R</bold></td>
<td>distance function associated to the arcs of G<sub>1</sub> (in m)</td>
</tr>
<tr>
<td><italic>G</italic><sub>2</sub> = (<italic>V</italic><sub>2</sub>, <italic>A</italic><sub>2</sub>), <italic>V</italic><sub>2</sub> = <italic>V</italic><sub>1</sub>, <italic>A</italic><sub>2</sub> = V<sub>2</sub> × V<sub>2</sub></td>
<td>complete weighted digraph defining an instance of Hamiltonian circuit</td>
</tr>
<tr>
<td><italic>w</italic><sub>2</sub>: <italic>A</italic><sub>2</sub> → <bold>R</bold> ∪ {+∞}</td>
<td>weight function for G<sub>2</sub></td>
</tr>
<tr>
<td><italic>G</italic><sub>3</sub> = (<italic>V</italic><sub>3</sub>, <italic>A</italic><sub>3</sub>), <italic>V</italic><sub>3</sub> = <italic>V</italic><sub>2</sub> ∪ <italic>F</italic> and <italic>A</italic><sub>3</sub> = <italic>V</italic><sub>3</sub> × <italic>V</italic><sub>3</sub></td>
<td>complete weighted non-directed graph defining an instance of Hamiltonian circuit</td>
</tr>
<tr>
<td><italic>V</italic><sub>2</sub> = {<italic>v</italic><sub>1</sub>,…,<italic>v<sub>p</sub></italic>}, <italic>F</italic> = {<italic>f</italic><sub>1</sub>,…,<italic>f<sub>p</sub></italic>}</td>
<td>node <italic>f<sub>i</sub></italic> is the fictitious node associated with <italic>v<sub>i</sub></italic></td>
</tr>
<tr>
<td><italic>M</italic></td>
<td>large number (greater than the sum of all the finite weights in G<sub>2</sub>)</td>
</tr>
<tr>
<td><italic>w</italic><sub>3</sub>: A<sub>3</sub> → <bold>R</bold> ∪ {+∞}</td>
<td>weight function for G<sub>3</sub></td>
</tr>
</tbody>
</table>
</table-wrap>
<p>The traffic signal data contain a point indicating the approximate location of each traffic light. If two streets intersect at point <italic>p</italic> and the intersection thus formed has a traffic signal, there will also be a point in the database near <italic>p</italic> representing it. Since the presence of traffic signals is an important factor in determining possible routes, the optimization process must be able to find these locations. The process does this for a given intersection by searching for a point in the database whose distance from the intersection is less than a certain value <italic>D</italic>. After testing with various values it was found that traffic lights were correctly detected by setting <italic>D</italic> = 3.5 m.</p>
<sec id="section3-0734242X11402870">
<title>Construction of the graph and calculation of travel distances</title>
<p>In what follows, a natural representation of the city map is described as a graph that allows vehicle distances travelled to be calculated. As the calculations must take into account the city blocks’ traffic directions, a digraph (a graph in which the arcs are directed) is employed. The nodes in the digraph represent the ends of each block and the container locations, which for the present purposes are the significant vehicle positions.</p>
<p>If a vehicle is at an intersection, the two possible blocks it may be in (in one or the other of the two streets) are identified on the map as different positions. In a two-way street the position will depend on which side of the street it is on. Thus, vehicle position is defined in terms of the street and block number, the traffic direction and the exact position within the block. For example, a position might be specified as 700-block Rivadavia, even number side, 20 m from the start or end of the block. Two nodes representing two positions have a directed arc joining them if a vehicle can travel directly from one node to the other. This means that a path in the graph represents a valid travel segment for a vehicle. The weight of an arc is the distance in metres between the positions representing its node ends.</p>
<p>An intersection of two two-way streets will have eight positions, one for each direction of each the four blocks touching the intersection. If there are no prohibited turns, these points will connect and a vehicle can turn in either direction. However, Buenos Aires traffic regulations forbid left turns at intersections with a traffic light. This case is illustrated in <xref ref-type="fig" rid="fig2-0734242X11402870">Figure 2</xref>, indicating the permitted turns for a vehicle in Rivadavia Avenue arriving at Boyacá St. Note that the eight points in the figure are the eight positions of the intersection; what varies is the block and/or traffic direction.</p>
<fig id="fig2-0734242X11402870" position="float">
<label>Figure 2.</label>
<caption>
<p>Turn arcs, Rivadavia Av. at Boyacá St. with traffic signal.</p>
</caption>
<graphic xlink:href="10.1177_0734242X11402870-fig2.tif"/>
</fig>
<p>We now formally define a digraph <italic>G</italic> = (<italic>V</italic>, <italic>A</italic>) that models the valid travel segments. Let <italic>C</italic> = {<italic>c</italic><sub>1</sub> = (<italic>s</italic><sub>1</sub>, <italic>p</italic><sub>1</sub>), … , <italic>c<sub>n</sub></italic> = (<italic>s<sub>n</sub></italic>, <italic>p<sub>n</sub></italic>)} be the set of city blocks where <italic>s<sub>i</sub></italic> ∈ {increasing, decreasing, two-way} and <italic>p<sub>i</sub></italic> = (<italic>q</italic>(<italic>i</italic><sub>1</sub>), … , <italic>q</italic>(<italic>i<sub>t</sub></italic><sub>(</sub><italic><sub>i</sub></italic><sub>)</sub>)) is the vector of geographic points of block <italic>c<sub>i</sub></italic> for <italic>i</italic> = 1, … , <italic>n</italic>. Points <italic>q</italic>(<italic>i</italic><sub>1</sub>) and <italic>q</italic>(<italic>i<sub>t</sub></italic><sub>(</sub><italic><sub>i</sub></italic><sub>)</sub>) are the intersection corners and points <italic>q</italic>(<italic>i</italic><sub>2</sub>), … , <italic>q</italic>(<italic>i<sub>t</sub></italic><sub>(</sub><italic>
<sub>i</sub></italic><sub>)−1</sub>) indicate the container locations in the block. The points for each block are ordered in the direction of increasing block numbers. If the direction is increasing a vehicle can travel from <italic>q</italic>(<italic>i</italic><sub>1</sub>) to <italic>q</italic>(<italic>i</italic><sub>2</sub>), from <italic>q</italic>(<italic>i</italic><sub>2</sub>) to <italic>q</italic>(<italic>i</italic><sub>3</sub>) and so on to <italic>q</italic>(<italic>i<sub>t</sub></italic><sub>(</sub><italic><sub>i</sub></italic><sub>)</sub>). In the decreasing direction it can travel from <italic>q</italic>(<italic>i<sub>t</sub></italic><sub>(</sub><italic><sub>i</sub></italic><sub>)</sub>) to <italic>q</italic>(<italic>i<sub>t</sub></italic><sub>(</sub><italic><sub>i</sub></italic><sub>)−1</sub>), from <italic>q</italic>(<italic>i<sub>t</sub></italic><sub>(</sub><italic><sub>i</sub></italic><sub>)−1</sub>) to <italic>q</italic>(<italic>i<sub>t</sub></italic><sub>(</sub><italic><sub>i</sub></italic><sub>)−2</sub>) and so on to <italic>q</italic>(<italic>i</italic><sub>1</sub>). On a two-way street the vehicle can travel in either direction.</p>
<p>Now let <italic>Q<sub>i</sub></italic> = {<italic>q</italic>(<italic>i</italic><sub>1</sub>), … , <italic>q</italic>(<italic>i<sub>t</sub></italic><sub>(</sub><italic><sub>i</sub></italic><sub>)</sub>)} be the set of points in block <italic>c<sub>i</sub></italic> (i.e. the vector <italic>p<sub>i</sub></italic> considered as a set) and define <italic>M<sub>i</sub></italic> is the permitted traffic direction for block <italic>c<sub>i</sub></italic> as follows: <italic>M<sub>i</sub></italic> = {<italic>increasing</italic>} if <italic>s<sub>i</sub></italic> = <italic>increasing</italic>; <italic>M<sub>i</sub></italic> = {<italic>decreasing</italic>} if <italic>s<sub>i</sub></italic> = <italic>decreasing</italic>; <italic>M<sub>i</sub></italic> = {<italic>increasing</italic>, <italic>decreasing</italic>} if <italic>s<sub>i</sub></italic> = <italic>two-way</italic>.</p><p>For each block <italic>c<sub>i</sub></italic> the set of graph nodes is <italic>V<sub>i</sub></italic> = {<italic>c</italic><sub>i</sub>} × <italic>Q<sub>i</sub></italic> × <italic>M<sub>i</sub></italic>. The nodes are given by the various significant vehicle positions in the block as a function of the geographical points and the block traffic directions. In <italic>G</italic> the set of nodes is <italic>V</italic> = <italic>U<sub>i</sub></italic><sub> = 1</sub><italic><sup>n</sup> V<sub>i</sub></italic>.</p>
<p>Two nodes (<italic>c<sub>i</sub>, q</italic>(<italic>i<sub>k</sub></italic>), <italic>m</italic>) and (<italic>c<sub>j</sub></italic>, <italic>q</italic>(<italic>j<sub>l</sub></italic>), <italic>m</italic>′) are said to be <italic>consecutive</italic> if and only if <italic>i</italic> = <italic>j</italic>, <italic>m</italic> = <italic>m</italic>′; <italic>m</italic> = <italic>increasing</italic> ⇒ <italic>l</italic> = <italic>k</italic> + 1 and <italic>m</italic> = <italic>decreasing</italic> ⇒ <italic>l</italic> = <italic>k</italic> − 1. Also, a node (<italic>c<sub>i</sub></italic>, <italic>q</italic>(<italic>i<sub>k</sub></italic>), <italic>m</italic>) ∈ <italic>V</italic> is said to be an <italic>exit end</italic> of block <italic>c<sub>i</sub></italic> = (<italic>s<sub>i</sub></italic>, <italic>p<sub>i</sub></italic>) with <italic>p<sub>i</sub></italic> = (<italic>q</italic>(<italic>i</italic><sub>1</sub>), … , <italic>q</italic>(<italic>i<sub>t</sub></italic><sub>(i)</sub>)) if and only if <italic>m</italic> = <italic>increasing</italic> ⇒ <italic>k</italic> = <italic>t</italic>(<italic>i</italic>) and <italic>m</italic> = <italic>decreasing</italic> ⇒ <italic>k</italic> = 1. Finally, a node (<italic>c<sub>i</sub></italic>, <italic>q</italic>(<italic>i<sub>k</sub></italic>), <italic>m</italic>) ∈ <italic>V</italic> is an <italic>entry point</italic> of block <italic>c<sub>i</sub></italic> if it is a corner and not an exit end.</p>
<p>Given the nodes <italic>v</italic><sub>1</sub> = (<italic>c<sub>i</sub></italic>, <italic>q</italic>(<italic>i<sub>k</sub></italic>), <italic>m</italic>) ∈ <italic>V</italic> and <italic>v</italic><sub>2</sub> = (<italic>c<sub>j</sub></italic>, <italic>q</italic>(<italic>j<sub>l</sub></italic>), <italic>m</italic>′) ∈ <italic>V</italic>, a <italic>turn</italic> is said to exist from <italic>v</italic><sub>1</sub> to <italic>v</italic><sub>2</sub> if <italic>q</italic>(<italic>i<sub>k</sub></italic>) = <italic>q</italic>(<italic>j<sub>l</sub></italic>), <italic>v</italic><sub>1</sub> is an exit end of <italic>c<sub>i</sub></italic> and <italic>v</italic><sub>2</sub> is an entry point to <italic>c<sub>j</sub></italic>. To define the angle of the turn, the process begins by letting <italic>v</italic><sub>1</sub>′ = (<italic>c<sub>i</sub></italic>, <italic>q</italic>(<italic>i<sub>x</sub></italic>), <italic>m</italic>) ∈ <italic>V</italic> and <italic>v</italic><sub>2</sub>′ = (<italic>c<sub>j</sub></italic>, <italic>q</italic>(<italic>j<sub>y</sub></italic>), <italic>m</italic>′) ∈ <italic>V</italic> such that <italic>v</italic><sub>1</sub>′ and <italic>v</italic><sub>1</sub> are consecutive and <italic>v</italic><sub>2</sub> and <italic>v</italic><sub>2</sub>′ are also consecutive. The <italic>turn angle</italic> is then the angle between the half-line with origin <italic>q</italic>(<italic>i<sub>k</sub></italic>) and direction <italic>q</italic>(<italic>i<sub>x</sub></italic>) to <italic>q</italic>(<italic>i<sub>k</sub></italic>) and the half-line with origin <italic>q</italic>(<italic>i<sub>k</sub></italic>) passing through <italic>q</italic>(<italic>j<sub>y</sub></italic>). The angle is considered to range over the interval (−π, π) so that left turns are positive angles and right turns are negative ones.</p>
<p>To constrain arcs representing prohibited turns, <italic>R</italic> is first defined as the set of exit points of blocks with traffic signals. Given two nodes <italic>v</italic><sub>1</sub> = (<italic>c<sub>i</sub></italic>, <italic>q</italic>(<italic>i<sub>k</sub></italic>), <italic>m</italic>) ∈ <italic>V</italic> and <italic>v</italic><sub>2</sub> = (<italic>c<sub>j</sub></italic>, <italic>q</italic>(<italic>j<sub>l</sub></italic>), <italic>m</italic>′) ∈ <italic>V</italic>, there is a <italic>prohibited turn</italic> from <italic>v</italic><sub>1</sub> to <italic>v</italic><sub>2</sub> if a turn from <italic>v</italic><sub>1</sub> to <italic>v</italic><sub>2</sub> is physically possible, <italic>q</italic>(<italic>i<sub>k</sub></italic>) ∈ <italic>R</italic> and the turn angle is greater than π/4. Given two nodes <italic>v</italic><sub>1</sub> ∈ <italic>V</italic> and <italic>v</italic><sub>2</sub> ∈ <italic>V</italic>, there is a <italic>permitted turn</italic> from <italic>v</italic><sub>1</sub> to <italic>v</italic><sub>2</sub> if a turn from <italic>v</italic><sub>1</sub> to <italic>v</italic><sub>2</sub> is physically possible and there is no prohibited turn from <italic>v</italic><sub>1</sub> to <italic>v</italic><sub>2</sub>.</p>
<p>The arcs are now defined as the paths between two nodes such that either the second node is consecutive to the first one within the same block, or the turn from the first node to the second one is permitted, that is, <italic>A</italic> = {(<italic>v</italic><sub>1</sub>, <italic>v</italic><sub>2</sub>) ∈ <italic>V</italic> × <italic>V</italic>: <italic>v</italic><sub>1</sub> and <italic>v</italic><sub>2</sub> are consecutive, or a turn is permitted from <italic>v</italic><sub>1</sub> to <italic>v</italic><sub>2</sub>}.</p>
<p>As the arcs indicate all permitted movements by a vehicle, applying a shortest path algorithm to the graph will generate a shortest valid trip that can be taken from one position to another within the city.</p>
</sec>
<sec id="section4-0734242X11402870">
<title>Location of containers</title>
<p>Included in the databases supplied by the city were four lists of current container locations, one for each sub-zone. The locations are listed in the order in which they are currently serviced by the collection vehicles and are indicated in <xref ref-type="fig" rid="fig3-0734242X11402870">Figure 3</xref>.</p>
<fig id="fig3-0734242X11402870" position="float">
<label>Figure 3.</label>
<caption>
<p>Current container locations by sub-zone. Scale 1 : 40 000 (1 cm = 400 m).</p>
</caption>
<graphic xlink:href="10.1177_0734242X11402870-fig3.tif"/>
</fig>
<p>With this information, the length of the current routes can be calculated in order to compare them with the results obtained from this optimization method. Even if it is not known whether the path taken between any given consecutive pair of containers is the shortest possible one, it is assumed to be so and then lower bounds for the corresponding values of distance and work can be calculated. Analogously, it can be also assumed that the paths between the EHU and the first container, the last container and the transfer station, and the transfer station and the EHU are also the shortest possible ones.</p>
<p>The locations indicated on the container lists were not fully standardized. Various locations were specified in terms of some nearby institution instead of a map reference and in other cases multiple variations of the same street name were used. These defects had to be rectified manually in the database before the information could be processed.</p>
<p>The lists were thus corrected so that all the container locations were given either by street name and block number or by intersecting streets. Once this task was completed, each location was translated into a map position (<italic>street and block number, traffic direction, point</italic>) in order to generate nodes representing the containers in the graph of the city.</p>
<p>In the case of a location denoted by street name and block number, the map position was defined by identifying the street and the block whose address interval [<italic>initial block address</italic>, <italic>final block address</italic>] contained that location. If the block was two way, the location was assigned either the traffic direction of increasing block numbers or the other direction, depending on whether the block address numbers were odd or even.</p>
<p>In the case of locations specified in terms of intersecting streets, the blocks at the intersection point were first identified. In the simplest instance there would be four such blocks, two in each street, of which one had to be chosen to define the container position. The criterion employed on the location lists is that the first street named is the one in which the container is actually found. Its precise position would then be in the block before the intersecting street, considering the vehicle circulation direction. If the first-named street is two way, the side of the street in which the container is located was defined arbitrarily.</p>
<p>As with any database of real-world phenomena, some of the map data were incorrect. The traffic directions for many of the streets in the four collection zones were verified, particularly those figuring in the optimal routes generated by the optimization process. This was done simply by comparing the data with other digital maps and aerial photos so that the database directions could be validated. These manual corrections helped ensure the map information actually used was as accurate as possible.</p>
</sec>
</sec>
<sec id="section5-0734242X11402870">
<title>Solution strategy</title>
<p>As the first objective of the optimization process was to minimize the distance travelled by each vehicle, the most natural option was to transform the vehicle route design problem into a travelling salesman problem (TSP). The TSP consists in finding the shortest Hamiltonian circuit (a trail that visits each node of a graph or digraph exactly once and returns to the starting node). In terms of computational complexity, the problem is NP-hard (<xref ref-type="bibr" rid="bibr6-0734242X11402870">Garey and Johnson, 1979</xref>); that is, there is no known polynomial–time algorithm to solve it.</p>
<p>The second objective was to reduce the total work done by the vehicles as an approximation of wear and tear. Since the type of graph used here generally has multiple optimal solutions for the TSP, the strategy adopted was to find a set of optimal solutions <italic>–</italic> about 200 for each instance proved to be a suitable number as regards run times and solution quality <italic>–</italic> and then select the one with the lowest work value. For this approach to succeed, the implementation had to be able to solve the TSP to optimality and in a non-deterministic way. The <italic>Concorde</italic> solver program (<xref ref-type="bibr" rid="bibr1-0734242X11402870">Applegate et al., 2006</xref>) was chosen for the purpose.</p>
<p>The remainder of this section will describe the generation of the graph and the TSP solution. The first sub-section discusses the construction of an instance of the shortest Hamiltonian path problem between two given nodes that models the present problem; The second sub-section derives the shortest vehicle paths between each pair of nodes in the digraph containing the containers, the EHU and the transfer station; and the following sub-section explains the use of the <italic>Concorde</italic> software for solving the TSP on non-directed graphs. The problem must first be transformed into a symmetric TSP, however and this process is the subject of the fourth and fifth sub-sections. The final sub-section briefly outlines the implementation of a software tool that carries out map-processing tasks, calculates optimal routes and displays the results. For the notation used in this section, see <xref ref-type="table" rid="table1-0734242X11402870">Table 1</xref>.</p>
<sec id="section6-0734242X11402870">
<title>Construction of Hamiltonian path instance</title>
<p>To model the waste vehicle problem a weighted digraph is constructed in which the containers are represented by nodes. The weight of an arc from node <italic>A</italic> to node <italic>B</italic> is defined as the distance of the shortest vehicle path from container <italic>A</italic> to container <italic>B</italic> (see the next sub-section). The digraph also contains the EHU and the transfer station. An arc is added from the EHU to each container and from each container to the transfer station. The weights of these arcs are also defined as the distance of the shortest path from one element to another. The digraph is denoted <italic>G</italic><sub>1</sub> = (<italic>V</italic><sub>1</sub>, <italic>A</italic><sub>1</sub>) and <italic>w</italic><sub>1</sub>: <italic>A</italic><sub>1</sub> → <bold>R</bold> is the distance function that associates each arc with its corresponding path distance. An example of such a digraph is depicted in <xref ref-type="fig" rid="fig4-0734242X11402870">Figure 4</xref>.</p>
<fig id="fig4-0734242X11402870" position="float">
<label>Figure 4.</label>
<caption>
<p><italic>G</italic><sub>1</sub>. Example of a graph including the <italic>Ente de Higiene Urbano</italic> (EHU), five containers C1, … , C5 and the transfer station.</p>
</caption>
<graphic xlink:href="10.1177_0734242X11402870-fig4.tif"/>
</fig>
<p>An attempt is then made to find a shortest Hamiltonian path in the digraph that starts from the node representing the EHU, visits all the container nodes and ends at the transfer station node.</p>
</sec>
<sec id="section7-0734242X11402870">
<title>Shortest path algorithm</title>
<p>Once the digraph associated with the city map has been defined, <italic>A</italic>
<sup>*</sup> (<xref ref-type="bibr" rid="bibr8-0734242X11402870">Hart et al., 1968</xref>), a variant of Dijkstra’s Algorithm (<xref ref-type="bibr" rid="bibr4-0734242X11402870">Dijkstra, 1959</xref>), is applied to obtain a shortest vehicle path between each pair of nodes in the digraph containing the containers, the EHU and the transfer station. The problem with the original Dijkstra’s algorithm is that during execution, the set of nodes waiting to be analysed expands into a shape similar to a rhombus with the origin point as its centre. This means that the greater the distance between the nodes to be analysed, the less efficient will be the algorithm. For example, to calculate a shortest path between two points that turns out to be 10 km, Dijkstra’s algorithm will calculate the shortest paths to all points located at a distance less than 10 km from the origin. For the city digraph utilised herein the execution of this calculation, in a SmallTalk implementation on a machine with an Intel Dual Core 1.60 GHz processor, took more than 1 h.</p>
<p>The <italic>A</italic>
<sup>*</sup> variant sidesteps this problem by using a different method of choosing the next node to be analysed. Instead of just considering the distance from the origin, the heuristic also takes into account the distance to the destination. To ensure the method functions properly it exploits the property that the path distance is always greater than or equal to the Euclidean distance between the two points. Thus, at an intermediate point on the path to which the shortest path has already been calculated, the algorithm deduces that the distance of the shortest path from the origin to the destination is greater than or equal to the sum of the path distance from the origin to the intermediate point plus the Euclidean distance.</p>
<p>The suitability of <italic>A</italic>
<sup>*</sup> for the present application is clearly demonstrated by the fact that when this variant was used to calculate the 10 km example given above on the same computer, execution time fell drastically from more than 60 min to a mere 280 ms.</p>
</sec>
<sec id="section8-0734242X11402870">
<title>Application of the Concorde solver</title>
<p><italic>Concorde</italic> is a computer program written by David Applegate, Robert Bixby, Vašek Chvátal and William Cook at the Georgia Institute of Technology in the United States. It generates exact solutions for instances of the TSP using integer linear programming in conjunction with an LP solver such as <italic>QSOpt</italic>, an open source package developed by the same authors. According to its developers, <italic>Concorde</italic> can solve instances of up to 1000 elements efficiently (<xref ref-type="bibr" rid="bibr1-0734242X11402870">Applegate et al., 2006</xref>). One instance of the present problem with 98 nodes was solved by <italic>Concorde</italic> in 0.4 s and another containing 326 nodes was solved in 2 s. The program was run on a computer with an Intel Dual Core 1.60 GHz processor.</p>
<p>The program can also solve the TSP using the chained Lin–Kernighan (<xref ref-type="bibr" rid="bibr14-0734242X11402870">Martin et al., 1996</xref>) heuristic, which is very efficient and provides optimal or near-optimal results for small 1 s, an execution time similar to that for the exact algorithm. Finally, since <italic>Concorde</italic> relies on randomness, the optimal solutions it generates will be different each time it is run.</p>
</sec>
<sec id="section9-0734242X11402870">
<title>Transformation of a Hamiltonian directed path into a Hamiltonian non-directed circuit</title>
<p>In the sub-section above entitled ‘Construction of Hamiltonian path instance’ the problem was modelled as a shortest directed Hamiltonian path problem. <italic>Concorde</italic>, however, solves the TSP, which consists in finding a shortest non-directed Hamiltonian circuit, and takes as input the distance matrix of a complete graph. To solve the problem, the directed Hamiltonian path model is translated into a non-directed Hamiltonian circuit model. This will be done in two steps: first, the directed path is transformed into a directed circuit, and second, the directed circuit is transformed into a non-directed one.</p>
<p>The process begins by calculating a shortest directed Hamiltonian path as a function of a shorter directed Hamiltonian circuit. In that circuit the EHU node must be located after the transfer station node. In other words, starting from the EHU node the circuit has to pass through all of the container nodes and then the transfer station node before returning to the EHU node. Since the digraph must be complete, <italic>G</italic><sub>2</sub> = (<italic>V</italic><sub>2</sub>, <italic>A</italic><sub>2</sub>) is built from <italic>G</italic><sub>1</sub> setting <italic>V</italic><sub>2</sub> = <italic>V</italic><sub>1</sub> and <italic>A</italic><sub>2</sub> = <italic>V</italic><sub>2</sub> × <italic>V</italic><sub>2</sub>. A weight function <italic>w</italic><sub>2</sub>: <italic>A</italic><sub>2</sub> → <bold>R</bold> ∪ {+∞} is defined as follows: <italic>w</italic><sub>2</sub>((<italic>v</italic><sub>1</sub>, <italic>v</italic><sub>2</sub>)) = <italic>w</italic><sub>1</sub>((<italic>v</italic><sub>1</sub>, <italic>v</italic><sub>2</sub>)) if (<italic>v</italic><sub>1</sub>, <italic>v</italic><sub>2</sub>) ∈ A<sub>1</sub>; <italic>w</italic><sub>2</sub>((<italic>v</italic><sub>1</sub>, <italic>v</italic><sub>2</sub>)) = +∞ if (<italic>v</italic><sub>1</sub>, <italic>v</italic><sub>2</sub>) ∉ A<sub>1</sub>, unless <italic>v</italic><sub>1</sub> = Transfer Station and <italic>v</italic><sub>2</sub> = EHU. In that last case, <italic>w</italic><sub>2</sub>((<italic>v</italic><sub>1</sub>, <italic>v</italic><sub>2</sub>)) = 0.</p>
<p>Thus, if there is no arc between any two nodes in <italic>G</italic><sub>1</sub>, an arc of infinite or zero weight is added to <italic>G</italic><sub>2</sub> thereby making <italic>G</italic><sub>2</sub> complete. Every Hamiltonian path in <italic>G</italic><sub>1</sub> that starts at the EHU node and ends at the transfer station node will therefore generate a Hamiltonian circuit in <italic>G</italic><sub>2</sub> of finite distance, and vice versa.</p>
</sec>
<sec id="section10-0734242X11402870">
<title>Transformation of a digraph into a non-directed graph</title>
<p>The second step is to reduce the problem of finding a shortest Hamiltonian circuit in a digraph to one of identifying a shortest Hamiltonian circuit in a non-directed graph (<xref ref-type="bibr" rid="bibr10-0734242X11402870">Kumar and Li, 1996</xref>). The graph <italic>G</italic><sub>3</sub> = (<italic>V</italic><sub>3</sub>, <italic>A</italic><sub>3</sub>) is defined with a <italic>fictitious</italic> node and a real node for each node in <italic>G</italic><sub>2</sub>. In formal terms, it is assumed that <italic>V</italic><sub>2</sub> = {<italic>v</italic><sub>1</sub>, … , <italic>v<sub>p</sub></italic>} and let <italic>F</italic> = {<italic>f</italic><sub>1</sub>, … , <italic>f<sub>p</sub></italic>} so that node <italic>f<sub>i</sub></italic> is the fictitious node associated with <italic>v<sub>i</sub></italic>. Next, <italic>V</italic><sub>3</sub> = <italic>V</italic><sub>2</sub> ∪ <italic>F</italic> and <italic>A</italic><sub>3</sub> = <italic>V</italic><sub>3</sub> × <italic>V</italic><sub>3</sub> are defined. Let <italic>M</italic> be a sufficiently large number and let the weight function associated with the edges be <italic>w</italic><sub>3</sub>: <italic>A</italic><sub>3</sub> → <bold>R</bold> ∪ {+∞}, as follows: <italic>w</italic><sub>3</sub>((<italic>x</italic>, <italic>y</italic>)) = +∞ if <italic>x</italic> ∈ <italic>V</italic> and <italic>y</italic> ∈ <italic>V</italic>; <italic>w</italic><sub>3</sub>((<italic>x</italic>, <italic>y</italic>)) = +∞ if <italic>x</italic> ∈ <italic>F</italic> and <italic>y</italic> ∈ <italic>F</italic>; w<sub>3</sub>((<italic>x</italic>, <italic>y</italic>)) = −<italic>M</italic> if <italic>x</italic> = <italic>v<sub>i</sub></italic> and <italic>y</italic> = <italic>f<sub>i</sub></italic>, for some <italic>i</italic>; w<sub>3</sub>((<italic>x</italic>, <italic>y</italic>)) = <italic>w</italic><sub>2</sub>(<italic>v<sub>i</sub></italic>, <italic>v<sub>j</sub></italic>) if <italic>x</italic> = <italic>v<sub>i</sub></italic> and <italic>y</italic> = <italic>f<sub>j</sub></italic> and <italic>i</italic> ≠ <italic>j</italic>, for some <italic>i</italic>.</p>
<p><xref ref-type="fig" rid="fig5-0734242X11402870">Figure 5</xref> presents an example of the definition of a non-directed graph <italic>G</italic><sub>3</sub> based on a digraph <italic>G</italic><sub>2</sub> with <italic>M</italic> = 10 000. <italic>G</italic><sub>3</sub> has three real nodes and three fictitious nodes. The edges between the real nodes have a value of +∞, which implies they will not be used by the shortest paths. The same holds for the edges between the fictitious nodes. A shortest path in this graph will always alternate between fictitious and real nodes. Moreover, since the edges between a real node and its corresponding fictitious one have a value of −<italic>M</italic>, the shortest paths will always use them. Since a shortest path will not contain arcs with infinite weight but will contain those with a negative weight, a real node will always be followed in a shortest path by its fictitious one.</p>
<fig id="fig5-0734242X11402870" position="float">
<label>Figure 5.</label>
<caption>
<p>Model digraph G<sub>2</sub> with a non-directed graph G<sub>3</sub>. Example of the transformation defined in Section entitled ‘Transformation of a Hamiltonian directed path into a Hamiltonian non-directed circuit’.</p>
</caption>
<graphic xlink:href="10.1177_0734242X11402870-fig5.tif"/>
</fig>
<p>The weight of the edges between a real node <italic>v</italic><sub>i</sub> and a fictitious one <italic>f<sub>j</sub></italic> with <italic>i</italic> ≠ <italic>j</italic> is the weight of the arc between <italic>v<sub>i</sub></italic> and <italic>v<sub>j</sub></italic> in <italic>G</italic><sub>2</sub>. This implies that the set of edges incident to the real node <italic>v<sub>i</sub></italic> in <italic>G</italic><sub>3</sub> represents the exit arcs incident to <italic>v<sub>i</sub></italic> in <italic>G</italic><sub>2</sub>. Reciprocally, the set of edges incident to the fictitious node <italic>f<sub>j</sub></italic> in <italic>G</italic><sub>3</sub> represents the entry arcs incident to <italic>v<sub>j</sub></italic> in <italic>G</italic><sub>2</sub>. Thus, a path (<italic>f<sub>i</sub></italic><sub>1</sub>, <italic>v<sub>i</sub></italic><sub>1</sub>, <italic>f<sub>i</sub></italic><sub>2</sub>, <italic>v<sub>i</sub></italic><sub>2</sub>, … , <italic>f<sub>ik</sub></italic>, <italic>v<sub>ik</sub></italic>) in <italic>G</italic><sub>3</sub> is interpreted as a path (<italic>v<sub>i</sub></italic><sub>1</sub>, <italic>v<sub>i</sub></italic><sub>2</sub>, … , <italic>v<sub>ik</sub></italic>) in <italic>G</italic><sub>2</sub>. An example of the foregoing is given in <xref ref-type="fig" rid="fig6-0734242X11402870">Figure 6</xref>.</p>
<fig id="fig6-0734242X11402870" position="float">
<label>Figure 6.</label>
<caption>
<p>Cycle in the non-directed graph G<sub>3</sub> given by the transformation defined in Section entitled ‘Transformation of a Hamiltonian directed path into a Hamiltonian non-directed circuit’. Length of the black path with fictitious arcs (arcs with one endpoint white and the other black): −3<italic>M</italic> + 11; length of the black path without fictitious arcs: 11.</p>
</caption>
<graphic xlink:href="10.1177_0734242X11402870-fig6.tif"/>
</fig>
<p>The procedures described in this section have passed from a digraph <italic>G</italic><sub>1</sub> for which the initial step was to calculate a shortest Hamiltonian path, to a complete digraph <italic>G</italic><sub>2</sub> whose shortest Hamiltonian circuit enabled the shortest Hamiltonian path in <italic>G</italic><sub>1</sub> to be calculated. Then, by calculating the shortest Hamiltonian circuit of a complete non-directed graph <italic>G</italic><sub>3</sub>, the shortest Hamiltonian circuit in <italic>G</italic><sub>2</sub> is easily obtained. In this manner the problem is reduced to the TSP in a complete non-directed graph and the <italic>Concorde</italic> package can now be applied to efficiently obtain a solution.</p>
</sec>
<sec id="section11-0734242X11402870">
<title>Description of the implementation</title>
<p>A program was designed in the <italic>SmallTalk</italic> programming language to execute the map processing tasks, calculate optimal routes and display the results. The <italic>VisualWorks NonCommercial, 7.4.1</italic> implementation, available for the <italic>Microsoft Windows XP/Vista</italic> and <italic>GNU-Linux</italic> operating systems, was employed for the job.</p>
<p>The <italic>VisualWorks</italic> system contains a set of objects, classes and methods that were used to model the city map, the digraph of the containers and the algorithms for calculating the shortest paths and routes. It also has interfaces with the map database in <italic>PostgreSQL</italic>, the <italic>Concorde</italic> solver and the <italic>Takenoko</italic> graphical display package. The graphical interface of the computer application is shown in <xref ref-type="fig" rid="fig7-0734242X11402870">Figure 7</xref>.</p>
<fig id="fig7-0734242X11402870" position="float">
<label>Figure 7.</label>
<caption>
<p>Graphical interface of the computer application. Scale 1 : 5000 (1 cm = 50 m).</p>
</caption>
<graphic xlink:href="10.1177_0734242X11402870-fig7.tif"/>
</fig>
<p>To process the information, calculate the shortest routes and display them the system performs the following tasks.</p>
<list id="list1-0734242X11402870" list-type="order">
<list-item><p>Read the database of the city map.</p></list-item>
<list-item><p>Store the locations of the containers on each current route.</p></list-item>
<list-item><p>Execute the following steps for each of the four sub-zones.
<list id="list2-0734242X11402870" list-type="alpha-lower">
<list-item><p>Calculate the shortest vehicle path between each pair of elements: EHU, containers and transfer station.</p></list-item>
<list-item><p>Calculate the distance and work done for each current route.</p></list-item>
<list-item><p>Construct digraph <italic>G</italic><sub>1</sub> using the distances between the elements.</p></list-item>
<list-item><p>Construct digraph <italic>G</italic><sub>2</sub> based on <italic>G</italic><sub>1</sub> as defined in sub-section entitled ‘Transformation of a Hamiltonian directed path into a Hamiltonian non-directed circuit’.</p></list-item>
<list-item><p>Construct complete graph <italic>G</italic><sub>3</sub> based on <italic>G</italic><sub>2</sub> as defined in the sub-section entitled ‘Transformation of a digraph into a non-directed graph’.</p></list-item>
<list-item><p>Execute <italic>Concorde</italic> with the <italic>G</italic><sub>3</sub> distance matrix.</p></list-item>
<list-item><p>Interpret the results to construct a shortest route.</p></list-item>
</list>
</p></list-item>
<list-item><p>Furthermore, for each route the system can perform the following tasks.
<list id="list3-0734242X11402870" list-type="alpha-lower">
<list-item><p>Calculate the distance.</p></list-item>
<list-item><p>Calculate the work done.</p></list-item>
<list-item><p>Generate a list indicating the order of the containers.</p></list-item>
<list-item><p>Generate a list of the blocks travelled by the vehicle.</p></list-item>
<list-item><p>Display an image of the map showing the route path.</p></list-item>
<list-item><p>Display an animation of the vehicle route on the map.</p></list-item>
</list>
</p></list-item>
</list>
</sec>
</sec>
<sec id="section12-0734242X11402870" sec-type="results|discussion">
<title>Results and discussion</title>
<p>In this section the results are reported for the four instances of the problem corresponding to the four sub-zones, which as noted have 47, 133, 134 and 161 containers, respectively. The distances and work done for the routes currently used by the EHU are then compared with those of the shortest routes generated by the optimizations. For calculation purposes it was assumed that each container has an average weight of 100 kg, as suggested by EHU personnel.</p>
<p>Multiple runs of <italic>Concorde</italic> were executed for each instance, generating multiple shortest paths due to the program’s use of randomness. The solutions with the lowest work values were retained as the definitive ones. The actual results are given in <xref ref-type="table" rid="table2-0734242X11402870">Table 2</xref>, showing for each sub-zone the distance (in m) and work (in J) for the current EHU route and the corresponding shortest route solution (only the least work results are displayed). As can be seen, the shortest routes improve significantly on the existing ones in both distance and work.</p>
<table-wrap id="table2-0734242X11402870" position="float">
<label>Table 2.</label>
<caption>
<p>Results for the four sub-zones</p>
</caption>
<graphic alternate-form-of="table2-0734242X11402870" xlink:href="10.1177_0734242X11402870-table2.tif"/>
<table>
<colgroup>
<col align="left"/>
<col align="char" char="."/>
<col align="char" char="."/>
<col align="char" char="."/>
<col align="char" char="."/>
<col align="char" char="."/>
<col align="char" char="."/>
<col align="char" char="."/>
</colgroup>
<thead>
<tr>
<th/>
<th/>
<th align="left" colspan="2">Current route</th>
<th align="left" colspan="2">Shortest route</th>
<th align="left" colspan="2">Percent improvement</th>
</tr>
<tr>
<th/>
<th align="left">Containers</th>
<th align="left">Distance (km)</th>
<th align="left">Work (J) (× 10<sup>9</sup>)</th>
<th align="left">Distance (km)</th>
<th align="left">Work (J) (× 10<sup>9</sup>)</th>
<th align="left">Distance</th>
<th align="left">Work</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>47</td>
<td>27.010</td>
<td>0.61</td>
<td>24.126</td>
<td>0.54</td>
<td>10.68%</td>
<td>11.43%</td>
</tr>
<tr>
<td>2</td>
<td>133</td>
<td>68.102</td>
<td>4.77</td>
<td>41.752</td>
<td>2.95</td>
<td>38.69%</td>
<td>38.07%</td>
</tr>
<tr>
<td>3</td>
<td>134</td>
<td>52.270</td>
<td>4.28</td>
<td>39.762</td>
<td>2.84</td>
<td>23.93%</td>
<td>33.64%</td>
</tr>
<tr>
<td>4</td>
<td>161</td>
<td>61.692</td>
<td>5.44</td>
<td>40.841</td>
<td>3.11</td>
<td>33.80%</td>
<td>42.79%</td>
</tr>
</tbody>
</table>
</table-wrap>
<p>More specifically, the results show a decrease in total distance per day of about 120 km (60 km per trip), which together with the lower amount of work done by the vehicles translates into an annual saving in fuel consumption of some US$20 000. Given the city authorities’ short-term goal of increasing the number of containers six-fold, an annual fuel cost reduction of approximately US$120 000 can be projected for the near future. The shorter distances also impact positively on vehicle maintenance and service lives. Based on the percentage decrease in work done, the drop in maintenance expense per vehicle can be estimated at US$3000, while the prorated annual cost reduction due to extended service lives would be about US$1500 per vehicle. Given that the number of vehicles should increase to 20 once all of the planned containers have been added, the estimated global annual savings due to the decrease in work expended is US$90 000. Together with the cut in fuel consumption, the City thus stands to save a total of more than US$200 000 per year.</p>
<p>Also evident from <xref ref-type="table" rid="table2-0734242X11402870">Table 2</xref> is a very large gap between the degrees of improvement in sub-zones 1 and 4 owing to their different levels of complexity. The containers in sub-zone 1 number less than one-third of those in sub-zone 4 and are distributed among only seven different streets. In such conditions, identifying a route approximating the shortest one is relatively intuitive. By contrast, sub-zone 4 includes a densely packed area of containers, rendering the intuitive approach quite impossible in practical terms. Not surprisingly, then, the shortest route found through optimization resulted in a large improvement of 33.64%.</p>
<p>To find optimal alternatives for each route, <italic>Concorde</italic>’s TSP algorithm, which uses randomness, was run 200 times. For the simplest sub-zone, four different optima were found with values for work of 5.50 × 10<sup>8</sup>, 5.39 × 10<sup>8</sup>, 5.38 × 10<sup>8</sup> and 5.51 × 10<sup>8</sup> J, respectively. For the other sub-zones, however, many optimal alternatives were generated. As an example, for sub-zone 2 there were 190 alternatives, meaning that only 10 solutions were repeats. Although all of the solutions cover the same distance, the varying order in which the containers are serviced means the amount of work done will differ. Thus, among the various minimum distance routes the one involving the least work was chosen. <xref ref-type="table" rid="table3-0734242X11402870">Table 3</xref> summarizes a number of characteristics for the optimal solutions of each sub-zone, indicating the minimum, maximum and average work as well as the standard deviation (which gives an idea of the variation between iterations) and the execution times.</p>
<table-wrap id="table3-0734242X11402870" position="float">
<label>Table 3.</label>
<caption>
<p>Selected characteristics of the 200 TSP iteration solutions. The execution time for the initial iteration includes the time consumed in calculating the minimum paths between each node pair. The execution time for the 200 iterations does not include the initial iteration time</p>
</caption>
<graphic alternate-form-of="table3-0734242X11402870" xlink:href="10.1177_0734242X11402870-table3.tif"/>
<table>
<colgroup>
<col align="left"/>
<col align="left"/>
<col align="char" char="."/>
<col align="char" char="."/>
<col align="char" char="."/>
<col align="char" char="."/>
</colgroup>
<thead>
<tr>
<th/>
<th align="left">Subzone</th>
<th align="left">1</th>
<th align="left">2</th>
<th align="left">3</th>
<th align="left">4</th>
</tr>
</thead>
<tbody>
<tr>
<td/>
<td>Containers</td>
<td>47</td>
<td>133</td>
<td>134</td>
<td>161</td>
</tr>
<tr>
<td/>
<td>Optima found</td>
<td>4</td>
<td>190</td>
<td>180</td>
<td>172</td>
</tr>
<tr>
<td>Work (J) (× 10<sup>9</sup>)</td>
<td>Actual</td>
<td>0.61</td>
<td>4.77</td>
<td>4.28</td>
<td>5.44</td>
</tr>
<tr>
<td/>
<td>Minimum</td>
<td>0.54</td>
<td>2.95</td>
<td>2.84</td>
<td>3.11</td>
</tr>
<tr>
<td/>
<td>Maximum</td>
<td>0.55</td>
<td>3.21</td>
<td>3.11</td>
<td>3.37</td>
</tr>
<tr>
<td/>
<td>Mean</td>
<td>0.54</td>
<td>3.13</td>
<td>2.93</td>
<td>3.21</td>
</tr>
<tr>
<td/>
<td>Standard deviation</td>
<td>0.01</td>
<td>0.96</td>
<td>0.86</td>
<td>0.68</td>
</tr>
<tr>
<td/>
<td>Percent improvement</td>
<td>11.43%</td>
<td>38.07%</td>
<td>33.64%</td>
<td>42.79%</td>
</tr>
<tr>
<td>Execution time</td>
<td>Initial iteration (min)</td>
<td>9.23</td>
<td>28.72</td>
<td>29.14</td>
<td>28.42</td>
</tr>
<tr>
<td/>
<td>200 iterations (min)</td>
<td>0.55</td>
<td>5.60</td>
<td>4.98</td>
<td>8.31</td>
</tr>
<tr>
<td/>
<td>Mean of iterations (s)</td>
<td>0.16</td>
<td>1.68</td>
<td>1.49</td>
<td>2.49</td>
</tr>
</tbody>
</table>
</table-wrap>
<p>In a given solution run, the greatest amount of time was devoted to the calculation of the shortest path between each pair of elements. For example, in sub-zone 4, the one with the most containers, the first TSP solution required 28 min, but once the shortest paths between the element pairs were computed, the remaining time to solution averaged just 2.49 s. If a container is added or moved, only 162 new paths would have to be calculated, which takes approximately 24 s; the exact time depends on the new container position. The time needed to calculate the shortest paths does not depend solely on the number of paths but also on their length. The more dispersed are the containers, the longer are the paths and, therefore, also the solution times.</p>
<p>These results justify the conclusion that the proposed optimization method for the waste collection problem was successful given the significant reductions obtained in both total distance and work done. If information on the traffic speeds in the streets were incorporated into the method, a similar improvement in route times could presumably be achieved.</p>
</sec>
<sec id="section13-0734242X11402870">
<title>Sensitivity analysis</title>
<p>In this section the impact of using more than one waste collection vehicle (presumably a smaller model) in each of the four original sub-zones is studied. To this end a new heuristic is implemented that divides these areas into smaller sub-zones and assigns a single vehicle to each one. For example, to divide sub-zone 2, which has 133 containers, into two new sub-zones of 67 and 66 containers, respectively, the heuristic would decide how to partition the containers between the sub-zones and then determine the corresponding values of distance and work.</p>
<p>In general terms, the heuristic assigns <italic>N</italic> vehicles to <italic>C</italic> containers via the following procedure. A TSP solution is first generated for all <italic>C</italic> containers. Then, based on the order specified by this solution, the container list is divided into two: the first <italic>C</italic>/<italic>N</italic> containers and the remaining ones. The first <italic>C</italic>/<italic>N</italic> containers constitute a new sub-zone and the original algorithm is executed on it to find the route of minimum work and distance. This procedure is repeated recursively with the remaining containers and <italic>N</italic> − 1 vehicles, thus creating additional new sub-zones. The base case for each iteration is the newly created sub-zone in which a single vehicle is used for the corresponding container list. The sub-zone’s optimal route is then calculated using the original algorithm.</p>
<p>This sub-zone partition heuristic was applied to each of the four original sub-zones. Since the shortest paths between all the pairs of containers for these sub-zones were already calculated the execution times were relatively short, ranging between 1 s and 7 min. To assign three vehicles to the original sub-zone 2 (133 containers), for example, the optimal route is first found to determine the ordered container list. The first third of the list is then used to define a new sub-zone and calculate its route of minimum distance and work. This procedure is repeated with the remaining containers and two vehicles to generate the second and third new sub-zones, and the best routes are calculated for each.</p>
<p>The effects of adding vehicles in this manner to the original sub-zones are shown in <xref ref-type="table" rid="table4-0734242X11402870">Table 4</xref>. In the case of sub-zone 1, as well as the original case of one vehicle serving all 47 containers values were also obtained for a partition into two sub-zones with 24 and 23 containers each. The table indicates the distance travelled and work expended in the new sub-zones and also gives the combined totals. As can be seen, the combined distance increased by 16 km over the single-vehicle solution. This was due to the fact that in addition to the distances covered to service the containers, this total includes the distances from the EHU to the respective sub-zones, from the sub-zones to the transfer station and from there back to the EHU. For each vehicle added these trip segments increase the total distance. The work done was decreased considerably, however, from 5.385 × 10<sup>8</sup> to 4.489 × 10<sup>8</sup> J. The reason for this drop is that each container emptied added to the total load carried, and therefore the work done, over the rest of the route. Thus, if the priority is to reduce the amount of work rather than total distance travelled, more vehicles should be added.</p>
<table-wrap id="table4-0734242X11402870" position="float">
<label>Table 4.</label>
<caption>
<p>Sensitivity analysis for the addition of vehicles in each sub-zone. The execution times refer to the 200 iterations and do not include the time consumed in calculating the minimum paths between node pairs, which are obtained previously</p>
</caption>
<graphic alternate-form-of="table4-0734242X11402870" xlink:href="10.1177_0734242X11402870-table4.tif"/>
<table>
<colgroup>
<col align="left"/>
<col align="char" char="."/>
<col align="char" char="."/>
<col align="char" char="."/>
<col align="char" char="."/>
<col align="char" char="."/>
<col align="char" char="."/>
</colgroup>
<thead>
<tr>
<th align="left">Subzone</th>
<th align="left">#Vehicles</th>
<th align="left">#Containers</th>
<th align="left">#Different Optima</th>
<th align="left">Distance (km)</th>
<th align="left">Work (J) (× 10<sup>8</sup>)</th>
<th align="left">Exec. time (s)</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>47</td>
<td>4</td>
<td>24.13</td>
<td>5.385</td>
<td>36.47</td>
</tr>
<tr>
<td/>
<td>2</td>
<td>24</td>
<td>2</td>
<td>20.10</td>
<td>2.295</td>
<td/>
</tr>
<tr>
<td/>
<td/>
<td>23</td>
<td>1</td>
<td>20.33</td>
<td>2.194</td>
<td/>
</tr>
<tr>
<td/>
<td/>
<td>Total</td>
<td/>
<td>40.43</td>
<td>4.489</td>
<td>37.88</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>133</td>
<td>190</td>
<td>41.75</td>
<td>29.47</td>
<td>383.40</td>
</tr>
<tr>
<td/>
<td>2</td>
<td>67</td>
<td>19</td>
<td>24.48</td>
<td>8.72</td>
<td/>
</tr>
<tr>
<td/>
<td/>
<td>66</td>
<td>4</td>
<td>32.26</td>
<td>10.89</td>
<td/>
</tr>
<tr>
<td/>
<td/>
<td>Total</td>
<td/>
<td>56.74</td>
<td>19.61</td>
<td>121.65</td>
</tr>
<tr>
<td/>
<td>3</td>
<td>45</td>
<td>22</td>
<td>20.04</td>
<td>4.81</td>
<td/>
</tr>
<tr>
<td/>
<td/>
<td>44</td>
<td>1</td>
<td>24.55</td>
<td>6.18</td>
<td/>
</tr>
<tr>
<td/>
<td/>
<td>44</td>
<td>4</td>
<td>28.07</td>
<td>4.97</td>
<td/>
</tr>
<tr>
<td/>
<td/>
<td>Total</td>
<td/>
<td>72.66</td>
<td>15.96</td>
<td>126.33</td>
</tr>
<tr>
<td/>
<td>30</td>
<td>Total</td>
<td/>
<td>489.43</td>
<td>9.05</td>
<td>103.32</td>
</tr>
<tr>
<td/>
<td>133</td>
<td>Total</td>
<td/>
<td>2067.79</td>
<td>8.33</td>
<td>1.04</td>
</tr>
<tr>
<td>3</td>
<td>1</td>
<td>134</td>
<td>180</td>
<td>39.76</td>
<td>28.41</td>
<td>391.47</td>
</tr>
<tr>
<td/>
<td>2</td>
<td>67</td>
<td>10</td>
<td>29.03</td>
<td>11.9</td>
<td/>
</tr>
<tr>
<td/>
<td/>
<td>67</td>
<td>1</td>
<td>28.92</td>
<td>8.61</td>
<td/>
</tr>
<tr>
<td/>
<td/>
<td>Total</td>
<td/>
<td>57.94</td>
<td>20.51</td>
<td>413.89</td>
</tr>
<tr>
<td/>
<td>3</td>
<td>45</td>
<td>18</td>
<td>26.47</td>
<td>6.54</td>
<td/>
</tr>
<tr>
<td/>
<td/>
<td>45</td>
<td>21</td>
<td>27.17</td>
<td>6.5</td>
<td/>
</tr>
<tr>
<td/>
<td/>
<td>44</td>
<td>1</td>
<td>22.47</td>
<td>4.51</td>
<td/>
</tr>
<tr>
<td/>
<td/>
<td>Total</td>
<td/>
<td>76.11</td>
<td>17.55</td>
<td>182.03</td>
</tr>
<tr>
<td>4</td>
<td>1</td>
<td>161</td>
<td>161</td>
<td>40.84</td>
<td>31.1</td>
<td>433.67</td>
</tr>
<tr>
<td/>
<td>2</td>
<td>81</td>
<td>49</td>
<td>29.70</td>
<td>12.22</td>
<td/>
</tr>
<tr>
<td/>
<td/>
<td>80</td>
<td>9</td>
<td>27.86</td>
<td>10.49</td>
<td/>
</tr>
<tr>
<td/>
<td/>
<td>Total</td>
<td/>
<td>57.56</td>
<td>22.71</td>
<td>176.02</td>
</tr>
<tr>
<td/>
<td>3</td>
<td>54</td>
<td>4</td>
<td>25.00</td>
<td>67.36</td>
<td/>
</tr>
<tr>
<td/>
<td/>
<td>54</td>
<td>33</td>
<td>26.35</td>
<td>68.89</td>
<td/>
</tr>
<tr>
<td/>
<td/>
<td>53</td>
<td>3</td>
<td>24.63</td>
<td>61.39</td>
<td/>
</tr>
<tr>
<td/>
<td/>
<td>Total</td>
<td/>
<td>75.97</td>
<td>197.64</td>
<td>150.70</td>
</tr>
</tbody>
</table>
</table-wrap>
<p>The same behaviour was found for sub-zone 2, where using 1, 2, 3, 30 and 133 vehicles was tested. The last of these cases implies a single vehicle for each container and gives the optimal result in terms of work done but with, of course, an extremely large increase in distance. The impacts of using different numbers of smaller vehicles in sub-zones 3 and 4 are also set out in the table.</p>
<p>Note that since total work for an original sub-zone falls as vehicles are added, there will be less wear and tear on the vehicles. But the addition of these smaller trucks also involves acquisition costs and impacts on city traffic. Since the EHU authorities requested that the distance travelled should be optimized, the original approach (a single vehicle for each of the four sub-zones) generated the best solutions. The heuristic just described could nevertheless be employed to analyse the use of smaller vehicles for related services such as special waste collection or container cleaning. It may also prove useful for defining new zones once the City’s plans for additional containers have been implemented.</p>
</sec>
<sec id="section14-0734242X11402870" sec-type="conclusions">
<title>Conclusions and future research</title>
<p>The application of this optimization method resulted in significant improvement of the current waste vehicle routes. Route distances were reduced by up to 39% and work done, although not the variable being optimized, was cut by as much as 43%. This latter result was due in part to the fact that distance is one of the constituent factors of work, but also to the analysis of the various TSP solutions. Extrapolation of these outcomes to the entire southern zone of Buenos Aires indicates potential savings of more than US$200 000 annually in addition to less traffic disruption, less vehicle driver fatigue and less air pollution.</p>
<p>Much of this study consisted in modelling the graph and implementing the shortest path algorithm, taking into account all of the relevant details for producing routes on the city map. The graphical interface for creating images and animations was a key part of the implementation given that it enabled the information to be visualized in various forms, an essential capability when working with large amounts of information. Both the graphical interface and the data layer were abstracted into objects in the system so that if other technologies are used, the parts that have to be modified will be very localized.</p>
<p>A possible extension of this study would be to develop a program that calculates routes in real time. The program could then be used to recalculate the routes in response to eventualities such as street closures, traffic congestion or demonstrations. The efficiency of the proposed algorithms allows for such an implementation. Furthermore, a GPS module could be included that would input the waste vehicle locations at any given moment to the program. Drivers equipped with mobile devices could then be notified of the next container location to be serviced. These additions would give the system the scalability required to accommodate new containers and vehicles.</p>
<p>To reduce vehicle wear even further, the optimization of total work done along a route could be formulated as the main objective of the problem. One approach to this would be to design heuristics that search for alternative routes using the optimal TSP solution as a starting point. Another possibility would be to employ column-generating algorithms to solve the work optimization problem (<xref ref-type="bibr" rid="bibr11-0734242X11402870">Lavigne et al., 1997</xref>).</p>
<p>The container waste collection project launched by the Buenos Aires City Government will add containers gradually over a period of years until every block in the city has at least one. This means that new zones and routes will have to be added to the model, a task that will raise the interesting problem of how to define the zone assigned to each vehicle. The solution might be to use the sum of the distances of the shortest routes as a way of validating the zone definition.</p>
<p>If information on the average traffic speeds in each block were added to the city map database, the time required to travel the length of a block could be determined. The program could then be used to calculate a shortest time route. The implementation of the <italic>A</italic>
<sup>*</sup> algorithm would have to be modified to use a different lower bound function such as the Euclidean distance multiplied by the average traffic speed.</p>
<p>Finally, above and beyond its specific results this study has demonstrated that operations research can be highly useful in implementing a system for the efficient organization of the waste collection service of this city.</p>
</sec>
</body>
<back>
<fn-group>
<fn fn-type="financial-disclosure">
<p>The first author was partially supported by ANPCyT Grant PICT-2007-00533 and UBACyT Grant X606, Argentina. The second author was partially supported by FONDECyT Grant 1110797 and Millennium Science Institute “Complex Engineering Systems”, Chile.</p>
</fn>
</fn-group>
<ack>
<p>The authors are grateful to Bill Cook for his many suggestions on the use of <italic>Concorde</italic>. Many thanks are also due to Daniel Iglesias, Jorge Takashashi and Julián Dunayevich of the Buenos Aires City Government for providing the necessary data, to Florencia Fernández Slezak and Kenneth Rivkin for their valuable collaboration, and to the anonymous referees for helpful suggestions that significantly improved the final version of this article.</p>
</ack>
<ref-list>
<title>References</title>
<ref id="bibr1-0734242X11402870">
<citation citation-type="book">
<person-group person-group-type="author">
<name><surname>Applegate</surname><given-names>DL</given-names></name>
<name><surname>Bixby</surname><given-names>RE</given-names></name>
<name><surname>Chvatal</surname><given-names>V</given-names></name>
<name><surname>Cook</surname><given-names>WJ</given-names></name>
</person-group> (<year>2006</year>) <source>The Traveling Salesman Problem: A Computational Study</source>. <publisher-loc>Princeton, New Jersey</publisher-loc>: <publisher-name>Princeton University Press</publisher-name>.</citation>
</ref>
<ref id="bibr2-0734242X11402870">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Arribas</surname><given-names>C</given-names></name>
<name><surname>Blazquez</surname><given-names>C</given-names></name>
<name><surname>Lamas</surname><given-names>A</given-names></name>
</person-group> (<year>2010</year>) <article-title>Urban solid waste collection systems using mathematical modelling and tools of geographic information systems</article-title>. <source>Waste Management &amp; Research</source> <volume>28</volume>: <fpage>355</fpage>–<lpage>363</lpage>.</citation>
</ref>
<ref id="bibr3-0734242X11402870">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Chang</surname><given-names>N</given-names></name>
<name><surname>Lu</surname><given-names>H</given-names></name>
<name><surname>Wei</surname><given-names>L</given-names></name>
</person-group> (<year>1997</year>) <article-title>GIS technology for vehicle routing and scheduling in solid waste collection systems</article-title>. <source>Journal of Environmental Engineering</source> <volume>123</volume>: <fpage>901</fpage>–<lpage>933</lpage>.</citation>
</ref>
<ref id="bibr4-0734242X11402870">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Dijkstra</surname><given-names>EW</given-names></name>
</person-group> (<year>1959</year>) <article-title>A note on two problems in connexion with graphs</article-title>. <source>Numerische Mathematik</source> <volume>1</volume>: <fpage>269</fpage>–<lpage>271</lpage>.</citation>
</ref>
<ref id="bibr5-0734242X11402870">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Eisenstein</surname><given-names>D</given-names></name>
<name><surname>Iyer</surname><given-names>A</given-names></name>
</person-group> (<year>1997</year>) <article-title>Garbage collection in Chicago: a dynamic scheduling model</article-title>. <source>Management Science</source> <volume>43</volume>: <fpage>922</fpage>–<lpage>933</lpage>.</citation>
</ref>
<ref id="bibr6-0734242X11402870">
<citation citation-type="book">
<person-group person-group-type="author">
<name><surname>Garey</surname><given-names>M</given-names></name>
<name><surname>Johnson</surname><given-names>D</given-names></name>
</person-group> (<year>1979</year>) <source>Computers and Intractability: A Guide to the Theory of NP-Completeness</source>. <publisher-loc>San Francisco, CA</publisher-loc>: <publisher-name>Freeman and Company</publisher-name>.</citation>
</ref>
<ref id="bibr7-0734242X11402870">
<citation citation-type="book">
<person-group person-group-type="author">
<name><surname>Golden</surname><given-names>B</given-names></name>
<name><surname>Assad</surname><given-names>A</given-names></name>
<name><surname>Wasil</surname><given-names>E</given-names></name>
</person-group> (<year>2002</year>) <article-title>Routing vehicles in the real world: applications in the solid waste, beverage, food, dairy, and newspaper industries</article-title>. In: <person-group person-group-type="editor">
<name><surname>Toth</surname><given-names>P</given-names></name>
<name><surname>Vigo</surname><given-names>D</given-names></name>
</person-group> (eds.) <source>The Vehicle Routing Problem</source>. <publisher-loc>Philadelphia, PA</publisher-loc>: <publisher-name>SIAM</publisher-name>, <fpage>245</fpage>–<lpage>286</lpage>.</citation>
</ref>
<ref id="bibr8-0734242X11402870">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Hart</surname><given-names>PE</given-names></name>
<name><surname>Nilsson</surname><given-names>NJ</given-names></name>
<name><surname>Raphael</surname><given-names>B</given-names></name>
</person-group> (<year>1968</year>) <article-title>A formal basis for the heuristic determination of minimum cost paths</article-title>. <source>IEEE Transactions on Systems Science and Cybernetics</source> <volume>4</volume>: <fpage>100</fpage>–<lpage>107</lpage>.</citation>
</ref>
<ref id="bibr9-0734242X11402870">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Kim</surname><given-names>B</given-names></name>
<name><surname>Kim</surname><given-names>S</given-names></name>
<name><surname>Sahoo</surname><given-names>S</given-names></name>
</person-group> (<year>2006</year>) <article-title>Waste collection vehicle routing problem with time windows</article-title>. <source>Computers and Operations Research</source> <volume>33</volume>: <fpage>3624</fpage>–<lpage>3642</lpage>.</citation>
</ref>
<ref id="bibr10-0734242X11402870">
<citation citation-type="book">
<person-group person-group-type="author">
<name><surname>Kumar</surname><given-names>R</given-names></name>
<name><surname>Li</surname><given-names>H</given-names></name>
</person-group> (<year>1996</year>) <source>On a Symmetric TSP: Transformation to Symmetric TSP and Performance Bound</source>, <comment>Manuscript</comment>, <publisher-loc>Lexington KY</publisher-loc>, <publisher-name>Department of Electrical Enginnering, University of Kentucky</publisher-name>.</citation>
</ref>
<ref id="bibr11-0734242X11402870">
<citation citation-type="book">
<person-group person-group-type="author">
<name><surname>Lavigne</surname><given-names>J</given-names></name>
<name><surname>Desaulniers</surname><given-names>G</given-names></name>
<name><surname>Desrosiers</surname><given-names>J</given-names></name>
<name><surname>Soumis</surname><given-names>F</given-names></name>
</person-group> (<year>1997</year>) <source>Basic Modeling with GENCOL</source>.
<comment>Teaching Material</comment>, <publisher-name>GERAD, Universite du Quebec a Montreal, GC-REF-002</publisher-name>.</citation>
</ref>
<ref id="bibr12-0734242X11402870">
<citation citation-type="book">
<person-group person-group-type="author">
<name><surname>Liebman</surname><given-names>J</given-names></name>
</person-group> (<year>1975</year>) <article-title>Models in solid waste management</article-title>. In: <person-group person-group-type="editor">
<name><surname>Gass</surname><given-names>S</given-names></name>
<name><surname>Sisson</surname><given-names>R</given-names></name>
</person-group> (eds.) <source>A Guide to Models in Governmental Planning and Operations</source>. <publisher-loc>Potomac, MD</publisher-loc>: <publisher-name>Sauger Books</publisher-name>.</citation>
</ref>
<ref id="bibr13-0734242X11402870">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Male</surname><given-names>J</given-names></name>
<name><surname>Liebman</surname><given-names>J</given-names></name>
</person-group> (<year>1978</year>) <article-title>Districting and routing for solid waste collection</article-title>. <source>Journal of the Environmental Engineering Division</source> <volume>104-1</volume>: <fpage>1</fpage>–<lpage>14</lpage>.</citation>
</ref>
<ref id="bibr14-0734242X11402870">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Martin</surname><given-names>O</given-names></name>
<name><surname>Otto</surname><given-names>SW</given-names></name>
<name><surname>Felten</surname><given-names>EW</given-names></name>
</person-group> (<year>1996</year>) <article-title>Large-step Markov chains for the traveling salesman problem</article-title>. <source>Complex Systems</source> <volume>5</volume>: <fpage>299</fpage>–<lpage>326</lpage>.</citation>
</ref>
<ref id="bibr15-0734242X11402870">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Mourao</surname><given-names>M</given-names></name>
<name><surname>Almeida</surname><given-names>M</given-names></name>
</person-group> (<year>2000</year>) <article-title>Lower-bounding and heuristic methods for a refuse collection vehicle routing problem</article-title>. <source>European Journal of Operational Research</source> <volume>121</volume>: <fpage>420</fpage>–<lpage>434</lpage>.</citation>
</ref>
<ref id="bibr16-0734242X11402870">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Yeomans</surname><given-names>J</given-names></name>
<name><surname>Huang</surname><given-names>G</given-names></name>
<name><surname>Yoogalingam</surname><given-names>R</given-names></name>
</person-group> (<year>2003</year>) <article-title>Combining simulation with evolutionary algorithms for optimal planning under uncertainty: an application to municipal solid waste management planning in the regional municipality of Hamilton-Wentworth</article-title>. <source>Journal of Environmental Informatics</source> <volume>2</volume>: <fpage>11</fpage>–<lpage>30</lpage>.</citation>
</ref>
</ref-list>
</back>
</article>