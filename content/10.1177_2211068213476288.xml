<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  PUBLIC "-//NLM//DTD Journal Publishing DTD v2.3 20070202//EN" "journalpublishing.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article" xml:lang="en">
<front>
<journal-meta>
<journal-id journal-id-type="publisher-id">JLA</journal-id>
<journal-id journal-id-type="hwp">spjla</journal-id>
<journal-title>Journal of Laboratory Automation</journal-title>
<issn pub-type="ppub">2211-0682</issn>
<issn pub-type="epub">1540-2452</issn>
<publisher>
<publisher-name>SAGE Publications</publisher-name>
<publisher-loc>Sage CA: Los Angeles, CA</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="doi">10.1177/2211068213476288</article-id>
<article-id pub-id-type="publisher-id">10.1177_2211068213476288</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Technology Briefs</subject>
</subj-group>
</article-categories>
<title-group>
<article-title>Integration of Analytical Instruments with Computer Scripting</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<name><surname>Carvalho</surname><given-names>Matheus C.</given-names></name>
<xref ref-type="aff" rid="aff1-2211068213476288">1</xref>
</contrib>
</contrib-group>
<aff id="aff1-2211068213476288"><label>1</label>Southern Cross University, Lismore, NSW, Australia</aff>
<author-notes>
<corresp id="corresp1-2211068213476288">Matheus C. Carvalho, Centre for Coastal Biogeochemistry Research, Southern Cross University, PO Box 157, Lismore, 2480, NSW, Australia. Email: <email>mcarvalh@scu.edu.au</email></corresp>
</author-notes>
<pub-date pub-type="epub-ppub">
<month>8</month>
<year>2013</year>
</pub-date>
<volume>18</volume>
<issue>4</issue>
<fpage>328</fpage>
<lpage>333</lpage>
<permissions>
<copyright-statement>© 2013 Society for Laboratory Automation and Screening</copyright-statement>
<copyright-year>2013</copyright-year>
<copyright-holder content-type="society">Society for Laboratory Automation and Screening</copyright-holder>
</permissions>
<abstract>
<p>Automation of laboratory routines aided by computer software enables high productivity and is the norm nowadays. However, the integration of different instruments made by different suppliers is still difficult, because to accomplish it, the user must have knowledge of electronics and/or low-level programming. An alternative approach is to control different instruments without an electronic connection between them, relying only on their software interface on a computer. This can be achieved through scripting, which is the emulation of user operations (mouse clicks and keyboard inputs) on the computer. The main advantages of this approach are its simplicity, which enables people with minimal knowledge of computer programming to employ it, and its universality, which enables the integration of instruments made by different suppliers, meaning that the user is totally free to choose the devices to be integrated. Therefore, scripting can be a useful, accessible, and economic solution for laboratory automation.</p>
</abstract>
<kwd-group>
<kwd>informatics and software</kwd>
<kwd>chemistry informatics</kwd>
<kwd>programming</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="section1-2211068213476288" sec-type="intro">
<title>Introduction</title>
<p>Automation is prevalent in most modern laboratories. Automated measurements are more precise, accurate, and economic. In many cases, automated measurements are the only practical way to achieve the necessary results.</p>
<p>Automation can be achieved through autosamplers that can, in some cases, be controlled directly on the measuring instruments. However, more and more the control of measuring instruments and their peripherals is done by means of a computer interface, with software designed for that specific application. In some cases, a single computer controls more than one instrument, and it is possible to control the different instruments in concert if the software was developed for that purpose.</p>
<p>This happens, for example, in continuous-flow isotope ratio mass spectrometry (CF-IRMS): an instrument in which chemical reactions take place (e.g., an elemental analyzer) is connected to a continuous-flow interface, which is subsequently connected to a mass spectrometer.<sup><xref ref-type="bibr" rid="bibr1-2211068213476288">1</xref></sup> All three are controlled in synchrony by the software provided by the manufacturer. Importantly, all three are also hardware connected, so that signals can be sent from one to the other. If, however, a new method is developed, it may be necessary that another instrument for a different chemical reaction is connected to the system. In this case, the operator will need to make sure not only that the gases coming from the reaction instrument will reach the other parts of the system free of impurities and so on, but also that communication between the new instrument and the system works correctly—otherwise, automation will be compromised. The usual scenario (<xref ref-type="fig" rid="fig1-2211068213476288"><bold>Fig. 1a</bold></xref>), in this case, is that the new instrument is able to send or receive instructions from another instrument directly, by means of a cable, for example, and the correct communication protocol needs to be used. In addition, the software employed must be able to recognize the new instrument; otherwise, new software must be written, which is arguably a daunting (or expensive) task. Therefore, this traditional approach limits the instruments that can be used in concert with those able to communicate with others via hardware and also to people with knowledge of communication protocols and/or low-level programming. A way to overcome this last difficulty is the development of a general laboratory automation control system, as proposed recently.<sup><xref ref-type="bibr" rid="bibr2-2211068213476288">2</xref></sup> However, even in this case, the development of protocols for the software system is a requirement in order that it really becomes universal.<sup><xref ref-type="bibr" rid="bibr2-2211068213476288">2</xref></sup></p>
<fig id="fig1-2211068213476288" position="float">
<label>Figure 1.</label>
<caption>
<p>Schematic description of (a) the usual configuration for the integration between two instruments controlled by a computer and (b) a possible configuration when using scripting to integrate two instruments. The dashed line in panel a indicates that the computer control of instrument B is optional, whereas the continuous lines indicate necessary control between two components.</p>
</caption>
<graphic xlink:href="10.1177_2211068213476288-fig1.tif"/></fig>
<p>An easier and more general solution can be achieved by means of computer scripting. Computer scripting is the setup of automatic instructions to the computer in order to substitute for user operation. For example, one could write a script stating (in human language), “Repeat this 10 times from now on: Click at position X1, Y1, wait 5 minutes, click at position X2, Y2, wait 13 minutes.” It is clear that if position “X1, Y1” corresponds to one instrument controlled by the computer and “X2, Y2” to another, then these instructions will make two instruments work synchronically, enabling (in this example) the measurement of 10 samples, one each 18 minutes. Notice that the only requirement for this approach to work is that both instruments have each a graphical user interface installed on the computer, which is the norm for the large majority of instruments nowadays, irrespective of the manufacturer. There is no need of a physical connection (cable) between the two instruments (<xref ref-type="fig" rid="fig1-2211068213476288"><bold>Fig. 1b</bold></xref>) or of knowledge, by the user, of the communication protocols involved in the process.</p>
</sec>
<sec id="section2-2211068213476288">
<title>Scripting and Laboratory Automation</title>
<p>A script, in computing, is defined as a set of instructions passed to the computer to perform a task. Therefore, a script can be seen as a simple computer program. Scripting has been used in computers for a long time, and there are many different kinds of scripting languages.<sup><xref ref-type="bibr" rid="bibr3-2211068213476288">3</xref></sup> For laboratory automation, the most useful are those that allow straightforward emulation of user actions, that is, the control of mouse clicks and keyboard operations. The idea is to substitute human operation for an automated procedure, and the most direct way (not necessarily the most computationally efficient; scripting is more about easiness than software efficiency or elegance<sup><xref ref-type="bibr" rid="bibr3-2211068213476288">3</xref></sup>) is to simply copy the actions of the software user, which are mainly mouse clicks and, sometimes, text inputs. Control of the timing of these actions is also essential for laboratory automation with scripts. After an action takes place, there is always a time lag due to the operations done by the equipment being controlled by the computer. This time lag must be accounted for when writing the script, including also small differences that may exist from sample to sample (e.g., samples positioned further from the origin of the autosampler could take longer to be reached).</p>
<p>Finally, it is essential that the scripting language enables the user to organize the commands as in structured programming. Structured programming is the prevalent programming technique nowadays, and it enables total control of actions in any imaginable fashion. Readers not familiar with programming techniques can access many resources about structured programming on the Internet.</p>
<p>If the scripting language satisfies the criteria outlined above, it can be a very powerful tool in laboratory automation. Compared with other approaches (<xref ref-type="table" rid="table1-2211068213476288"><bold>Table 1</bold></xref>), it demands more skills from the user than ordinary computer operation. Nevertheless, it demands much less technical skills than those necessary to write software in the traditional way or to make an electronic controlling device external to the computer. A third alternative is software that allows scheduling of actions, including mouse and keyboard control. However, because these kinds of software do not allow structured programming, they will always be less powerful and flexible than scripting.</p>
<table-wrap id="table1-2211068213476288" position="float">
<label>Table 1.</label>
<caption>
<p>Comparison among Different Ways to Integrate Different Instruments in a Laboratory.</p>
</caption>
<graphic alternate-form-of="table1-2211068213476288" xlink:href="10.1177_2211068213476288-table1.tif"/>
<table>
<colgroup>
<col align="left"/>
<col align="left"/>
<col align="left"/>
</colgroup>
<thead>
<tr>
<th align="left">Technique</th>
<th align="center">Skill Level</th>
<th align="center">Automation Capability</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ordinary software operation</td>
<td>Low</td>
<td>Restricted to instruments that can be directly controlled by the software</td>
</tr>
<tr>
<td>Scheduling software</td>
<td>Low</td>
<td>Limited integration of different software controlling different instruments</td>
</tr>
<tr>
<td>Scripting</td>
<td>Intermediate</td>
<td>Complete integration of different software controlling different instruments</td>
</tr>
<tr>
<td>Programming and electronics</td>
<td>High</td>
<td>Allows development of software and machines for controlling any kind of instrument</td>
</tr>
</tbody>
</table>
</table-wrap>
<p>A caveat for scripting is its dependence on the software that controls the instrument. If the instrument is controlled by software that does not allow all necessary operations for a given run (e.g., if the software controlling a gas chromatography instrument cannot configure the temperature ramp), scripting utility can be limited.</p>
</sec>
<sec id="section3-2211068213476288">
<title>Integration of Analytical Instruments: An Example and Short Tutorial</title>
<p>Scripting power for laboratory automation can be demonstrated by the ability of integrating different analytical instruments without need for an electronic connection between them. Such an approach in theory enables the integration of any kind of device, as long as the software has graphical user interfaces. An example will be presented below.</p>
<p>In our laboratory, we successfully employed AutoIt (<ext-link ext-link-type="uri" xlink:href="http://www.autoitscript.com">www.autoitscript.com</ext-link>), a free, open-source scripting language for the Windows Operating system (chosen based on the author’s experience; other languages with similar capability are available), to synchronize the autosampler of a total organic carbon (TOC) analyzer, Aurora 1030w (OI Scientific, College Station, Texas), and a system developed to measure dissolved inorganic carbon (DIC) in water samples by coulometry, the VINDTA 3C (Marianda, Kiel, Germany) (<xref ref-type="fig" rid="fig2-2211068213476288"><bold>Fig. 2</bold></xref>). The motivation was that the precision of the VINDTA for DIC measurement is 0.1%, which is the best available nowadays, but the instrument does not have an autosampler. Automation of this measurement would be very convenient, for example, for determination of photosynthesis and respiration in water.<sup><xref ref-type="bibr" rid="bibr4-2211068213476288">4</xref></sup></p>
<fig id="fig2-2211068213476288" position="float">
<label>Figure 2.</label>
<caption>
<p>Instrument configuration. Left: Aurora 1030; only its autosampler is used. Center: sample handling part of the VINDTA. Right: VINDTA coulometer for CO<sub>2</sub> detection.</p>
</caption>
<graphic xlink:href="10.1177_2211068213476288-fig2.tif"/>
</fig>
<p>The physical coupling of the two instruments was very simple: The sampling line of the VINDTA, a ⅛-inch Teflon tube, was connected to the sampling needle of the autosampler of the Aurora. This way, the water from vials on the Aurora autosampler could be collected straight to the VINDTA. No wire to send signals was used to connect the two instruments.</p>
<p>The VINDTA needs about 60 mL of water for DIC measurement, and the autosampler in the Aurora can only handle 40-mL vials. Thus, each measurement needed to sample two vials each time. The VINDTA software has a function that allows the division of the sampling in two steps, and this was applied. Manual testing was done to determine the timing of each operation.</p>
<p>If everything had to be done manually, the operator would go to the Aurora interface (<xref ref-type="fig" rid="fig3-2211068213476288"><bold>Fig. 3</bold></xref>) and click on “Vial #,” type “1”; then click on “Move to Sample Vial”; wait until the autosampler is at the correct position, then click on “Depth(%), type “100”; and finally click on “Move to Needle Depth.” Then would come the VINDTA operation (<xref ref-type="fig" rid="fig4-2211068213476288"><bold>Fig. 4</bold></xref>): The operator would click on “Other,” choose the “DIC.mth” method, and click on “Open.” If the sample vial were big enough, this would be all. But since this is not the case, the operator would monitor the VINDTA operation and, after the rinsing had finished, the operator would again use the Aurora interface, this time to move the sample to the next vial containing the sample that would really be measured. As explained before, the VINDTA was configured to allow this vial exchange. The last step would be to wait until the measurement is done and to start everything again for the next sample.</p>
<fig id="fig3-2211068213476288" position="float">
<label>Figure 3.</label>
<caption>
<p>Graphical user interface for the Aurora autosampler.</p>
</caption>
<graphic xlink:href="10.1177_2211068213476288-fig3.tif"/></fig>
<fig id="fig4-2211068213476288" position="float">
<label>Figure 4.</label>
<caption>
<p>Graphical user interface for the VINDTA.</p>
</caption>
<graphic xlink:href="10.1177_2211068213476288-fig4.tif"/></fig>
<p>Writing a script to control both instruments consists of translating the above paragraph to a language that the computer controlling both the Aurora and the VINDTA can understand. The instructions in AuotIt language are in <xref ref-type="fig" rid="fig5-2211068213476288"><bold>Figure 5</bold></xref>. AutoIt language is very similar to Basic, and readers familiar with this language will have no problem understanding the code. However, to make it accessible to the other readers, an explanation about the components of the code will be given, so they can modify it according to their needs. Before that, the interested reader must download and install AutoIt.</p>
<fig id="fig5-2211068213476288" position="float">
<label>Figure 5.</label>
<caption>
<p>AutoIt code for measuring 21 samples using the autosampler of the Aurora with the VINDTA.</p>
</caption>
<graphic xlink:href="10.1177_2211068213476288-fig5.tif"/></fig>
<p>The code is divided in three sections. The first part (lines 1–10) is the main body of the code; the other two parts (lines 11–22 and 23–29) are “functions,” that is, blocks of code that are called in the main body to avoid redundancy, thus making the code easier to follow.</p>
<p>Line 1 in <xref ref-type="fig" rid="fig5-2211068213476288"><bold>Figure 5</bold></xref> declares the single variable in this code, the variable “$posit.” Declaring variables is not essential in AutoIt but is good programming practice. Line 2 is the start of a loop, which is closed in line 10. The loop says here to do everything in lines 3 to 9 until the variable $posit reaches the value of 41 or higher. It will automatically increment $posit value by 1 every loop. In the loop, the functions declared in the other parts of the code are called three times: lines 3, 6, and 9. Notice that the function “PushNeedleDIC” needs an argument, which in this case is the variable $posit. In line 4, $posit is incremented in 1 unit. This is done so that the autosampler will go to the next vial in the sequence before it samples again. Notice that because of that, the loop that goes from 1 to 41 measures 21 samples, because $posit will be incremented by 2 units each loop. In lines 7 and 9 is the command “sleep.” This command tells the computer to wait a given number of milliseconds until the next action. The values input here must be determined based on the observation of the instruments working during the measurement.</p>
<p>The function “PushNeedleDIC” is defined in lines 11 to 22. In lines 12, 16, 18, and 21 is the command “MouseClick,” which uses as arguments the mouse button to be clicked (left), the X position, the Y position, and the number of clicks (1). Lines 13, 14, and 19 contain the command “Send,” which is a keyboard emulator. In line 14, “Send” tells the computer to type the variable $posit. In line 13, the command tells the computer to click the keys “backspace” and “delete” five times each, so that it is ensured that the writing field will be empty. In line 19, besides these two actions, the computer is also instructed to type “100.” The function “StartVindtaDIC” in lines 23 to 29 can be understood with the explanation given for “PushNeedleDIC.”</p>
<p>It is important to notice that the positions for the mouse clicks (<xref ref-type="fig" rid="fig3-2211068213476288"><bold>Figs. 3</bold></xref> and <xref ref-type="fig" rid="fig4-2211068213476288"><bold>4</bold></xref>) must be kept static on the screen so that the script (<xref ref-type="fig" rid="fig5-2211068213476288"><bold>Fig. 5</bold></xref>) works properly. Also, no other software window can be maximized on the screen. Therefore, when the script is running, it is essential that computer operation is relegated solely for this purpose. AutoIt enables features like making sure that the windows are at the right position every time before a mouse click (“WinMove” command) and that the keyboard and mouse are locked until the script is finished (“BlockInput” command), but these were not included in the example because they are optional. Readers interested in learning more about AutoIt can find plenty of information on the Internet.</p>
<p>Using the procedure described above, precision of 0.08% was obtained for unattended DIC measurements of 13 replications of a sample (tap water enriched in bicarbonate). Another script was written, using the same hardware, but this time for alkalinity measurements. Precision of 0.14% was obtained for unattended measurements of 11 replications of the same sample used in the other test.</p>
<p>In conclusion, scripting can be a powerful way to enable and enhance laboratory automation and is especially suitable for integrating and synchronizing instruments without need of a physical electronic connection between them. This means that users are free to choose the instruments they want to integrate, regardless of specifications determined by the suppliers of the instruments. Therefore, integration by scripting can be an economic solution: In the example given here, the buying of a new autosampler (or, alternatively, the use of many hours of a technician) was avoided, without compromising the quality of the results.</p>
<p>Another important aspect of scripting is that it is more accessible than low-level programming and electronics, which are the traditional techniques to integrate instruments. In other words, less time and money can be spent to achieve similar results.</p>
</sec>
</body>
<back>
<fn-group>
<fn fn-type="conflict">
<label>Declaration of Conflicting Interests</label>
<p>The author declared no potential conflicts of interest with respect to the research, authorship, and/or publication of this article.</p>
</fn>
<fn fn-type="financial-disclosure">
<label>Funding</label>
<p>The author disclosed receipt of the following financial support for the research, authorship, and/or publication of this article: Financial support was received from Southern Cross University, including salary and access and use of necessary laboratory equipment and reagents necessary for the experiments described.</p>
</fn>
</fn-group>
<ref-list>
<title>References</title>
<ref id="bibr1-2211068213476288">
<label>1.</label>
<citation citation-type="book">
<person-group person-group-type="author">
<name><surname>Meier-Augenstein</surname><given-names>W.</given-names></name>
</person-group> <article-title>Laboratory Set-up for GC-MS and Continuous-Flow IRMS</article-title>. In <source>Handbook of Stable Isotope Analytical Techniques;</source> <person-group person-group-type="editor">
<name><surname>De Groot</surname><given-names>H. J.</given-names></name>
</person-group>, Ed.; <publisher-name>Elsevier</publisher-name>: <publisher-loc>New York</publisher-loc>, <year>2004</year>; <volume>Vol. 1</volume>, pp. <fpage>1038</fpage>–<lpage>1042</lpage>.</citation>
</ref>
<ref id="bibr2-2211068213476288">
<label>2.</label>
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Delaney</surname><given-names>N. F.</given-names></name>
<name><surname>Rojas-Echenique</surname><given-names>J. I.</given-names></name>
<name><surname>Marx</surname><given-names>C. J.</given-names></name>
</person-group> <article-title>Clarity: An Open-Source Manager for Laboratory Automation</article-title>. <source>J. Lab. Autom</source>. In press.</citation>
</ref>
<ref id="bibr3-2211068213476288">
<label>3.</label>
<citation citation-type="book">
<person-group person-group-type="author">
<name><surname>Barron</surname><given-names>D. W.</given-names></name>
</person-group> <source>The World of Scripting Languages;</source> <publisher-loc>John Wiley</publisher-loc>: <publisher-name>New York</publisher-name>, <year>1999</year>.</citation>
</ref>
<ref id="bibr4-2211068213476288">
<label>4.</label>
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Carvalho</surname><given-names>M. C.</given-names></name>
<name><surname>Eyre</surname><given-names>B. D.</given-names></name>
</person-group> <article-title>Measurement of Planktonic CO<sub>2</sub> Respiration in the Light</article-title>. <source>Limnol. Oceanogr Methods</source> <year>2012</year>, <volume>10</volume>, <fpage>167</fpage>–<lpage>178</lpage>.</citation>
</ref>
</ref-list>
</back>
</article>