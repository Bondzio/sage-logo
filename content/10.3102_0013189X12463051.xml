<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  PUBLIC "-//NLM//DTD Journal Publishing DTD v2.3 20070202//EN" "journalpublishing.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article" xml:lang="en">
<front>
<journal-meta>
<journal-id journal-id-type="publisher-id">EDR</journal-id>
<journal-id journal-id-type="hwp">spedr</journal-id>
<journal-title>Educational Researcher</journal-title>
<issn pub-type="ppub">0013-189X</issn>
<issn pub-type="epub">1935-102X</issn>
<publisher>
<publisher-name>SAGE Publications</publisher-name>
<publisher-loc>Sage CA: Los Angeles, CA</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="doi">10.3102/0013189X12463051</article-id>
<article-id pub-id-type="publisher-id">10.3102_0013189X12463051</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Reviews/Essays</subject>
</subj-group>
</article-categories>
<title-group>
<article-title>Computational Thinking in K–12</article-title>
<subtitle>A Review of the State of the Field</subtitle>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<name><surname>Grover</surname><given-names>Shuchi</given-names></name>
<xref ref-type="aff" rid="aff1-0013189X12463051">1</xref>
</contrib>
<contrib contrib-type="author">
<name><surname>Pea</surname><given-names>Roy</given-names></name>
<xref ref-type="aff" rid="aff1-0013189X12463051">1</xref>
<xref ref-type="aff" rid="aff2-0013189X12463051">2</xref>
</contrib>
</contrib-group>
<aff id="aff1-0013189X12463051"><label>1</label>Stanford University School of Education, Stanford, CA, USA</aff>
<aff id="aff2-0013189X12463051"><label>2</label>H-STAR Institute, Stanford, CA, USA</aff>
<pub-date pub-type="epub-ppub">
<month>1</month>
<year>2013</year>
</pub-date>
<volume>42</volume>
<issue>1</issue>
<fpage>38</fpage>
<lpage>43</lpage>
<history>
<date date-type="received">
<day>14</day>
<month>4</month>
<year>2012</year>
</date>
<date date-type="rev-recd">
<day>13</day>
<month>6</month>
<year>2012</year>
</date>
<date date-type="rev-recd">
<day>19</day>
<month>7</month>
<year>2012</year>
</date>
<date date-type="accepted">
<day>6</day>
<month>9</month>
<year>2012</year>
</date>
</history>
<permissions>
<copyright-statement>© 2013 AERA</copyright-statement>
<copyright-year>2013</copyright-year>
<copyright-holder content-type="society">American Educational Research Association</copyright-holder>
</permissions>
<abstract>
<p>Jeannette Wing’s influential article on computational thinking 6 years ago argued for adding this new competency to every child’s analytical ability as a vital ingredient of science, technology, engineering, and mathematics (STEM) learning. What is computational thinking? Why did this article resonate with so many and serve as a rallying cry for educators, education researchers, and policy makers? How have they interpreted Wing’s definition, and what advances have been made since Wing’s article was published? This article frames the current state of discourse on computational thinking in K–12 education by examining mostly recently published academic literature that uses Wing’s article as a springboard, identifies gaps in research, and articulates priorities for future inquiries.</p>
</abstract>
<kwd-group>
<kwd>computational thinking</kwd>
<kwd>computing education</kwd>
<kwd>computational literacy</kwd>
<kwd>computers and learning</kwd>
<kwd>K–12 curricula</kwd>
<kwd>learning environments</kwd>
<kwd>problem solving</kwd>
<kwd>STEM learning</kwd>
<kwd>student cognition</kwd>
<kwd>technology</kwd>
</kwd-group>
<custom-meta-wrap>
<custom-meta>
<meta-name>cover-date</meta-name>
<meta-value>Jan/Feb 2013</meta-value>
</custom-meta>
</custom-meta-wrap>
</article-meta>
</front>
<body>
<sec id="section1-0013189X12463051" sec-type="intro">
<title>Introduction</title>
<p>Six years ago, Jeannette Wing’s succinct and influential article, “Computational Thinking,” appeared in the Viewpoint section of the March 2006 edition of the <italic>Communications of the ACM</italic> with the pronouncement: “It represents a universally applicable attitude and skill set everyone, not just computer scientists, would be eager to learn and use” (p. 33).</p>
<p>Wing’s arguments caught the attention of a broad academic community. Prompted by her article and a growing community of researchers, educators, and policymakers, computational thinking (or CT) as a concept and associated research agenda has witnessed increasing attention and research. The tailwinds in the larger environment have fanned this growing interest. The issue of Computer Science (CS) Education in K–12 took center-stage following a stark report titled <italic>Running on Empty: The Failure to Teach K–12 Computer Science in the Digital Age</italic> (<xref ref-type="bibr" rid="bibr39-0013189X12463051">Wilson, Sudol, Stephenson, &amp; Stehlik, 2010</xref>) revealed precipitously low numbers for women in computing and that more than two thirds of the country had few computer science standards at the secondary school level. Concerns about these statistics deepen given projections from the Bureau of Labor Statistics (<ext-link ext-link-type="uri" xlink:href="http://www.bls.gov/ooh/">http://www.bls.gov/ooh/</ext-link>) that computing is one of the fastest-growing job markets through 2018. This CS education imperative has dovetailed with the science policy attention to science, technology, engineering, and mathematics (STEM) learning in the United States since the turn of the 21st century. With CT being viewed as at the core of all STEM disciplines (<xref ref-type="bibr" rid="bibr15-0013189X12463051">Henderson, Cortina, Hazzan, &amp; Wing, 2007</xref>) it appears that computing in K–12 is an idea whose time has come.</p>
<p>Of course, the idea of CT is not new. Back in the 1960s, Alan Perlis argued for the need for college students of all disciplines to learn programming and the “theory of computation” (<xref ref-type="bibr" rid="bibr12-0013189X12463051">Guzdial, 2008</xref>). However, in the context of K–12 education, computing first gained popular traction around Seymour Papert’s MIT work in the 1980s. Papert pioneered the idea of children developing procedural thinking through LOGO programming (<xref ref-type="bibr" rid="bibr30-0013189X12463051">Papert, 1980</xref>, <xref ref-type="bibr" rid="bibr31-0013189X12463051">1991</xref>). This recent resurgence takes a fresh, “21st century” perspective on the topic, and <xref ref-type="bibr" rid="bibr40-0013189X12463051">Wing’s 2006</xref> article forms a logical starting point for our critical examination of the current state of the field of CT in K–12 education. The following sections examine mostly recently published, salient, academic literature that has used Wing’s article as a springboard. The article will also report on key efforts around computing education in K–12.</p>
<p>Given the definitional confusion that has plagued CT as a phrase and how imperative it is for school education, the next section looks deeply at the varied perspectives and evolving definitions of CT, the rationale for building CT among school children, and common criticisms against CT in schools. The article then surveys recent research investigating CT (including some that do not use the phrase <italic>computational thinking</italic> per se but nonetheless examine computational competencies in children), the various environments and tools that are believed to foster CT development, and studies attempting to assess CT are appraised. Finally, the article lays out priorities for broadening the K–12 CT discourse on the basis of the gaps in current research.</p>
</sec>
<sec id="section2-0013189X12463051">
<title>The What and Why of Computational Thinking</title>
<p>According to <xref ref-type="bibr" rid="bibr40-0013189X12463051">Wing (2006)</xref>, “computational thinking involves solving problems, designing systems, and understanding human behavior, by drawing on the concepts fundamental to computer science” (p. 33). CT’s essence is thinking like a computer scientist when confronted with a problem.</p>
<p>Wing’s call to action for CT in school education served as the starting point for two National Academy of Sciences workshops convening leading researchers from education, learning sciences and computer science departments, and leaders from the computing industry, to explore “the nature of computational thinking and its cognitive and educational implications” (<xref ref-type="bibr" rid="bibr26-0013189X12463051">National Research Council [NRC], 2010</xref>, p. viii) and the pedagogical aspects of computational thinking (<xref ref-type="bibr" rid="bibr27-0013189X12463051">NRC, 2011</xref>). In the first workshop, early notions of CT that focused on procedural thinking and programming (<xref ref-type="bibr" rid="bibr30-0013189X12463051">Papert, 1980</xref>, <xref ref-type="bibr" rid="bibr31-0013189X12463051">1991</xref>), though still considered valid, were revisited and broadened to encompass several core concepts of computer science that take it beyond “just programming.” The workshop, however, threw into sharp relief the lack of consensus that seems to have bedeviled this space. Some of the central questions left unanswered by the workshop included the following: How can CT be recognized? What is the best pedagogy for promoting CT among children? Can programming, computers, and CT be legitimately separated? (<xref ref-type="bibr" rid="bibr26-0013189X12463051">NRC, 2010</xref>). Some of these questions were reexamined in the follow-up workshop that focused on better defining the space by gathering and synthesizing insights from educators addressing CT in their work with K–12 teachers and learners. The aim of the workshop was to share examples and best practices of pedagogies and environments for teaching CT and revealed a plethora of perspectives that reflected several tools and pedagogies that are legitimate candidates for use in developing these competencies.</p>
<p><xref ref-type="bibr" rid="bibr41-0013189X12463051">Wing (2011)</xref> revisited the topic and clarified, “Computational thinking is the thought processes involved in formulating problems and their solutions so that the solutions are represented in a form that can be effectively carried out by an information-processing agent.” <xref ref-type="bibr" rid="bibr1-0013189X12463051">Aho (2012)</xref> simplified this further by defining CT as the thought processes involved in formulating problems so “their solutions can be represented as computational steps and algorithms” (p. 832).</p>
<p>Recently, the <xref ref-type="bibr" rid="bibr35-0013189X12463051">Royal Society (2012)</xref> also offered a succinct and tractable definition that captures the essence of CT— “Computational thinking is the process of recognising aspects of computation in the world that surrounds us, and applying tools and techniques from Computer Science to understand and reason about both natural and artificial systems and processes” (p. 29).</p>
<p>A valuable perspective that breaks down the meaning of CT, especially for high school curricula, comes from the CS Principles course being piloted by the College Board and the National Science Foundation (NSF) (<ext-link ext-link-type="uri" xlink:href="http://www.csprinciples.org/">http://www.csprinciples.org/</ext-link>). The course focuses on the <italic>practices</italic> of computational thinking and is based on the seven “big ideas” of computing:</p>
<list id="list1-0013189X12463051" list-type="order">
<list-item><p>Computing is a creative human activity</p></list-item>
<list-item><p>Abstraction reduces information and detail to focus on concepts relevant to understanding and solving problems</p></list-item>
<list-item><p>Data and information facilitate the creation of knowledge</p></list-item>
<list-item><p>Algorithms are tools for developing and expressing solutions to computational problems</p></list-item>
<list-item><p>Programming is a creative process that produces computational artifacts</p></list-item>
<list-item><p>Digital devices, systems, and the networks that interconnect them enable and foster computational approaches to solving problems</p></list-item>
<list-item><p>Computing enables innovation in other fields, including science, social science, humanities, arts, medicine, engineering, and business.</p></list-item>
</list>
<p>Following workshops organized by the Computer Science Teachers Association (CSTA) and the International Society for Technology in Education (ISTE), <xref ref-type="bibr" rid="bibr2-0013189X12463051">Barr and Stephenson (2011)</xref> provided a similar “operational definition of CT” aimed at K–12 teachers that comprised an explanatory checklist for what CT means along with an enumeration of core CT concepts and capabilities, and examples of how they might be embedded in activities across multiple disciplines.</p>
<p>It is worth noting here that the potent idea of “computational literacy” (<xref ref-type="bibr" rid="bibr8-0013189X12463051">diSessa, 2000</xref>) pre-dates Wing’s charter for CT for all. Although the essence of both concepts targets this new digital age competency, diSessa separates the “material” tools such as programming environments, from the “cognitive” and the “social” aspects of computational literacy. Furthermore, diSessa underscores the use of “computing as a medium” for exploring other domains such as math and science, much like <xref ref-type="bibr" rid="bibr18-0013189X12463051">Kay and Goldberg (1977)</xref> explored math, science, and art via programming in Smalltalk. This notion is often neglected in popular definitions of CT. The term <italic>computational literacy</italic> is perhaps susceptible to confusion with earlier ones like <italic>computer literacy, information literacy</italic>, and <italic>digital literacy</italic> that have assumed various meanings over the years and fall well short of what diSessa demands of computational literacy. Although the phrase and notion of <italic>computational thinking</italic> now seems to be preferred over <italic>computational literacy</italic>, in research and practice today the two phrases are often used interchangeably.</p>
<p><italic>Procedural literacy</italic> is another avatar of CT that was first proposed in 1980 by B. A. Sheil at Xerox PARC. In our reading, there is little to distinguish between procedural literacy and CT applied mostly to creating video games and other computational media artifacts or, more broadly, the practice of CT in the context of new media art and design.</p>
<p>Researchers and CS educators for the most part now work broadly with the aforementioned recent descriptions of CT. The value of <italic>abstraction</italic> as CT’s keystone (distinguishing it from other types of thinking) is undisputed. Abstraction is “defining patterns, generalizing from specific instances,” and a key to dealing with complexity (<xref ref-type="bibr" rid="bibr41-0013189X12463051">Wing, 2011</xref>). The following elements are now widely accepted as comprising CT and form the basis of curricula that aim to support its learning as well as assess its development:</p>
<list id="list2-0013189X12463051" list-type="bullet">
<list-item><p>Abstractions and pattern generalizations (including models and simulations)</p></list-item>
<list-item><p>Systematic processing of information</p></list-item>
<list-item><p>Symbol systems and representations</p></list-item>
<list-item><p>Algorithmic notions of flow of control</p></list-item>
<list-item><p>Structured problem decomposition (modularizing)</p></list-item>
<list-item><p>Iterative, recursive, and parallel thinking</p></list-item>
<list-item><p>Conditional logic</p></list-item>
<list-item><p>Efficiency and performance constraints</p></list-item>
<list-item><p>Debugging and systematic error detection</p></list-item>
</list>
<p>Programming is not only a fundamental skill of CS and a key tool for supporting the cognitive tasks involved in CT but a demonstration of computational competencies as well. Noteworthy efforts like CS Unplugged (<ext-link ext-link-type="uri" xlink:href="http://csunplugged.org/">http://csunplugged.org/</ext-link>) that introduce computing concepts without the use of a computer, while providing valuable introductory activities for exposing children to the nature of CS, may be keeping learners from the crucial computational experiences involved in CT’s common practice.</p>
<p>Finally, although there is broad acknowledgement that computing pervades all aspects of the global economy, its place as a mandatory part of the school curriculum is far from secure. Many criticisms have revolved around these multiple interpretations of CT and a lack of clarity among educators on CS as a discipline. Another valid concern is whether there is a compelling rationale for all children, including those who allege no interest in pursuing CS and STEM careers, to develop computational competencies in school. In the zero-sum school curriculum map, how should curriculum policymakers make room in already packed school curricula? There is also lack of agreement on whether CT should ultimately be incorporated into education as a general subject, a discipline-specific topic, or a multidisciplinary topic (<xref ref-type="bibr" rid="bibr27-0013189X12463051">NRC, 2011</xref>). Lastly, there is some question whether CT is distinct enough from other forms of thinking that children are developing. Advocates of CT concede that although it shares elements with mathematical, engineering, and even design thinking, and draws on a rich legacy of related frameworks, it also extends each of those thinking skills in a unique way (<xref ref-type="bibr" rid="bibr21-0013189X12463051">Lee et al., 2011</xref>). <xref ref-type="bibr" rid="bibr7-0013189X12463051">Denning and Freeman (2009)</xref> observe that although the computing paradigm “contains echoes of engineering, science, and mathematics, it is distinctively different because of its central focus on information processes” (p. 30) and that Wing’s CT interpretation embeds well into this system of practice.</p>
<p>We claim that the approach to problem solving generally described as CT is a recognizable and crucial omission from the expertise that children are expected to develop through routine K–12 Science and Math education (although CT has finally been mentioned, albeit briefly, in the <xref ref-type="bibr" rid="bibr28-0013189X12463051">2012</xref> NRC K–12 Science Education framework). If basic literacy in Math and Science can be considered essential for all children to understand how our world works, why should school education not lift the hood on all-pervasive computing devices as well? We believe that those in possession of computational competencies will be better positioned to take advantage of a world with ubiquitous computing. Early experiences with this way of problem solving will not only alleviate problems in introductory CS courses undergraduates have been known to face but also generate interest and prime students for success in this growing field rife with opportunity.</p>
<p>Recent news from media and industry suggest that the move to make programming a more commonplace skill for everyone and introducing ’rithms (short for algorithms) as the fourth “r” for 21st-century literacy is gaining momentum globally. Israel has long boasted an exemplary mandatory high school CS curriculum. Countries such as Russia, South Africa, New Zealand, and Australia have already made room for CS in the K–12 curriculum. More recently, the United Kingdom has piloted programs to teach computing to all schoolchildren following a bold 2012 policy charter from the Royal Society.</p>
</sec>
<sec id="section3-0013189X12463051">
<title>Summary of Pertinent Research on CT in K–12</title>
<p>With broadly agreed on definitions of CT in K–12 education, focus has recently shifted to tackling the more practical questions of how to promote and assess the development of CT. There is extensive literature from the last three decades tackling issues of teaching and learning programming and CS. The bulk of CS education research, however, is set in the context of undergraduate classrooms. Although there is much to learn about CT in K–12 both from studies of kids and programming in the 1980s (using languages such as LOGO and BASIC) as well as early programming and CS experiences of college students, the space constraints imposed by the essay as well as a focus on the recent resurgence of CT force the review to be limited to <italic>recent research involving 21st-century tools and school-age children.</italic></p>
<sec id="section4-0013189X12463051">
<title>Environments and Tools That Foster CT</title>
<p>The idea of “low floor, high ceiling” as one of the guiding principles for the creation of programming environments for children has been around since the days of LOGO. It essentially means that though it should be easy for a beginner to cross the threshold to create working programs (low floor), the tool should also be powerful and extensive enough to satisfy the needs of advanced programmers (high ceiling). Computationally rich environments and effective CT tools for school children must have low threshold and high ceiling, scaffold, enable transfer, support equity, and be systemic and sustainable (<xref ref-type="bibr" rid="bibr34-0013189X12463051">Repenning, Webb, &amp; Ioannidou, 2010</xref>). Several programming tools fit these criteria to varying degrees. Popular among these are graphical programming environments such as Scratch, Alice, Game Maker, Kodu, and Greenfoot; Web-based simulation authoring tools such as Agentsheets and Agentcubes; and robotics kits and tangible media such as Arduino and Gogo Boards. Graphical programming environments are relatively easy to use and allow early experiences to focus on designing and creating, avoiding issues of programming syntax. By allowing novices to build programs by snapping together graphical blocks that control the actions of different dynamic actors on a screen, environments like Scratch, MIT’s popular offering, quite literally make programming a snap.</p>
<p>Several of these introductory computational experiences use the three-stage “use–modify–create” progression to help the learner go from user to modifier to creator of computational artifacts (<xref ref-type="bibr" rid="bibr21-0013189X12463051">Lee et al., 2011</xref>), a progression first broadly used in Apple’s Hypercard application in the mid-1980s to early 1990s. Curricular activities such as game design and robotics have typically served well as a means for the iterative exploration of CT, making them ideal not only for motivating and engaging school children but for introducing them to computer science. Visual and tangible programming experiences are often followed by exposure to high-level programming languages such as Python, Java, and Scheme.</p>
<p>Recommendations for engaging girls through computing in context (<xref ref-type="bibr" rid="bibr23-0013189X12463051">Margolis &amp; Fisher, 2002</xref>; also see <xref ref-type="bibr" rid="bibr6-0013189X12463051">Cooper &amp; Cunningham, 2010</xref>) provide a compelling rationale for tools that strive to bridge the gender gap in the computing field. Emerging computational environments are poised to provide more opportunities for engagement in CT in formal and informal settings while also engaging girls as well. E-textiles and other “computational craft” kits that use small, powerful hardware, such as the Lilypad Arduino, allow children to combine traditional arts and crafts such as sewing and sketching with computation and electronics. MIT App Inventor, a visual programming environment that uses Scratch-like graphical blocks of code for building Android mobile apps, is more gender neutral and complete than most tools. It sets a low floor for allowing creative app building (something all teens, including girls, are eager to do) while still engaging with complex CT concepts including procedural and data abstraction, iterative and recursive thinking, structured task breakdown, conditional and logical thinking, and debugging.</p>
<p>Despite its growing popularity for promoting many 21st-century competencies in K–12 (<xref ref-type="bibr" rid="bibr28-0013189X12463051">NRC, 2012</xref>), video gaming as a platform for examining CT among children has been underutilized in recent research. <xref ref-type="bibr" rid="bibr16-0013189X12463051">Holbert and Wilensky (2011)</xref> successfully developed and tested a prototype video game, FormulaT, which aimed to serve as a platform for learning principles of kinematics as well as “systematic computational strategies.” FormulaT used NetLogo, a computational environment for agent-based modeling. The activities of abstracting pertinent behaviors into agents, applying rules, and evaluating the results via modeling and simulation are key ways of engaging in CT. <xref ref-type="bibr" rid="bibr4-0013189X12463051">Blikstein (2010)</xref> demonstrates leveraging Netlogo computational models for science learning in secondary-level classrooms. Agent-based modeling, however, remains relatively underused in CT research.</p>
<p>Not surprisingly, current computational tools vary in their effectiveness in allowing for engagement with the various component elements of CT. <xref ref-type="bibr" rid="bibr22-0013189X12463051">Maloney, Peppler, Kafai, Resnick, and Rusk (2008)</xref> reported demonstration of several CT elements such as conditional logic, iterative and parallel thinking, and data abstraction in Scratch programs created by urban youth in after-school settings. However Scratch lacks the means to abstract functionality into functions and procedures, prompting a version called Snap! from Berkeley that seeks to address this. Perhaps an imperative for CS in K–12 will fuel the development of new tools built expressly for fostering CT among school-age children. These should not only embody all the characteristics of effective CT tools and promote the development of all the competencies now identified as elements of CT but also be guided by recent research on commonsense human understanding of computing and how children explain their approaches to problem solving (<xref ref-type="bibr" rid="bibr29-0013189X12463051">Pane, Ratanamahatana, &amp; Myers, 2001</xref>; <xref ref-type="bibr" rid="bibr36-0013189X12463051">Simon, Chen, Lewandowski, McCartney, &amp; Sanders, 2007</xref>).</p>
<p>Lastly, despite the variety of environments in which current CT research is situated, many promising spaces are still untapped; Fab Labs, Makerspaces, and DIY movements, such as Maker Faire and Instructables, that promote construction of tangible computational artifacts, informal “hacker” events for kids, as well as ubiquitous and powerful smartphones, all present exciting possibilities.</p>
</sec>
<sec id="section5-0013189X12463051">
<title>Assessment of CT</title>
<p>Without attention to assessment, CT can have little hope of making its way successfully into any K–12 curriculum. Furthermore, to judge the effectiveness of any curriculum incorporating CT, measures that would enable educators to assess what the child has learned need to be validated.</p>
<p>Most recent research addressing questions of CT assessment, such as <xref ref-type="bibr" rid="bibr37-0013189X12463051">Werner, Denner, Campe, and Kawamoto’s (2012)</xref> <italic>Fairy Assessment</italic> in Alice, has used either student-created, or predesigned programming artifacts to evaluate students’ understanding and use of abstraction, conditional logic, algorithmic thinking, and other CT concepts to solve problems. Ideas of deconstruction, reverse engineering, and debugging to assess children’s understanding in computational contexts have long enjoyed educational appeal. <xref ref-type="bibr" rid="bibr10-0013189X12463051">Fields, Searle, Kafai, and Min (2012)</xref> evaluated students’ engineering and programming skills as they debugged prebuilt faulty e-textile projects. <xref ref-type="bibr" rid="bibr13-0013189X12463051">Han Koh, Basawapatna, Bennett, and Repenning (2010)</xref> attempted with some success to assess the thorny issue of transfer to answer questions like “Now that the student can program Space Invaders, can the student program a science simulation?”</p>
<p>In the past two decades, “academic talk” has been leveraged for promoting and assessing math and science literacy. The development in the student use of the vocabulary and language of CS over the course of engaging in computationally rich activities provides an additional instrument for measuring the growth of CT (<xref ref-type="bibr" rid="bibr11-0013189X12463051">Grover, 2011</xref>).</p>
</sec>
</sec>
<sec id="section6-0013189X12463051">
<title>Computing Education in K–12</title>
<p><xref ref-type="bibr" rid="bibr38-0013189X12463051">Wilson and Guzdial (2010)</xref> maintain that although the national urgency for strengthening STEM in K–12 has translated into billions of dollars in funding, research explicitly in computing education remains underfunded. NSF initiatives such as CPATH, BPC, and most recently, CE21 have gone a long way in energizing projects aimed at bringing CT/CS concepts to the secondary level. An additional boost for guiding interested middle and high school students into CS careers comes from DARPA’s initiatives such as CS-STEM and Carnegie Mellon University’s FIRE (Fostering Innovation through Robotics Exploration).</p>
<p>Although ongoing research in development of CT will help inform computing curricula throughout K–12, preparing teachers for computing education and ensuring gender equity remain huge challenges. The NSF’s CS10K initiative aims to add 10,000 new CS teachers in U.S. high schools by 2015. The Georgia Computes! alliance is at the forefront of nationwide efforts for teacher preparation, development of CT/CS K–12 curricula as well as motivating female students in CS. Georgia Tech’s Guzdial argues in his blog (<ext-link ext-link-type="uri" xlink:href="http://computinged.wordpress.com/">http://computinged.wordpress.com/</ext-link>) that challenges to meeting the CS10K deadline include answering questions like the following: What do teachers need in order to develop into successful computer science teachers? What kind of pedagogy will fit into the lives of in-service high school teachers? What is Computer Science Pedagogical Content Knowledge?</p>
<p>In terms of curriculum, besides CS Principles for AP CS, the Exploring CS curriculum (<ext-link ext-link-type="uri" xlink:href="http://www.exploringcs.org">http://www.exploringcs.org</ext-link>) is intended to be a 1-year college preparatory curriculum for high school students. Other initiatives aimed at introducing CS into schools include CS4HS (<ext-link ext-link-type="uri" xlink:href="http://www.cs4hs.com/">http://www.cs4hs.com/</ext-link>) and Computing in the Core (<ext-link ext-link-type="uri" xlink:href="http://www.computinginthecore.org/">http://www.computinginthecore.org/</ext-link>)—both of which represent collaborations between academia, national bodies, and organizations such as Microsoft and Google. CSTA’s Model Curriculum for K–12 Computer Science provides curricular suggestions to help build interest, engage, and motivate students in CS. In addition, Google’s Exploring Computational Thinking website (<ext-link ext-link-type="uri" xlink:href="http://www.google.com/edu/">www.google.com/edu/</ext-link> computational-thinking) has a wealth of links to CT resources on the web. ACM has also recently introduced a new thread, EduBits, in its ACM Inroads quarterly that highlights principal educational activities within ACM and affiliated organizations.</p>
</sec>
<sec id="section7-0013189X12463051">
<title>Broadening the Scope of the Discourse and Priorities for Empirical Inquiry</title>
<p>It is thus quite evident that much of the recent work on CT has focused mostly on definitional issues, and tools that foster CT development. Some strides have been made in the realm of defining curricula for nurturing computational competencies, and assessing their development. Large gaps, however, still exist that call out for empirical inquiries.</p>
<p>In a view that was echoed by Alfred Aho, Wing argued, “an application of the science of learning research in designing grade- and age-appropriate curricula for computational thinking is necessary to maximize its impact on and significance for K–12 students” (<xref ref-type="bibr" rid="bibr27-0013189X12463051">NRC, 2011</xref>, p. 4). Barring some recent studies, such as <xref ref-type="bibr" rid="bibr9-0013189X12463051">Fadjo, Lu, and Black (2009)</xref> and <xref ref-type="bibr" rid="bibr3-0013189X12463051">Berland and Lee (2011)</xref>, few others have taken into account contemporary research in the learning sciences in socio-cultural and situated learning, distributed and embodied cognition, as well as activity, interaction and discourse analyses. Cognitive aspects of children and novices learning computational concepts were studied extensively in the 1980s—issues such as development of thinking skills (<xref ref-type="bibr" rid="bibr20-0013189X12463051">Kurland, Pea, Clement, &amp; Mawby, 1986</xref>); debugging (<xref ref-type="bibr" rid="bibr33-0013189X12463051">Pea, Soloway, &amp; Spohrer, 1987</xref>); problems with transfer (<xref ref-type="bibr" rid="bibr5-0013189X12463051">Clements &amp; Gullo, 1984</xref>; <xref ref-type="bibr" rid="bibr32-0013189X12463051">Pea &amp; Kurland, 1984</xref>); use of appropriate scaffolds for successful transfer (<xref ref-type="bibr" rid="bibr19-0013189X12463051">Klahr &amp; Carver, 1988</xref>), to name a few. That body of literature should be brought to bear on 21st-century CT research.</p>
<p>Also underinvestigated is the idea of computing as a medium for teaching other subjects—dovetailing the introduction of CT at K–12 with transfer of problem-solving skills in other domains. Past work includes demonstrations of children successfully designing LOGO software to teach fractions (<xref ref-type="bibr" rid="bibr14-0013189X12463051">Harel &amp; Papert, 1990</xref>) and science (<xref ref-type="bibr" rid="bibr17-0013189X12463051">Kafai, Ching, &amp; Marshall, 1997</xref>), and using modeling software in science (<xref ref-type="bibr" rid="bibr25-0013189X12463051">Metcalf, Krajcik, &amp; Soloway, 2000</xref>).</p>
<p>Empirical studies on CT in schoolchildren could leverage extensive research on the types of problems beginner CS undergraduates face in their early programming experiences that go beyond syntactical issues: Are there well-defined hurdles or targets of difficulty that exist in the path of developing some elements of CT in children (e.g., recursion)? If so, what are these and how can they be addressed?</p>
<p>Also largely untapped is the territory of dispositions for, attitudes toward, and stereotypes concerning CT and CS, and how they relate to the development of learner identity (<xref ref-type="bibr" rid="bibr24-0013189X12463051">Mercier, Barron, &amp; O’Connor, 2006</xref>). How crucial are these as we strive to provide both girls and boys with learning experiences that aim to nurture CT competencies? Recent incipient work on surveys of student attitudes toward computing represents a start in gaining a better understanding of this.</p>
<p>Clearly, much remains to be done to help develop a more lucid theoretical and practical understanding of computational competencies in children. What, for example, can we expect children to know or do better once they’ve been participating in a curriculum designed to develop CT and how can this be evaluated? These are perhaps among the most important questions that need answering before any serious attempt can be made to introduce curricula for CT development in schools at scale. It is time to redress the gaps and broaden the 21st-century academic discourse on computational thinking.</p>
</sec>
</body>
<back>
<ack>
<p>We gratefully acknowledge grant support of the LIFE Center from the National Science Foundation for this work (NSF-0835854).</p>
</ack>
<bio>
<title>AUTHORS</title>
<p><bold>SHUCHI GROVER</bold> is a doctoral candidate at Stanford University School of Education, 485 Lasuen Mall, Stanford, CA 94305-3096; <italic><email>shuchig@stanford.edu</email></italic>. Her research focuses on helping children become computationally literate—studying social, cultural, and cognitive processes that help in developing computational competencies—and on tools and environments that nurture such development.</p>
<p><bold>ROY PEA</bold> is the David Jacks Professor of Education &amp; Learning Sciences at Stanford University, School of Education, and Computer Science (Courtesy), and Director of the H-STAR Institute, Wallenberg Hall, 450 Serra Mall, Bldg. 160, Stanford, CA 94305; <italic><email>roypea@stanford.edu</email></italic>. His work in the learning sciences focuses on advancing theories, findings, tools, and practices of technology-enhanced learning of complex domains.</p>
</bio>
<ref-list>
<title>References</title>
<ref id="bibr1-0013189X12463051">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Aho</surname><given-names>A. V.</given-names></name>
</person-group> (<year>2012</year>). <article-title>Computation and computational thinking</article-title>. <source>Computer Journal</source>, <volume>55</volume>, <fpage>832</fpage>–<lpage>835</lpage>.</citation>
</ref>
<ref id="bibr2-0013189X12463051">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Barr</surname><given-names>V.</given-names></name>
<name><surname>Stephenson</surname><given-names>C.</given-names></name>
</person-group> (<year>2011</year>). <article-title>Bringing computational thinking to K-12: What is involved and what is the role of the computer science education community?</article-title> <source>ACM Inroads</source>, <volume>2</volume>, <fpage>48</fpage>–<lpage>54</lpage>.</citation>
</ref>
<ref id="bibr3-0013189X12463051">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Berland</surname><given-names>M.</given-names></name>
<name><surname>Lee</surname><given-names>V.</given-names></name>
</person-group> (<year>2011</year>). <article-title>Collaborative strategic board games as a site for distributed computational thinking</article-title>. <source>International Journal of Game-Based Learning</source>, <volume>1</volume>(<issue>2</issue>), <fpage>65</fpage>–<lpage>81</lpage>.</citation>
</ref>
<ref id="bibr4-0013189X12463051">
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Blikstein</surname><given-names>P.</given-names></name>
</person-group> (<year>2010</year>). <article-title>Connecting the science classroom and tangible interfaces: the bifocal modeling framework</article-title>. In <conf-name>Proceedings of the 9th International Conference of the Learning Sciences</conf-name>, <conf-loc>Chicago, IL</conf-loc>, <fpage>128</fpage>–<lpage>130</lpage>.</citation>
</ref>
<ref id="bibr5-0013189X12463051">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Clements</surname><given-names>D. H.</given-names></name>
<name><surname>Gullo</surname><given-names>D. F.</given-names></name>
</person-group> (<year>1984</year>). <article-title>Effects of computer programming on young children’s cognitions</article-title>. <source>Journal of Educational Psychology</source>, <volume>76</volume>, <fpage>1051</fpage>–<lpage>1058</lpage>.</citation>
</ref>
<ref id="bibr6-0013189X12463051">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Cooper</surname><given-names>S.</given-names></name>
<name><surname>Cunningham</surname><given-names>S.</given-names></name>
</person-group> (<year>2010</year>). <article-title>Teaching computer science in context</article-title>. <source>ACM Inroads</source>, <volume>1</volume>, <fpage>5</fpage>–<lpage>8</lpage>.</citation>
</ref>
<ref id="bibr7-0013189X12463051">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Denning</surname><given-names>P.</given-names></name>
<name><surname>Freeman</surname><given-names>P.</given-names></name>
</person-group> (<year>2009</year>). <article-title>Computing’s paradigm</article-title>. <source>Communications of the ACM</source>, <volume>52</volume>(<issue>12</issue>), <fpage>28</fpage>–<lpage>30</lpage>.</citation>
</ref>
<ref id="bibr8-0013189X12463051">
<citation citation-type="book">
<person-group person-group-type="author">
<name><surname>diSessa</surname><given-names>A. A.</given-names></name>
</person-group> (<year>2000</year>). <source>Changing minds: Computers, learning, and literacy</source>. <publisher-loc>Cambridge</publisher-loc>: <publisher-name>MIT Press</publisher-name>.</citation>
</ref>
<ref id="bibr9-0013189X12463051">
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Fadjo</surname><given-names>C. L.</given-names></name>
<name><surname>Lu</surname><given-names>M.</given-names></name>
<name><surname>Black</surname><given-names>J. B.</given-names></name>
</person-group> (<year>2009</year>, <month>June</month>). <source>Instructional embodiment and video game programming in an after school program.</source> <conf-name>Paper presented at the World Conference on Educational Multimedia, Hypermedia &amp; Telecommunications</conf-name>, <conf-loc>Chesapeake, VA</conf-loc>.</citation>
</ref>
<ref id="bibr10-0013189X12463051">
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Fields</surname><given-names>D. A.</given-names></name>
<name><surname>Searle</surname><given-names>K. A.</given-names></name>
<name><surname>Kafai</surname><given-names>Y. B.</given-names></name>
<name><surname>Min</surname><given-names>H. S.</given-names></name>
</person-group> (<year>2012</year>). <article-title>Debuggems to assess student learning in e-textiles</article-title>. In <conf-name>Proceedings of the 43rd SIGCSE Technical Symposium on Computer Science Education</conf-name>. <publisher-loc>New York, NY</publisher-loc>: <publisher-name>ACM Press</publisher-name>.</citation>
</ref>
<ref id="bibr11-0013189X12463051">
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Grover</surname><given-names>S.</given-names></name>
</person-group> (<year>2011</year>, <month>April</month>). <source>Robotics and engineering for middle and high school students to develop computational thinking</source>. <conf-name>Paper presented at the annual meeting of the American Educational Research Association</conf-name>, <conf-loc>New Orleans, LA</conf-loc>.</citation>
</ref>
<ref id="bibr12-0013189X12463051">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Guzdial</surname><given-names>M.</given-names></name>
</person-group> (<year>2008</year>). <article-title>Paving the way for computational thinking</article-title>. <source>Communications of the ACM</source>, <volume>51</volume>(<issue>8</issue>), <fpage>25</fpage>–<lpage>27</lpage>.</citation>
</ref>
<ref id="bibr13-0013189X12463051">
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Han Koh</surname><given-names>K.</given-names></name>
<name><surname>Basawapatna</surname><given-names>A.</given-names></name>
<name><surname>Bennett</surname><given-names>V.</given-names></name>
<name><surname>Repenning</surname><given-names>A.</given-names></name>
</person-group> (<year>2010</year>). <article-title>Towards the automatic recognition of computational thinking for adaptive visual language learning</article-title>. In <conf-name>Proceedings of the 2010 Conference on Visual Languages and Human Centric Computing (VL/HCC 2010)</conf-name> (pp. <fpage>59</fpage>–<lpage>66</lpage>). <publisher-loc>Madrid, Spain</publisher-loc>: <publisher-name>IEEE Computer</publisher-name>.</citation>
</ref>
<ref id="bibr14-0013189X12463051">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Harel</surname><given-names>I.</given-names></name>
<name><surname>Papert</surname><given-names>S.</given-names></name>
</person-group> (<year>1990</year>). <article-title>Software design as a learning environment</article-title>. <source>Interactive Learning Environments</source>, <volume>1</volume>, <fpage>1</fpage>–<lpage>32</lpage>.</citation>
</ref>
<ref id="bibr15-0013189X12463051">
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Henderson</surname><given-names>P. B.</given-names></name>
<name><surname>Cortina</surname><given-names>T. J.</given-names></name>
<name><surname>Hazzan</surname><given-names>O.</given-names></name>
<name><surname>Wing</surname><given-names>J. M.</given-names></name>
</person-group> (<year>2007</year>) <article-title>Computational thinking</article-title>. In <conf-name>Proceedings of the 38th ACM SIGCSE Technical Symposium on Computer Science Education (SIGCSE ’07)</conf-name>, <fpage>195</fpage>–<lpage>196</lpage>. <publisher-loc>New York, NY</publisher-loc>: <publisher-name>ACM Press</publisher-name>.</citation>
</ref>
<ref id="bibr16-0013189X12463051">
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Holbert</surname><given-names>N. R.</given-names></name>
<name><surname>Wilensky</surname><given-names>U.</given-names></name>
</person-group> (<year>2011</year>, <month>April</month>). <source>Racing games for exploring kinematics: a computational thinking approach</source>. <conf-name>Paper presented at the annual meeting of the American Educational Research Association</conf-name>, <conf-loc>New Orleans, LA</conf-loc>.</citation>
</ref>
<ref id="bibr17-0013189X12463051">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Kafai</surname><given-names>Y. B.</given-names></name>
<name><surname>Ching</surname><given-names>C. C.</given-names></name>
<name><surname>Marshall</surname><given-names>S.</given-names></name>
</person-group> (<year>1997</year>). <article-title>Children as designers of educational multimedia software</article-title>. <source>Computers &amp; Education</source>, <volume>29</volume>, <fpage>117</fpage>–<lpage>126</lpage>.</citation>
</ref>
<ref id="bibr18-0013189X12463051">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Kay</surname><given-names>A.</given-names></name>
<name><surname>Goldberg</surname><given-names>A.</given-names></name>
</person-group> (<year>1977</year>). <article-title>Personal dynamic media</article-title>. <source>IEEE Computer</source>, <volume>10</volume>, <fpage>31</fpage>–<lpage>41</lpage>.</citation>
</ref>
<ref id="bibr19-0013189X12463051">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Klahr</surname><given-names>D.</given-names></name>
<name><surname>Carver</surname><given-names>S. M.</given-names></name>
</person-group> (<year>1988</year>). <article-title>Cognitive objectives in a LOGO debugging curriculum: Instruction, learning, and transfer</article-title>. <source>Cognitive Psychology</source>, <volume>20</volume>, <fpage>362</fpage>–<lpage>404</lpage>.</citation>
</ref>
<ref id="bibr20-0013189X12463051">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Kurland</surname><given-names>D. M.</given-names></name>
<name><surname>Pea</surname><given-names>R. D.</given-names></name>
<name><surname>Clement</surname><given-names>C.</given-names></name>
<name><surname>Mawby</surname><given-names>R.</given-names></name>
</person-group> (<year>1986</year>). <article-title>A study of the development of programming ability and thinking skills in high school students</article-title>. <source>Journal of Educational Computing Research</source>, <volume>2</volume>, <fpage>429</fpage>–<lpage>458</lpage>.</citation>
</ref>
<ref id="bibr21-0013189X12463051">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Lee</surname><given-names>I.</given-names></name>
<name><surname>Martin</surname><given-names>F.</given-names></name>
<name><surname>Denner</surname><given-names>J.</given-names></name>
<name><surname>Coulter</surname><given-names>B.</given-names></name>
<name><surname>Allan</surname><given-names>W.</given-names></name>
<name><surname>Erickson</surname><given-names>J.</given-names></name>
<name><surname>. . . Werner</surname><given-names>L.</given-names></name>
</person-group> (<year>2011</year>). <article-title>Computational thinking for youth in practice</article-title>. <source>ACM Inroads</source>, <volume>2</volume>, <fpage>32</fpage>–<lpage>37</lpage>.</citation>
</ref>
<ref id="bibr22-0013189X12463051">
<citation citation-type="book">
<person-group person-group-type="author">
<name><surname>Maloney</surname><given-names>J.</given-names></name>
<name><surname>Peppler</surname><given-names>K.</given-names></name>
<name><surname>Kafai</surname><given-names>Y. B.</given-names></name>
<name><surname>Resnick</surname><given-names>M.</given-names></name>
<name><surname>Rusk</surname><given-names>N.</given-names></name>
</person-group> (<year>2008</year>). <article-title>Programming by choice: Urban youth learning programming with Scratch</article-title>. In <source>Proceedings of SIGCSE ’08</source>. <publisher-loc>New York, NY</publisher-loc>: <publisher-name>ACM Press</publisher-name>.</citation>
</ref>
<ref id="bibr23-0013189X12463051">
<citation citation-type="book">
<person-group person-group-type="author">
<name><surname>Margolis</surname><given-names>J.</given-names></name>
<name><surname>Fisher</surname><given-names>A.</given-names></name>
</person-group> (<year>2002</year>). <source>Unlocking the clubhouse: Women in computing</source>. <publisher-loc>Cambridge</publisher-loc>: <publisher-name>MIT Press</publisher-name>.</citation>
</ref>
<ref id="bibr24-0013189X12463051">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Mercier</surname><given-names>E. M.</given-names></name>
<name><surname>Barron</surname><given-names>B.</given-names></name>
<name><surname>O’Connor</surname><given-names>K. M.</given-names></name>
</person-group> (<year>2006</year>). <article-title>Images of self and others as computer users: The role of gender and experience</article-title>. <source>Journal of Computer Assisted Learning</source>, <volume>22</volume>, <fpage>335</fpage>–<lpage>348</lpage>.</citation>
</ref>
<ref id="bibr25-0013189X12463051">
<citation citation-type="book">
<person-group person-group-type="author">
<name><surname>Metcalf</surname><given-names>J. S.</given-names></name>
<name><surname>Krajcik</surname><given-names>J.</given-names></name>
<name><surname>Soloway</surname><given-names>E.</given-names></name>
</person-group> (<year>2000</year>). <article-title>Model-It: A design retrospective</article-title>. In <person-group person-group-type="editor">
<name><surname>Jacobson</surname><given-names>M. J.</given-names></name>
<name><surname>Kozma</surname><given-names>R. B.</given-names></name>
</person-group> (Eds.), <source>Innovations in science and mathematics education</source> (pp. <fpage>77</fpage>–<lpage>115</lpage>). <publisher-loc>Mahwah, NJ</publisher-loc>: <publisher-name>Lawrence Erlbaum</publisher-name>.</citation>
</ref>
<ref id="bibr26-0013189X12463051">
<citation citation-type="book">
<collab>National Research Council</collab>. (<year>2010</year>). <source>Committee for the Workshops on Computational Thinking: Report of a workshop on the scope and nature of computational thinking</source>. <publisher-loc>Washington, DC</publisher-loc>: <publisher-name>National Academies Press</publisher-name>.</citation>
</ref>
<ref id="bibr27-0013189X12463051">
<citation citation-type="book">
<collab>National Research Council</collab>. (<year>2011</year>). <source>Committee for the Workshops on Computational Thinking: Report of a workshop of pedagogical aspects of computational thinking</source>. <publisher-loc>Washington, DC</publisher-loc>: <publisher-name>National Academies Press</publisher-name>.</citation>
</ref>
<ref id="bibr28-0013189X12463051">
<citation citation-type="book">
<collab>National Research Council</collab>. (<year>2012</year>). <source>A framework for K–12 science education: Practices, crosscutting concepts, and core ideas</source>. <publisher-loc>Washington, DC</publisher-loc>: <publisher-name>National Academies Press</publisher-name>.</citation>
</ref>
<ref id="bibr29-0013189X12463051">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Pane</surname><given-names>J. F.</given-names></name>
<name><surname>Ratanamahatana</surname><given-names>C. A.</given-names></name>
<name><surname>Myers</surname><given-names>B. A.</given-names></name>
</person-group> (<year>2001</year>). <article-title>Studying the language and structure in non-programmers’ solutions to programming problems</article-title>. <source>International Journal of Human-Computer Studies</source>, <volume>54</volume>, <fpage>237</fpage>–<lpage>264</lpage>.</citation>
</ref>
<ref id="bibr30-0013189X12463051">
<citation citation-type="book">
<person-group person-group-type="author">
<name><surname>Papert</surname><given-names>S.</given-names></name>
</person-group> (<year>1980</year>). <source>Mindstorms: Children, computers, and powerful ideas</source>. <publisher-loc>New York, NY</publisher-loc>: <publisher-name>Basic Books</publisher-name>.</citation>
</ref>
<ref id="bibr31-0013189X12463051">
<citation citation-type="book">
<person-group person-group-type="author">
<name><surname>Papert</surname><given-names>S.</given-names></name>
</person-group> (<year>1991</year>). <article-title>Situating constructionism</article-title>. In <person-group person-group-type="editor">
<name><surname>Harel</surname><given-names>I.</given-names></name>
<name><surname>Papert</surname><given-names>S.</given-names></name>
</person-group> (Eds.), <source>Constructionism</source>. (pp. <fpage>1</fpage>–<lpage>11</lpage>). <publisher-loc>Norwood, NJ</publisher-loc>: <publisher-name>Ablex</publisher-name>.</citation>
</ref>
<ref id="bibr32-0013189X12463051">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Pea</surname><given-names>R. D.</given-names></name>
<name><surname>Kurland</surname><given-names>D. M.</given-names></name>
</person-group> (<year>1984</year>). <article-title>On the cognitive effects of learning computer programming</article-title>. <source>New Ideas in Psychology</source>, <volume>2</volume>, <fpage>137</fpage>–<lpage>168</lpage>.</citation>
</ref>
<ref id="bibr33-0013189X12463051">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Pea</surname><given-names>R. D.</given-names></name>
<name><surname>Soloway</surname><given-names>E.</given-names></name>
<name><surname>Spohrer</surname><given-names>J. C.</given-names></name>
</person-group> (<year>1987</year>). <article-title>The buggy path to the development of programming expertise</article-title>. <source>Focus on Learning Problems in Mathematics</source>, <volume>9</volume>, <fpage>5</fpage>–<lpage>30</lpage>.</citation>
</ref>
<ref id="bibr34-0013189X12463051">
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Repenning</surname><given-names>A.</given-names></name>
<name><surname>Webb</surname><given-names>D.</given-names></name>
<name><surname>Ioannidou</surname><given-names>A.</given-names></name>
</person-group> (<year>2010</year>). <article-title>Scalable game design and the development of a checklist for getting computational thinking into public schools</article-title>. In <conf-name>Proceedings of the 41st ACM Technical Symposium on Computer Science Education (SIGCSE ’10)</conf-name>, <fpage>265</fpage>–<lpage>269</lpage>. <publisher-loc>New York, NY</publisher-loc>: <publisher-name>ACM Press</publisher-name>.</citation>
</ref>
<ref id="bibr35-0013189X12463051">
<citation citation-type="web">
<collab>Royal Society</collab>. (<year>2012</year>). <article-title>Shut down or restart: The way forward for computing in UK schools</article-title>. Retrieved from <ext-link ext-link-type="uri" xlink:href="http://royalsociety.org/education/policy/computing-in-schools/report/">http://royalsociety.org/education/policy/computing-in-schools/report/</ext-link></citation>
</ref>
<ref id="bibr36-0013189X12463051">
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Simon</surname><given-names>B.</given-names></name>
<name><surname>Chen</surname><given-names>T.</given-names></name>
<name><surname>Lewandowski</surname><given-names>G.</given-names></name>
<name><surname>McCartney</surname><given-names>R.</given-names></name>
<name><surname>Sanders</surname><given-names>K.</given-names></name>
</person-group> (<year>2007</year>, <month>March</month>). <source>Commonsense computing: What students know before we teach (Episode 1: Sorting)</source>. <conf-name>Paper presented at the Second International Workshop on Computing Education Research</conf-name>, <conf-loc>Canterbury, UK</conf-loc>.</citation>
</ref>
<ref id="bibr37-0013189X12463051">
<citation citation-type="confproc">
<person-group person-group-type="author">
<name><surname>Werner</surname><given-names>L.</given-names></name>
<name><surname>Denner</surname><given-names>J.</given-names></name>
<name><surname>Campe</surname><given-names>S.</given-names></name>
<name><surname>Kawamoto</surname><given-names>D. C.</given-names></name>
</person-group> (<year>2012</year>). <article-title>The Fairy performance assessment: Measuring computational thinking in middle school</article-title>. In <conf-name>Proceedings of the 43rd ACM Technical Symposium on Computer Science Education (SIGCSE ’12)</conf-name>, <fpage>215</fpage>-<lpage>220</lpage>. <publisher-loc>New York, NY</publisher-loc>: <publisher-name>ACM</publisher-name>.</citation>
</ref>
<ref id="bibr38-0013189X12463051">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Wilson</surname><given-names>C.</given-names></name>
<name><surname>Guzdial</surname><given-names>M.</given-names></name>
</person-group> (<year>2010</year>). <article-title>How to make progress in computing education</article-title>. <source>Communications of the ACM</source>, <volume>53</volume>(<issue>5</issue>), <fpage>35</fpage>–<lpage>37</lpage>.</citation>
</ref>
<ref id="bibr39-0013189X12463051">
<citation citation-type="book">
<person-group person-group-type="author">
<name><surname>Wilson</surname><given-names>C.</given-names></name>
<name><surname>Sudol</surname><given-names>L. A.</given-names></name>
<name><surname>Stephenson</surname><given-names>C.</given-names></name>
<name><surname>Stehlik</surname><given-names>M.</given-names></name>
</person-group> (<year>2010</year>). <source>Running on empty: The failure to teach K-12 computer science in the digital age</source>. <publisher-loc>New York, NY</publisher-loc>: <publisher-name>The Association for Computing Machinery and the Computer Science Teachers Association</publisher-name>.</citation>
</ref>
<ref id="bibr40-0013189X12463051">
<citation citation-type="journal">
<person-group person-group-type="author">
<name><surname>Wing</surname><given-names>J.</given-names></name>
</person-group> (<year>2006</year>). <article-title>Computational thinking</article-title>. <source>Communications of the ACM</source>, <volume>49</volume>(<issue>3</issue>), <fpage>33</fpage>–<lpage>36</lpage>.</citation>
</ref>
<ref id="bibr41-0013189X12463051">
<citation citation-type="web">
<person-group person-group-type="author">
<name><surname>Wing</surname><given-names>J.</given-names></name>
</person-group> (<year>2011</year>). <article-title>Research notebook: Computational thinking—What and why?</article-title> <source>The Link Magazine</source>, <season>Spring</season>. <publisher-name>Carnegie Mellon University</publisher-name>, <publisher-loc>Pittsburgh</publisher-loc>. Retrieved from <ext-link ext-link-type="uri" xlink:href="http://link.cs.cmu.edu/article.php?a=600">http://link.cs.cmu.edu/article.php?a=600</ext-link></citation>
</ref>
</ref-list>
</back>
</article>