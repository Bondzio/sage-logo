<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  PUBLIC "-//NLM//DTD Journal Publishing DTD v2.3 20070202//EN" "journalpublishing.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article">
<front>
<journal-meta>
<journal-id journal-id-type="publisher-id">PIG</journal-id>
<journal-id journal-id-type="hwp">sppig</journal-id>
<journal-title>Proceedings of the Institution of Mechanical Engineers, Part G: Journal of Aerospace Engineering</journal-title>
<issn pub-type="ppub">0954-4100</issn>
<issn pub-type="epub">2041-3025</issn>
<publisher>
<publisher-name>SAGE Publications</publisher-name>
<publisher-loc>Sage UK: London, England</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="doi">10.1177/0954410011417347</article-id>
<article-id pub-id-type="publisher-id">10.1177_0954410011417347</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Articles</subject>
</subj-group>
</article-categories>
<title-group>
<article-title>Automated conflict resolution, arrival management, and weather avoidance for air traffic management</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<name><surname>Erzberger</surname><given-names>H</given-names></name>
<xref ref-type="aff" rid="aff1-0954410011417347">1</xref>
<xref ref-type="aff" rid="aff2-0954410011417347">2</xref>
<xref ref-type="corresp" rid="corresp1-0954410011417347">*</xref>
</contrib>
<contrib contrib-type="author">
<name><surname>Lauderdale</surname><given-names>T A</given-names></name>
<xref ref-type="aff" rid="aff1-0954410011417347">1</xref>
</contrib>
<contrib contrib-type="author">
<name><surname>Chu</surname><given-names>Y-C</given-names></name>
<xref ref-type="aff" rid="aff3-0954410011417347">3</xref>
</contrib>
</contrib-group>
<aff id="aff1-0954410011417347"><label>1</label>NASA Ames Research Center, Moffett Field, California, USA</aff>
<aff id="aff2-0954410011417347"><label>2</label>Electrical Engineering Department, University of California, Santa Cruz, California, USA</aff>
<aff id="aff3-0954410011417347"><label>3</label>Aerospace Computing, Inc., NASA Ames Research Center, Moffett Field, California, USA</aff>
<author-notes>
<corresp id="corresp1-0954410011417347">NASA Ames Research Center, Mail Stop 210-10, Building N210, Room 230, PO Box 1, Moffett Field, CA 94035-0001, USA. email: <email>Heinz.Erzberger@nasa.gov</email></corresp>
</author-notes>
<pub-date pub-type="epub-ppub">
<month>8</month>
<year>2012</year>
</pub-date>
<volume>226</volume>
<issue>8</issue>
<fpage>930</fpage>
<lpage>949</lpage>
<history>
<date date-type="received"><day>5</day><month>4</month><year>2011</year></date>
<date date-type="accepted"><day>28</day><month>6</month><year>2011</year></date>
</history>
<permissions>
<copyright-statement>© Authors 2011</copyright-statement>
<copyright-year>2011</copyright-year>
<copyright-holder content-type="society">Institution of Mechanical Engineers</copyright-holder>
</permissions>
<abstract>
<p>This article describes a unified solution to three types of separation-assurance problems that occur in en-route airspace: separation conflicts, arrival sequencing, and weather-cell avoidance. Algorithms for solving these problems play a key role in the design of future air traffic management systems such as the US's NextGen. Because these problems can arise simultaneously in any combination, it is necessary to develop integrated algorithms for solving them. A unified and comprehensive solution to these problems provides the foundation for a future air traffic management system that requires a high level of automation in separation assurance. This article describes the three algorithms developed for solving each problem and then shows how they are used sequentially to solve any combination of these problems. The first set of algorithms resolves loss-of-separation conflicts. It generates multiple resolutions for each conflict and then selects the one giving the least delay. Two new algorithms, one for sequencing and merging of arrival traffic, referred to as the arrival manager, and the other for weather-cell avoidance are presented. Because these three problems constitute a substantial fraction of the workload of en-route controllers, integrated algorithms to solve them is a basic requirement for automated separation assurance. This article also reviews the advanced airspace concept, a proposed design for a ground-based system that postulates redundant systems for automated separation assurance in order to achieve both high levels of safety and airspace capacity. It is proposed that automated separation assurance be introduced operationally in several steps, each step reducing controller workload further while increasing airspace capacity. A fast time simulation was used to determine performance statistics of the algorithm at up to 3× current traffic levels.</p>
</abstract>
<kwd-group>
<kwd>separation assurance</kwd>
<kwd>air traffic management</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="sec1-0954410011417347"><title>1 INTRODUCTION</title>
<p>The design of the future US air traffic system, referred to as NextGen, is the subject of current research at universities and research centres around the country. Although system concepts continue to evolve as research progresses, it is likely that the design will include higher levels of automation in separation assurance. If such an approach were adopted, it would be a significant change from the current method of separation assurance, which is largely performed by controllers. The major challenge in designing a system that depends on automation for making safety-critical decisions is demonstrating that it can be made as safe or safer than the current method over a wide range of operating conditions and traffic densities. A postulated system, referred to as the advanced airspace concept (AAC), addresses the safety issues associated with automated separation assurance by incorporating two independent systems for conflict detection and resolution [<bold><xref ref-type="bibr" rid="bibr1-0954410011417347">1</xref></bold>]. One element of this system is designed to handle conflicts predicted to occur in the range of approximately 2–20 min. It would be the mainstay for solving separation assurance and related problems including arrival sequencing and weather-cell avoidance. This element can be considered the strategic problem solver in AAC and is referred to as the Autoresolver. Its design and performance for resolving conflicts in en-route airspace are described in several papers [<bold><xref ref-type="bibr" rid="bibr2-0954410011417347">2</xref></bold>, <bold><xref ref-type="bibr" rid="bibr3-0954410011417347">3</xref></bold>]. The new functions as well as performance enhancements of existing functions described in this article have been integrated into the Autoresolver suite of software.</p>
<p>The second separation-assurance element in AAC focuses exclusively on handling tactical conflicts, defined as those with times to loss of separation of less than approximately 3 min. The time ranges overlap slightly, because other factors besides times to first loss determine the transition to the second element. The purpose of the second element is to provide a safety net for those infrequently occurring situations when conflicts are not detected and/or resolved strategically in a timely manner by the Autoresolver. This element is referred to by the acronym TSAFE, which stands for <italic>T</italic>actical <italic>S</italic>eparation <italic>A</italic>ssured <italic>F</italic>light <italic>E</italic>nvironment. It should not be confused with the Traffic Advisory and Collision Avoidance System, TCAS, which is an in-service system for collision avoidance installed in commercial airliners. The algorithmic design and operational concept for TSAFE are given in reference [<bold><xref ref-type="bibr" rid="bibr4-0954410011417347">4</xref></bold>]. The two systems differ substantially in their analytical formulation as well as in their software and operational implementation. They are implemented using separate software and hardware to ensure TSAFE's independence of operation during a failure of the Autoresolver. Furthermore, the software implementation of TSAFE can be substantially less complex than that of the Autoresolver, since TSAFE's only function is to detect and resolve near term conflicts.</p>
<p>Operational implementation of a system for automated separation assurance requires an air-ground data link that allows the ground-based AAC systems to uplink solution trajectories directly into systems onboard aircraft. Furthermore, in order to achieve the full safety benefits of the two independent separation-assurance elements in AAC, it is also desirable to have available two independent data links for exclusive use by each of the two elements, one dedicated to up-linking strategic resolutions and a separate one dedicated to up-linking tactical or TSAFE resolutions. Such independent data links will become available in the next few years. A conventional voice link will continue to be required in order for controllers to accommodate unequipped aircraft and to handle emergency situations for all types of aircraft.</p>
<p>A simplified diagram of the elements comprising the architecture of the AAC is shown in <xref ref-type="fig" rid="fig1-0954410011417347">Fig. 1</xref>. It should be noted that TCAS (not shown in <xref ref-type="fig" rid="fig1-0954410011417347">Fig. 1</xref>) is also assumed to be a part of the complete separation-assurance system. A safety analysis using a fault-tree method was carried out for this system architecture [<bold><xref ref-type="bibr" rid="bibr5-0954410011417347">5</xref></bold>]. The analysis obtained a very low probability of collision risk at up to 3× current levels. Further studies of collision risk using different methods are in progress.
<fig id="fig1-0954410011417347" position="float"><label>Fig. 1</label><caption><p>Architecture of AAC</p></caption><graphic xlink:href="10.1177_0954410011417347-fig1.tif"/></fig></p>
</sec>
<sec id="sec2-0954410011417347"><title>2 REVIEW OF INITIAL AUTORESOLVER DESIGN AND FEEDBACK FROM USERS</title>
<p>Initially, the Autoresolver was developed to be a software system for resolving loss-of-separation conflicts for all types of traffic, including arrivals. The design of the algorithm and initial performance results are described in reference [<bold><xref ref-type="bibr" rid="bibr2-0954410011417347">2</xref></bold>]. Farley and Erzberger [<bold><xref ref-type="bibr" rid="bibr3-0954410011417347">3</xref></bold>] and Kupfer <italic>et al.</italic> [<bold><xref ref-type="bibr" rid="bibr6-0954410011417347">6</xref></bold>] conducted performance evaluations of the algorithm for a range of traffic loads and several en-route centres using fast-time simulations. Prevot <italic>et al.</italic> [<bold><xref ref-type="bibr" rid="bibr7-0954410011417347">7</xref></bold>] used the Autoresolver to conduct human-in-the-loop simulations that focused on evaluating automated separation-assurance concepts for future air-traffic management systems.</p>
<p>Before describing the new functions incorporated into the Autoresolver, it is instructive to briefly review the original design approach, which remains largely unchanged. The input to the Autoresolver is a list of conflicts generated by a separate system, referred to as a conflict probe. An analytical formulation that forms the basis for a conflict probe algorithm and its software implementation is given in reference [<bold><xref ref-type="bibr" rid="bibr8-0954410011417347">8</xref></bold>]. A conflict probe detects future loss of separation between two aircraft that are predicted to come within 5 nautical miles horizontally and 1000 ft vertically. Its design is optimized for detecting potential conflicts at 8 min and longer to first loss of separation. The conflict probe updates a list of conflict pairs at a cyclic rate synchronized to the update cycle of the surveillance system, typically every 12 s in en-route airspace. The list of aircraft conflict pairs is usually ordered by predicted time to first loss of separation, where the earliest predicted conflicts are at the top of the list. The Autoresolver then attempts to resolve newly detected conflicts on the list in the priority of time to first loss. Resolutions of conflicts with times to first loss greater than a certain threshold time are deferred to a later update cycle. Threshold times range from 8 min for purely en-route conflicts to 20 min for arrivals. These are nominal times that depend on the prediction accuracy of the conflict probe as well as operational experience. An 8-min threshold for issuing resolutions has been found to provide an acceptable compromise between the benefits of issuing resolution as early as possible and the costs of resolutions that would later turn out to have been false alarms and would therefore have been unnecessary. Safety is not an issue at 8 min since that provides adequate time for pilots to execute the resolution manoeuvres.</p>
<p>In addition to times to first loss, the Autoresolver uses detailed characteristics of the conflict encounter in its resolution logic. These characteristics, which are also provided by the conflict probe, include aircraft types, current aircraft location coordinates, flight plans, speeds, encounter angles, and airspace boundaries, as well as other information that must be considered in generating a resolution trajectory. First, procedural logic, analogous to an expert system, determines a sequence of trial resolution manoeuvres, which, based on experience, are most likely to result in an acceptable as well as efficient resolution trajectory. Second, the Autoresolver uses analytical formulas and heuristics to calculate the parameters of a simplified resolution trajectory for each of the trial manoeuvres in the set. The simplified trajectory includes a segment that returns the manoeuvred aircraft back to its original flight plan at a reasonable distance downrange of the conflict. It is important to note that the calculations that generate the simplified trajectory do not require the use of atmospheric conditions such as wind speed and temperature, although such conditions could be included in the future. The parameters that specify the simplified trajectory are sufficiently complete to provide all the information that a trajectory engine would need to determine a resolution trajectory that can be executed by the target aircraft.</p>
<p>In the third step, the Autoresolver sends the simplified trajectory parameters to a trajectory engine that computes the trial resolution trajectory. A trajectory engine is a complex and computationally intensive software system that simulates in fast time the flight of an aircraft using detailed models of aircraft dynamics and performance. It also has access to and processes a real time model of the atmosphere, which includes wind vector, pressure and temperature at three dimensional grid points of the airspace. The Autoresolver has been designed to be independent of a specific trajectory engine and has worked successfully with three different engines in use at NASA Ames Research Center.</p>
<p>In the fourth step, the Autoresolver sends the trial resolution trajectory to a trial conflict probe that determines if the trajectory solves the conflict and does not introduce new conflicts unintentionally. Such unintentional conflicts are referred to as secondary trajectory conflicts and, if found, are cause for rejecting the trajectory. To account for trajectory prediction and execution uncertainty, a horizontal buffer distance, nominally 2 nautical miles, is added to the required minimum distance of 5 nautical miles when generating the trial resolution trajectories. The choice of buffer distance involves a tradeoff between minimizing delays introduced by the resolution manoeuvre and the potential additional delays and pilot workload introduced when a conflict reappears later, requiring a second resolution manoeuvre. One can think of the buffer distance as the cost of uncertainty in the prediction of conflicts and the limited accuracy with which an aircraft can follow a resolution trajectory. In en-route airspace, the buffer has negligible effect on throughput.</p>
<p>Thus, at this stage of the resolution process, a critical decision point has been reached. If the trial trajectory resolves the primary conflict and has not introduced secondary conflicts, the Autoresolver has successfully generated a candidate resolution trajectory. This trajectory can be issued to the conflict aircraft by a controller or automated agent. If, however, the trajectory has failed to resolve the conflict, the Autoresolver returns to the second step and starts the resolution process again using the next trial manoeuvre in the set. This iterative process continues until a successful resolution trajectory is found or until all available options have been exhausted. In the unlikely latter case, certain fallback options come into play as described more fully in reference [<bold><xref ref-type="bibr" rid="bibr2-0954410011417347">2</xref></bold>]. For example, if the Autoresolver is working on a conflict with less than 5 min to first loss of separation and fails to find a resolution that is free of secondary conflicts, it invokes the option to reduce the conflict-free resolution horizon to 6 min. By shortening the horizon, the number of aircraft that can cause secondary conflicts is reduced, thus making conflict-free resolutions easier to find, but at the cost of creating a new conflict at a later time. The resulting new conflict is then solved by an additional manoeuvre issued to the aircraft that was previously an unsolved secondary conflict. While this option is still available in the current version of the Autoresolver, it has not come into play in simulation tests since the most recent enhancements described in the following sections where completed.</p>
<p>For en-route conflicts with times to first loss between 2 and 8 min, the Autoresolver requires only a few trial iterations to find a successful resolution trajectory. Simulation tests show a gradual increase in the number of iterations with increasing traffic while still resolving all detected conflicts at levels up to 3× current traffic levels.</p>
<p>Feedback from experimental users and evaluators of the Autoresolver revealed both strengths and weaknesses of the initial version of the algorithm. While users were generally satisfied with the ability of the Autoresolver to generate resolution trajectories for all types of conflicts at high traffic levels, they requested that the Autoresolver be revised to routinely supply multiple types of resolutions for each conflict when possible. Experimenters conducting human-in-the-loop simulations using the Autoresolver discovered that controllers and pilots wanted the flexibility to choose from horizontal, vertical, and speed resolutions. Users also pointed out the need for trajectories that avoid convective weather cells. The combination of high traffic density and convective weather can create complex re-routing problems. Automation should be designed to solve these problems without creating conflicts. Finally, a new algorithm that can efficiently manage arrival traffic subject to time-based metering and in-trail spacing constraints was needed.</p>
</sec>
<sec id="sec3-0954410011417347"><title>3 NEW AUTORESOLVER</title>
<p>These additional requirements led to the development of two new algorithms and modifications to the original resolution algorithm. Together, they comprise the upgraded Autoresolver described in this article. A diagram of the Autoresolver with blocks representing the algorithms that generate solutions for the three problems is shown in <xref ref-type="fig" rid="fig2-0954410011417347">Fig. 2</xref>. Also, shown in the figure are the primary inputs to the algorithms from external sources. All three algorithms interact with the trial trajectory engine and trial conflict probe in the process of generating resolution trajectories. In the figure, TMA refers to the traffic management advisor, a system for sequencing and scheduling arrivals installed at large airports in the US.
<fig id="fig2-0954410011417347" position="float"><label>Fig. 2</label><caption><p>Functional diagram of Autoresolver</p></caption><graphic xlink:href="10.1177_0954410011417347-fig2.tif"/></fig></p>
</sec>
<sec id="sec4-0954410011417347"><title>4 RESOLUTION GENERATOR</title>
<p>Instead of stopping the resolution process after finding the first successful resolution as originally designed, the resolution algorithm was modified to continue searching for additional resolutions using eligible alternatives in horizontal, altitude, and speed manoeuvres. Furthermore, the search for additional resolutions was extended to both aircraft in the conflict pair. Initially, there was concern that the additional search for resolutions would result in unacceptable increases in computational workload and would cause the maximum time allowed to completing the resolution process to be exceeded. However, evaluations of the modified algorithm in both fast and real-time simulations have shown that the time to perform the computations remains within acceptable limits.</p>
<p>The generation of multiple resolutions for each conflict has made it possible to optimize the choice of resolution trajectories. An economically important performance criterion to be minimized is the time delay introduced by a resolution trajectory. Thus, the algorithm compares the time delay of all available trajectories and chooses the one with the smallest time delay. As in the original version, the algorithm retains a set of rules for excluding specific manoeuvre types and/or specific aircraft from being manoeuvred under defined conditions. However, the algorithm gains the flexibility to use non-preferred resolution trajectories in circumstances where these trajectories are the only ones available to resolve the conflict. The multiple resolutions, illustrated in <xref ref-type="fig" rid="fig3-0954410011417347">Fig. 3</xref>, comprise several types of horizontal path, altitude, and speed resolutions. Horizontal trajectories yield the greatest number of new resolution types and are illustrated in <xref ref-type="fig" rid="fig3-0954410011417347">Fig. 3</xref>(a). The following subsections describe the resolution types in further detail.
<fig id="fig3-0954410011417347" position="float"><label>Fig. 3</label><caption><p>Resolution trajectories: (a) horizontal resolution types, (b) altitude resolution types, and (c) speed resolution types</p></caption><graphic xlink:href="10.1177_0954410011417347-fig3.tif"/></fig></p>
<sec id="sec5-0954410011417347"><title>4.1 Direct-To</title>
<p>The first type of horizontal resolution is called Direct-To. In previous work, Direct-To was developed as a decision support tool for controllers to help resolve conflicts and improve flight efficiency [<bold><xref ref-type="bibr" rid="bibr9-0954410011417347">9</xref></bold>]. It attempts to solve a conflict by taking an aircraft directly to a downstream waypoint, thus bypassing a dogleg in the flight plan. This type can only be successful if there is a dogleg to bypass. Because doglegs are relatively common in the current route structure, experiments have shown that Direct-To resolutions succeed at a surprisingly high rate. The probability of success is further increased when both aircraft are eligible for Direct-To solutions. A Direct-To resolution is highly desirable since it yields a net time saving (negative time delay) for the conflict aircraft that is assigned to perform it. It is usually the winner of the minimum-delay comparison test for the best resolution.</p>
</sec>
<sec id="sec6-0954410011417347"><title>4.2 Elliptic path stretch</title>
<p>A path-stretch method, referred to as the elliptic path-stretch algorithm, provides the second type of horizontal resolution trajectories. This method has proven to yield the greatest success rate of all horizontal resolution methods. While effective for all types of conflict encounters, it is by far the most important manoeuvre used for handling arrival aircraft. The algorithm attempts to generate path-stretch resolutions for each conflict aircraft in both left- and right-turn directions relative to the current aircraft heading. This process can yield up to four resolution trajectories. Analytical formulas for the algorithm can be found in reference [<bold><xref ref-type="bibr" rid="bibr2-0954410011417347">2</xref></bold>].</p>
<p>Elliptic path stretches play a critically important role in the performance of the Autoresolver and are therefore briefly reviewed here with the help of <xref ref-type="fig" rid="fig4-0954410011417347">Fig. 4</xref>. They are characterized by two parameters; the first is a specified delay and the second is the vector angle of the manoeuvre. These two parameters define the location of the auxiliary waypoint, as shown in <xref ref-type="fig" rid="fig4-0954410011417347">Fig. 4</xref>. The word elliptic refers to the fact that the locus of waypoints for a specified value of delay traces out an ellipse whose two foci are the initial location of the aircraft and the location of the return waypoint. This formulation has the further advantage of yielding an analytical formula for the coordinates of the auxiliary waypoint as a function of the two parameters. The formula thus yields all possible path stretches that generate a specified amount of delay. It is used for generating sets of arrival trajectories that are required to cross an arrival fix at a specified time or with a specified delay. The second degree of freedom provided by the vector-angle parameter in the formula is primarily used to help resolve secondary conflicts while holding the delay constant. Note, however, that the path stretches calculated by the algorithm do not explicitly resolve a conflict. The trial trajectory engine and trial conflict probe are required to first generate and then check the trajectory corresponding to a set of path-stretch parameters for conflicts. Several iterations on these parameters are generally required to clear a conflict. The iteration starts with the specified delay and a vector angle yielding a symmetric path stretch (<xref ref-type="fig" rid="fig4-0954410011417347">Fig. 4</xref>). Then, if secondary conflicts are encountered, the vector angle is increased in increments while holding the delay at a fixed value. Thus, the elliptic path-stretch formulation used in combination with the trial trajectory engine and trial conflict probe provides a method for computing trajectories that are simultaneously conflict-free and meet a specified arrival time. For en-route conflicts that are not constrained by arrival time, the two degrees of freedom in the algorithm help find a resolution with the least delay that resolves a primary conflict while also avoiding secondary conflicts.
<fig id="fig4-0954410011417347" position="float"><label>Fig. 4</label><caption><p>Constant delay elliptic path stretch algorithm</p></caption><graphic xlink:href="10.1177_0954410011417347-fig4.tif"/></fig></p>
</sec>
<sec id="sec7-0954410011417347"><title>4.3 Horizontal vector turn</title>
<p>The horizontal vector turn (hvt) algorithm described in reference [<bold><xref ref-type="bibr" rid="bibr4-0954410011417347">4</xref></bold>] was originally designed to resolve short-range conflicts where it is important to include the effects of turn rate limits in the generation of the resolution manoeuvre. Turn rate limits are a function of the airspeed and the maximum permitted bank angle. This algorithm was developed to support a separate and independent system of separation assurance, TSAFE, that would come into play whenever the Autoresolver failed to detect or resolve a conflict for which the time to first loss had become less than approximately 2 min. Recently, the algorithm was adapted for use in the Autoresolver to resolve conflicts over larger time ranges while retaining its ability to resolve short-range conflicts. It replaces the analytical turn algorithm [<bold><xref ref-type="bibr" rid="bibr10-0954410011417347">10</xref></bold>] used in earlier versions of the Autoresolver for resolving similar types of conflicts. Simulation tests found the analytical turn algorithm often to be ineffective in resolving conflicts at close range, in part because it assumed heading changes could be made instantaneously. The hvt algorithm determines the minimum heading change required to achieve a specified separation distance, assuming both conflict aircraft are flying at constant airspeed. If the algorithm finds that loss of separation cannot be avoided because of turn rate limits and/or the proximity of the conflict aircraft, the algorithm selects the manoeuvre that maximizes the minimum separation. Therefore, it can also generate collision avoidance manoeuvres, thus contributing to safety. Furthermore, the algorithm has the ability to generate cooperative manoeuvres that both conflict aircraft perform simultaneously. The cooperative manoeuvre option can avoid loss of separation at close range when single aircraft manoeuvres would result in loss of separation. Therefore, the hvt algorithm substantially extends the flexibility of the Autoresolver by being able to resolve conflicts over both short and long time ranges as well as for situations where loss of separation is unavoidable.</p>
<p>In its application to TSAFE, the hvt algorithm is used standalone to resolve a conflict by generating a heading change followed by straight-line flight. It was not designed to generate a segment that returns the aircraft to its original flight plan. For its use in the Autoresolver, the hvt algorithm has been modified to generate a return path via an auxiliary waypoint and a return waypoint, as illustrated in <xref ref-type="fig" rid="fig5-0954410011417347">Fig. 5</xref>. The hvt algorithm provides the coordinates of a point on the straight-line segment where minimum separation of the resolution manoeuvre is reached. Then, the auxiliary waypoint is located on this straight-line segment an incremental distance beyond this point. The incremental distance, taken to be the equivalent of about 30 s of flight time, ensures that a turn manoeuvre starting at the auxiliary waypoint will not cause the original conflict to reappear. For the return waypoint preference is given to an existing waypoint on the flight plan that is at least twice the distance between the current location of the aircraft and the point where the conflict aircraft would have reached minimum separation in the absence of the resolution manoeuvre. If no waypoint can be found within acceptable range limits on the existing flight plan, an additional waypoint is inserted into the flight plan to serve as the return waypoint.
<fig id="fig5-0954410011417347" position="float"><label>Fig. 5</label><caption><p>Adding auxiliary and return waypoints into hvt trajectory</p></caption><graphic xlink:href="10.1177_0954410011417347-fig5.tif"/></fig></p>
<p>With the locations of the auxiliary and return waypoints thus determined, the Trial Trajectory Generator and trial conflict probe are then used to determine if the trial resolution has resolved the original conflict and avoided the introduction of secondary conflicts. This process is repeated for all resolutions generated by the hvt algorithm, comprising up to eight candidate resolutions [<bold><xref ref-type="bibr" rid="bibr4-0954410011417347">4</xref></bold>]. Of the surviving resolutions, the one with the least time delay is retained and added to the set from which the resolution with the overall least time delay is selected.</p>
<p>Each conflict is first tested to determine if it meets eligibility conditions before it is submitted for resolution by the hvt algorithm. The two most important conditions involve time to loss of separation and the geometry of the horizontal flight plan. Only conflicts with less than ∼5 min to loss of separation are eligible to be submitted. Although no inherent time limits for the use of the algorithm exist, experience suggests that the path stretch and route off set (discussed below) methods are more appropriate for longer times to first loss than 5 min. In addition, the horizontal flight path is examined for the existence of heading change waypoints, referred to as doglegs, between the current aircraft position and the point of minimum separation. Total heading changes at these waypoints must be less than ∼5 degrees for the conflict to be eligible. This condition conforms to the assumption underlying the derivation of the hvt algorithm, as described in reference [<bold><xref ref-type="bibr" rid="bibr4-0954410011417347">4</xref></bold>].</p>
<p>Although the hvt and elliptic path-stretch resolutions illustrated in <xref ref-type="fig" rid="fig4-0954410011417347">Figs 4</xref> and <xref ref-type="fig" rid="fig5-0954410011417347">5</xref>, respectively, appear similar, they are different in concept. The hvt algorithm ensures that the trial resolution is conflict-free along the vector leg up to the auxiliary waypoint, thus reducing the dependence on the Trial Trajectory Generator and trial conflict probe to ensure that the trial resolution is conflict-free in this segment of the trial resolution trajectory. This implies that an hvt-generated trial resolution is more likely to be successful, which reduces the number of trajectory iterations needed to find a usable resolution. In comparison, the elliptic path-stretch method tries to solve a conflict indirectly by shifting the arrival time at the downstream return waypoint by a succession of trial delays. The path-stretch method is therefore completely dependent on the Trial Trajectory Generator and trial conflict probe to verify that a trial path stretch is conflict free.</p>
</sec>
<sec id="sec8-0954410011417347"><title>4.4 Route offset</title>
<p>Route offset was added to the set of horizontal-resolution manoeuvres implemented in the algorithm. It consists of a segment that is parallel to the current route of a conflict aircraft and displaced from it by a specified distance. The offset distance is typically chosen as 10 nautical miles. The conflict aircraft captures the offset segment <italic>via</italic> a transition vector nominally chosen as 30 degrees relative the current heading of the aircraft. The resulting intersection point defines the coordinates of the first waypoint. The length of the offset segment is increased in 50 nautical miles increments up to a maximum of 200 nautical miles until one is found that resolves the conflict. The trial trajectory engine and trial conflict probe must evaluate each trial offset manoeuvre to determine if the conflict has been cleared. A waypoint located at the end of the offset segment specifies the start of a recapture manoeuvre that takes the aircraft back to its original route. A conveniently located downstream waypoint on the existing route is chosen as the return waypoint that terminates the transition segment. The offset manoeuvre is limited to conflict aircraft that are on a straight-line route segment for at least 100 nautical miles. Both left- and right-sided offset manoeuvres are attempted for each eligible aircraft.</p>
<p>Navigation systems with built-in route offset capabilities, available on some aircraft, are the primary motivation for using these manoeuvres in conflict resolution. A controller can issue an offset manoeuvre to a pilot by specifying only the offset distance and its length. The pilot then easily enters these parameters into the navigation system. The convenience of this procedure is important in an operational environment where a data link is not available to communicate strings of numerical data such as the latitude and longitude of auxiliary waypoints. In simulation, the offset manoeuvres have proven to be effective in resolving certain types of eligible conflicts. For example, they can be effective for resolving in-trail overtake conflicts, where they create a passing lane for faster aircraft to pass a slower aircraft [<bold><xref ref-type="bibr" rid="bibr11-0954410011417347">11</xref></bold>]. The offset manoeuvre could be given preference over other options if the controller has to issue the resolution <italic>via</italic> voice communications rather than data link.</p>
<p>The parameters used to define a sequence of offset manoeuvres should be chosen to be compatible with the offset route functions built into specific types of area navigation systems. That will ensure the offset resolution manoeuvres are easily executable by the on-board navigation systems.</p>
</sec>
<sec id="sec9-0954410011417347"><title>4.5 Handling of induced weather cell conflicts</title>
<p>Avoiding penetration of convective weather cells is another constraint included in determining acceptable horizontal resolutions. Generally, the Autoresolver resolves a weather conflict prior to loss-of-separation conflicts. A separate algorithm (described in a later section) is designed specifically to avoid weather cells when they are the primary problem to be resolved. However, certain types of weather conflicts must be handled during the process of resolving loss-of-separation conflicts. Thus, it is possible that a trial horizontal resolution that resolves the primary conflict induces a new conflict with a weather cell. In that case, the algorithm rejects such a resolution and proceeds to generate additional trial resolutions in an attempt to eliminate both types. This process is similar to the way the algorithm handles induced secondary loss-of-separation conflicts. Another special case involves a weather-cell conflict that is detected down range of a close-in primary loss-of-separation conflict. Thus, for conflicts within 4 min to loss of separation followed by a down-stream weather conflict, the resolution generator gives priority to resolving the loss-of-separation conflict, ignoring the weather conflict for the time being. Occasionally, the weather conflict is resolved incidentally to the manoeuvre resolving the loss-of-separation conflict. That is referred to as a bonus resolution. If, however, the weather conflict remains unresolved, it is sent to the weather avoidance algorithm for resolution. The weather avoidance algorithm starts at the point on the trajectory that is clear of the loss-of-separation conflict. The final trajectory will be a concatenation of two manoeuvres, called a compound manoeuvre.</p>
</sec>
<sec id="sec10-0954410011417347"><title>4.6 Altitude resolutions</title>
<p><xref ref-type="fig" rid="fig3-0954410011417347">Figure 3</xref>(b) illustrates the three types of altitude resolutions the algorithm attempts to generate for each conflict. These types were included in the original version of the algorithm and are described in detail in reference [<bold><xref ref-type="bibr" rid="bibr2-0954410011417347">2</xref></bold>]. Note that the step altitude resolutions return the aircraft to its original flight-plan altitude after aircraft are clear of the conflict zone. The algorithm chooses an altitude resolution that is compatible with the flight phase of an aircraft. Thus, it assigns the first type shown in <xref ref-type="fig" rid="fig3-0954410011417347">Fig. 3</xref>(b) to an aircraft in cruise, the second to an aircraft during climb, and the third to an arrival aircraft that is close to its top of descent. Since the flight phases of the two conflict aircraft generally differ from each other, successful altitude resolutions for the two conflict aircraft can be any two combinations of these three types. For example, one aircraft in cruise and the other in a climb can yield up to three successful altitude resolutions. Pilot subjects in simulations pointed out the need for alternative altitude resolutions. When presented with a single type of altitude resolution such as a step climb generated by the original version of the algorithm, pilots often inquired if a step descent was available. There are various reasons for such requests, including a desire by a pilot to avoid turbulence and/or optimize fuel efficiency, factors not considered in the algorithm decision process.</p>
</sec>
<sec id="sec11-0954410011417347"><title>4.7 Speed resolutions</title>
<p>Speed-change resolutions complete the repertoire of resolution types the algorithm attempts to generate for each conflict. The algorithm can generate two types of speed resolution, as illustrated in <xref ref-type="fig" rid="fig3-0954410011417347">Fig. 3</xref>(c). In one type, the aircraft whose speed is changed returns to the original speed after the conflict has been cleared. In the second type, applicable only for arrival aircraft that are close to the top of descent, the aircraft starts the speed change in cruise and maintains the change for the duration of the descent. Descent speed profiles consist of a constant Mach segment starting at the top of descent followed by a constant calibrated airspeed (CAS) segment that continues to the bottom of the descent. The algorithm iterates on the Mach/CAS parameters in combination with the trial trajectory engine and trial conflict probe to search for a successful resolution. For slow descents, only a constant CAS segment may be necessary. These two types are unchanged from the original version of the algorithm. Similar to the handling of the altitude resolution types, the algorithm assigns a type based on the flight phase of the aircraft. Simulation tests have shown that attempted speed resolutions for aircraft in cruise flight seldom succeed and, even if they do, they are usually not the recommended resolution. However, the second type is effective for resolving conflicts between arrivals and is frequently the first choice among successful resolutions.</p>
</sec>
<sec id="sec12-0954410011417347"><title>4.8 Compound, cruise altitude change, and holding manoeuvres</title>
<p>Two additional resolution types (not shown in <xref ref-type="fig" rid="fig3-0954410011417347">Fig. 3</xref>) are occasionally used in specific situations to solve arrival problems. First, a compound manoeuvre consisting of a path stretch and a descent speed reduction is used when a large delay is required to fit an arrival into a specified time slot. Second, for an aircraft currently in climb that has departed from a nearby airport and must be merged into an arrival stream, a reduction in cruise altitude is used for delay and conflict resolution. The reduction in average true airspeed resulting from the reduction in cruise altitude introduces delay into the trajectory that can help to resolve merging conflicts with other arrivals near the top-of-descent point.</p>
<p>Holding manoeuvres are sometimes necessary to solve certain types of traffic management problems. While holding is an indispensible tool for traffic management, it is not considered a resolution manoeuvre and is therefore not included among the available resolution types. It could be added to handle special situations in future versions of the Autoresolver.</p>
</sec>
<sec id="sec13-0954410011417347"><title>4.9 Preference order for successful resolutions</title>
<p>The final step of the algorithm is to establish a preference order over the set of successful resolutions. While the primary criterion for the top choice is the resolution with the least delay, this criterion can be overruled by other factors, the most important of which are rules for choosing the preferred manoeuvre aircraft. Thus, in conflicts between arrivals and non-arrivals, non-arrivals are generally preferred over arrivals. An exception to this rule is made for an arrival that is close to its top of descent and for which a descent to a temporary altitude is in the set of successful resolutions. Another rule gives preference to an aircraft not previously manoeuvred for resolving a conflict over an aircraft that recently performed a resolution manoeuvre. Preference is also given to manoeuvring a climbing aircraft in conflict with an overflight. Finally, an aircraft close to an airspace boundary is usually exempted from performing a manoeuvre. Additional manoeuvre preference rules applicable to handling arrival conflicts are discussed in <xref ref-type="sec" rid="sec14-0954410011417347">section 5</xref>. Thus, the algorithm chooses the minimum time resolution that does not violate the preference rules. However, if no resolutions that obey these rules are available, then, as a last resort, the Autoresolver chooses the best available resolution that manoeuvres a non-preferred aircraft. Similarly, the algorithm chooses an operationally excluded manoeuvre type for a non-preferred aircraft if that is the only resolution available that will resolve the conflict.</p>
<p><xref ref-type="fig" rid="fig6-0954410011417347">Figure 6</xref> lists the maximum number of trial trajectories the resolution generator can attempt for each type of resolution, the maximum number of successful resolutions for each type and the categories of flights eligible for each type. The search for each type of resolution starts with the most desirable resolution of that type and often succeeds on the first trial. Additional trials are usually needed only if secondary conflicts are encountered. Path-stretch resolutions contribute the most trial trajectories since they require a search over two sets of parameters. Only in complex problems involving multiple secondary conflicts are a large number of trials required to find a successful path-stretch resolution. The number and diversity of resolution options available combined with the multiple time-opportunities for resolving conflicts ensure that all detected conflicts are resolved in en-route airspace at up to 3× the level of current maximum traffic densities. Using available processors, computation times required to generate resolutions have been completed within the update cycle times required in real time simulations. The Autoresolver also lends itself to a parallel processing architecture should a speed up of computations become necessary in the future.
<fig id="fig6-0954410011417347" position="float"><label>Fig. 6</label><caption><p>Resolution types and trial trajectories generated by resolution generator</p></caption><graphic xlink:href="10.1177_0954410011417347-fig6.tif"/></fig></p>
</sec>
<sec id="sec14-0954410011417347"><title>5 ARRIVAL MANAGER</title>
<p>The arrival manager performs arrival scheduling, sequencing, and conflict resolution. It generates a four-dimensional descent trajectory for each arrival using an available trial trajectory engine. The arrival manager has been designed to operate either stand-alone or in conjunction with a separate scheduling and metering system such as TMA, which is widely used to control arrival traffic at US airports [<bold><xref ref-type="bibr" rid="bibr12-0954410011417347">12</xref></bold>].</p>
<p>Arrival management requires that consecutive arrivals crossing an arrival fix be separated by a minimum time interval, Δ<italic>T</italic><sub>min</sub>. A predicted violation of Δ<italic>T</italic><sub>min</sub> defines a new type of conflict, referred to as a sequencing conflict. A sequencing conflict can occur only at a spatial location such as an arrival fix or merge point. The quantity, Δ<italic>T</italic><sub>min</sub>, referred to as an in-trail spacing constraint, is assumed specified by an arrival metering system such as TMA or by a controller. In general, Δ<italic>T</italic><sub>min</sub> is a variable that may depend on the types of aircraft in a sequence as well as on other factors. Its smallest usable value is around 1 min. Smaller values are likely to produce a loss-of-separation conflict, rendering it superfluous. Thus, arrival aircraft may be involved in either or both conventional loss-of-separation conflicts and sequencing conflicts simultaneously. The arrival manager resolves both types of conflicts while also attempting to meet an arrival fix crossing time, if one is specified by TMA. When operated in the stand-alone mode, the arrival manager generates trajectories that minimize delay to cross the arrival fixes subject only to the in-trail spacing constraint Δ<italic>T</italic><sub>min</sub>. In this mode, traffic flowing to different arrival fixes is treated as independent and uncoordinated streams, sometimes called free flow in current operational practice. Free flow may be appropriate in moderate traffic conditions. When arrival traffic at an airport is approaching landing capacity, however, the arrival manager and TMA should be operated as a coupled system in order to ensure that the flow at arrival fixes is properly coordinated. In the coupled mode, TMA provides arrival times to the arrival manager, which uses its meet-time and conflict-resolution algorithms to generate conflict-free descent trajectories. The arrival manager also enforces an in-trail spacing constraint in the coupled mode using either a minimum default value or a value specified by TMA. In conflicts between the two constraints, the arrival manager gives priority to in-trail over arrival time constraints.</p>
<p>Similar to TMA, the arrival manager uses a freeze horizon, nominally set to 20 min, to determine when an aircraft first becomes eligible for arrival sequencing. Instead or in addition, a distance-based freeze horizon, typically located on a 150-nautical mile arc distance from the arrival fix for jet aircraft, can also be specified. For all aircraft proceeding to an arrival fix, the trial trajectory engine, configured as a predictor, provides the arrival manager periodically (at least once per minute) with updated values of estimated times of arrival (ETAs) to the arrival fix. When the difference between the ETA of an aircraft and current time becomes less than the freeze horizon for the first time, the aircraft has crossed the freeze horizon and becomes eligible for arrival sequencing.</p>
<p>The arrival manager differentiates between aircraft that were sequenced conflict-free at an earlier time, such as aircraft A1, A2, and A3 in <xref ref-type="fig" rid="fig7-0954410011417347">Fig. 7</xref>, and those, such as aircraft A4 and A5, that have crossed the freeze horizon at the current scheduling time and have therefore become eligible for sequencing. Previously sequenced aircraft have frozen schedules (blue colour), which are referred to as scheduled times of arrival (STAs). Their arrival trajectories are usually not changed when new arrival aircraft cross the freeze horizon. The strategy of sequencing arrival aircraft only once after they have crossed the freeze horizon ensures stability of trajectories and fairness in the sequencing process. The ETAs used in the scheduling process at freeze time are referred to as the original ETAs (OETA). They are computed close to the time the aircraft cross the freeze horizon and determine the first-come-first-served sequence order. This process is similar to that used in TMA [<bold><xref ref-type="bibr" rid="bibr12-0954410011417347">12</xref></bold>].
<fig id="fig7-0954410011417347" position="float"><label>Fig. 7</label><caption><p>Scheduling process for new arrivals A4 and A5</p></caption><graphic xlink:href="10.1177_0954410011417347-fig7.tif"/></fig></p>
<p>A special case arises if at freeze time, the arrival manager finds that an arrival is in conflict with a weather cell on its current route to the arrival fix. In that case, the arrival manager first requests the weather avoidance algorithm, described in a later section, to re-route that arrival around the weather cell. Because the increased delay generated by the re-route is likely to yield an ETA that places the aircraft temporarily outside of the freeze horizon, the arrival manager defers freezing that aircraft until it again crosses the freeze horizon. It should be noted that the OETA at freeze time is reset to a value that includes the re-route delay.</p>
<p>The basic operation performed by the arrival manager is to merge all new aircraft that have crossed the freeze horizon at the current scheduling epoch into the set of frozen aircraft without causing separation or sequencing conflicts relative to each other or with frozen aircraft. The first step in this process is to find available time slots for them at the arrival fix. The OETAs of the new aircraft determine the initial order in which they are merged with the sequence of frozen aircraft. Then, the merged sequence is examined to identify sequencing conflicts between frozen and new aircraft and between pairs of new aircraft. In <xref ref-type="fig" rid="fig7-0954410011417347">Fig. 7</xref>, the OETA order of new aircraft A4 and A5 becomes the final order since they are adequately separated from frozen aircraft. However, that is not always the case as will be illustrated by an example described later.</p>
<p>The arrival manager then proceeds to resolve predicted separation conflicts starting with the aircraft that has the smallest OETA (is closest in time to the arrival fix) and continuing until the last of the new conflicts has been resolved. If the arrival manager succeeds in finding a trajectory that resolves both types of conflicts, it designates that aircraft as frozen and scheduled. Thus, after this process has been completed for all new aircraft, the STA time line shows only frozen aircraft. The arrival manager then waits for real time to advance to the next scheduling epoch. When that time is reached the arrival manager repeats the process for all new aircraft that have crossed the freeze horizon. The arrival manager performs this process for traffic flowing to all arrival fixes at an airport. Moreover, if jet, turboprop, and piston aircraft are assigned separate crossing altitudes, as is often the case, the arrival manager processes this traffic as independent streams.</p>
<p>Several rules and procedures direct the process of generating trajectories for each new aircraft. For either sequencing or combined sequencing and loss-of-separation conflicts, the arrival manager first determines the earliest time (STA<sub>min</sub>) for the aircraft to be scheduled that meets the required separation time constraint relative to the STAs of frozen aircraft and is equal to or greater than the earliest time an aircraft can reach the arrival fix. The trial trajectory engine is called to calculate the earliest time using the aircraft's fastest descent speed profile. STA<sub>min</sub> can be earlier or later than the OETA, although more often it will be later if frozen aircraft are close by and in front of an unscheduled aircraft. This is typical during an arrival traffic rush. Next, the arrival manager calls the trial trajectory engine to compute a meet-time trajectory that achieves the STA<sub>min</sub> and then the trial conflict probe to check for conflicts. Speed profile changes are tried first and if those fail, the elliptic path-stretch algorithm is used. If a trial trajectory meets the time and is conflict-free relative to trajectories of all frozen aircraft, it is frozen and becomes the arrival trajectory that can be uplinked to the aircraft. The arrival manager then proceeds to process the next-in-line new aircraft. On the other hand, if the trial plan trajectory that achieves STA<sub>min</sub> is found to produce a loss-of-separation conflict with a frozen aircraft, the resolution logic generates different trial trajectories at STA<sub>min</sub>, using the elliptic path-stretch algorithm. If none are conflict-free at STA<sub>min</sub>, the arrival manager increases the delay by a small increment and repeats the previous process. The first delay increment that yields a trial trajectory free of both types of conflicts terminates the process and results in acceptance of the trajectory. Here, it is important to note that because of the sequential procedure for processing and then freezing one new aircraft after another, conflicts generated in the resolution process between an aircraft currently being processed and aircraft not yet processed are ignored. It is only necessary to deconflict any new aircraft currently being processed against all previously processed and frozen aircraft. Thus, after the last new aircraft has been processed, all new aircraft that crossed the freeze horizon in the current scheduling epoch will have been scheduled and deconflicted against all other arrivals, both new and previously frozen ones. Controllers observing the conflict and scheduling status of newly frozen aircraft will see them conflict free.</p>
<p>New arrivals with only loss-of-separation conflicts are handled slightly differently. If such a conflict occurs between aircraft in the same stream class (i.e. aircraft assigned the same crossing altitude), the arrival manager asks the resolution generator to find resolutions appropriate for arrivals and then checks each conflict-free resolution for induced sequencing conflicts with any frozen aircraft in the same stream class. Thus, a pure loss-of-separation conflict may transform into a dual conflict. The arrival manager treats the most difficult such conflicts in the same way as sequencing conflicts.</p>
<p>The procedures described are illustrated in <xref ref-type="fig" rid="fig7-0954410011417347">Fig. 7</xref>, which shows both a time line plot and horizontal view of traffic converging on an arrival fix. Two new arrivals, A4 and A5, have crossed the freeze horizon and have become eligible for scheduling. The OETAs indicate they are not in sequencing conflict with the frozen aircraft A1–A3 but are in sequencing conflict with each other. By computing the time difference between the A5 OETA and the A4 OETA, the arrival manager determines that a sufficient time gap is available to try increasing the speed of A4 in order to resolve or partly resolve the sequencing conflict between A4 and A5. Using the trial trajectory engine and trial conflict probe, the arrival manager determines STA<sub>min</sub>, the earliest time A4 can cross the Arrival Fix within the speed envelope of the aircraft and without creating conflicts with frozen aircraft. This time becomes the STA for A4, as shown in the time line of <xref ref-type="fig" rid="fig7-0954410011417347">Fig. 7</xref>. The arrival manager then calculates the STA for A5 by adding Δ<italic>T</italic><sub>min</sub> to the STA of A4. Next, the arrival manager asks the resolution generator to find a conflict-free trajectory for A5 at the specified STA. In this case, a reduced-speed descent profile that meets the required conditions is found. After the scheduling process for all new arrivals is completed, the arrival manager waits for time to advance to the next scheduling update cycle.</p>
<p>The arrival manager has special functions to handle aircraft that appear in the arrival airspace well inside the freeze horizon. Such aircraft, called popups, are, of course, undesirable because they are generally difficult to merge into the frozen aircraft stream, but they cannot always be prevented. Several unplanned events contribute to their occurrence. For example, previously scheduled and frozen aircraft that have developed large trajectory tracking errors that produce conflicts with other on-time aircraft are classified as a type of popup. Onboard emergencies and weather diversions are other reasons for their occurrence. To handle them, the arrival manager begins using a slot-finder function that scans the scheduled times of frozen aircraft to locate the nearest available free time slot. An acceptable time slot must have at least a time gap of twice Δ<italic>T</italic><sub>min</sub> between frozen aircraft. After locating the earliest open time slot, the arrival manager requests the resolution generator to search for a feasible trajectory for that slot. If none is found the arrival manger tries the next available slot. Several such iterations may be necessary before a solution is found. These techniques are illustrated in <xref ref-type="fig" rid="fig8-0954410011417347">Figs 8</xref> and <xref ref-type="fig" rid="fig9-0954410011417347">9</xref> for an example popup A6. In the time line of <xref ref-type="fig" rid="fig8-0954410011417347">Fig. 8</xref>, the ETA of A6 falls between A1 and A2 in the frozen schedule. The frozen schedules of A1–A3 are spaced without excess time gaps, leaving no room for another aircraft to be inserted. The slot finder inserts A6 between A3 and A4, where a gap of sufficient length is located, resulting in a delay of approximately 2.5 min. With a trial STA known, the arrival manager requests a trajectory solution from the resolution generator. The first solution obtained matches the specified STA, but causes a conflict with A3, as illustrated in <xref ref-type="fig" rid="fig9-0954410011417347">Fig. 9</xref>. Iteration of the elliptic path-stretch algorithm results in a modified path stretch that resolves the conflict while retaining the specified STA.
<fig id="fig8-0954410011417347" position="float"><label>Fig. 8</label><caption><p>Finding a slot and an STA for popup A6</p></caption><graphic xlink:href="10.1177_0954410011417347-fig8.tif"/></fig>
<fig id="fig9-0954410011417347" position="float"><label>Fig. 9</label><caption><p>Iterating on elliptic path stretch to hit time slot conflict-free</p></caption><graphic xlink:href="10.1177_0954410011417347-fig9.tif"/></fig></p>
<p>The method for handling popups described above assumes the arrival manager is operating in the standalone mode. If it is connected to TMA, then the arrival manager could start with the STA provided by TMA. However, since this STA is not guaranteed conflict free, the arrival manager still may have to change it in order to avoid conflicts. Thus, the arrival manager's integrated slot finder and conflict resolution functions are also required in the TMA-connected mode.</p>
<p>A set of rules has been developed to determine the order of resolution of a list of conflicts. The highest level rule requires that arrival <italic>versus</italic> arrival conflicts within a stream class have priority over all other conflict types in the resolution process. Furthermore, the resolution process starts by resolving conflicts at the fix having the highest arrival traffic count at the airport with the most traffic in the Center. For example, at the Cleveland Center, the SE arrival fix for the stream class of jets to Detroit (DTW) often experiences the highest traffic demand and is therefore selected as the starting point for the resolution process.</p>
<p>While resolving the arrival conflicts in this stream class, secondary conflicts may be created with out-of-stream class traffic and with non-arrivals. These secondaries are treated as new conflicts that will be resolved in later steps. Next, conflicts in the turboprop stream class to the same arrival fix are resolved, followed by conflicts in the prop stream class to this fix. The same procedure is repeated for all remaining arrival fixes at this airport, where the order in which the fixes are selected is determined by their traffic-demand ranking. At each stage in this process, secondary conflicts with aircraft sequenced and deconflicted in previous steps are not permitted, while secondaries generated with traffic in stream classes not yet processed, and with overflights, are temporarily deferred. This process is repeated for all other airports in the Center, where the order of airports is determined by their rank based on traffic demand. At each scheduling epoch, the last step is to resolve the non-arrival conflicts. The conflicts resolved in the last step include the original set of non-arrival conflicts as well as deferred secondary conflicts between arrivals and non-arrivals that were created in the process of sequencing and deconfliction of the arrival traffic.</p>
<p>The order of processing arrivals to airports and arrival fixes in a Center, as described above, has the objective of reducing the overall complexity of scheduling and conflict resolution problems. By starting the scheduling and deconfliction of arrivals at the busiest airports and arrival fixes, the method ensures that any out-of-stream-class deferred conflicts generated by the process will involve arrivals to less busy fixes or airports where they are easier to resolve. For example, if scheduling a jet to a high-traffic arrival fix creates a deferred conflict with a turboprop at the same arrival fix, the deferred conflict is more likely easier to resolve, because traffic at turbo-prop arrival fixes is usually not as heavy as traffic at jet arrival fixes. In general, it is preferable to defer conflicts into lower traffic streams than into higher traffic streams. For the same reason arrivals to busier airports are processed before arrivals to less busy airports.</p>
</sec>
</sec>
<sec id="sec15-0954410011417347"><title>6 WEATHER AVOIDANCE</title>
<p>Convective weather, such as thunderstorms, poses a danger to aviation operations. Pilots will choose their flight plans to avoid flying through them if their location is known prior to departure. However, during the summer in certain areas of US airspace, convective weather cells can develop rapidly, often without much warning. The air traffic control system receives frequent updates of convective weather activity from the National Weather Service. Regions of convective weather are displayed in air traffic control facilities on weather monitors and are also shown on controllers' traffic displays. Controllers use the location of the cells and their predicted movement to re-route traffic around the cells. This activity contributes significantly to controller workload, especially when large numbers of flights are heading into impacted regions. The controller not only has to formulate a re-route plan for each impacted flight, but must do so without creating conflicts with surrounding traffic. Therefore, weather-cell and conflict avoidance are viewed as inseparable problems to controllers. Similarly, algorithms must also be designed to solve each problem without introducing a new problem or to solve both problems if they occur simultaneously.</p>
<p>The solution presented here is designed to avoid weather cells that are relatively close to the current position of an aircraft, in the time range of 4–30 min to penetration. For greater times to penetration, a strategic weather re-route system is assumed to have responsibility for re-routing traffic around weather. The 4–30-min time range is similar to that used in solving loss-of-separation conflicts, allowing reuse of some of the resolution techniques developed for resolving aircraft versus aircraft conflicts. Only horizontal manoeuvres for avoiding weather cells are presented here. Although pilots may choose to fly above the tops of cells when the cells are below the ceiling of an aircraft, this type of manoeuvre is not included in the current design. Such manoeuvres could be added to the design if accurate information on cell tops becomes available in real time.</p>
<p>A convection cell is assumed to be an irregularly shaped region of airspace, as shown in <xref ref-type="fig" rid="fig10-0954410011417347">Fig. 10</xref>. Frontal systems typically form a line of such cells, often narrowly separated. Here, it is assumed that cells separated less that about 15 nautical miles have been combined into a single larger cell before it is sent to the algorithm. Methods and criteria for merging cells continue to be investigated. A bit map is typically used to specify the area of the weather cell. Initially, an algorithm was developed that generated avoidance trajectories using the bitmap data in conjunction with separate weather-penetration-detection software. However, a more efficient approach consists of first fitting a polygon to the boundary of the bitmap weather cell. Then, an algorithm is designed to find a path around the polygon.
<fig id="fig10-0954410011417347" position="float"><label>Fig. 10</label><caption><p>Basic weather cell avoidance algorithm</p></caption><graphic xlink:href="10.1177_0954410011417347-fig10.tif"/></fig></p>
<p>An algorithm based on this approach is illustrated in <xref ref-type="fig" rid="fig10-0954410011417347">Fig. 10</xref> for a weather cell that can be avoided by a trajectory using a single auxiliary waypoint. The solution obtained is structurally similar to a path-stretch manoeuvre used in conflict resolution. The process starts by computing a ray tangent to the weather-cell polygon emanating from the current position of the aircraft. Open source software for computing such tangent rays is incorporated in the algorithm. A second ray emanating from a specified return waypoint in the backward direction and tangent to the polygon is also computed. The location of the auxiliary waypoint is defined as the intersection of the two tangent rays. The solution of two simultaneous linear equations determines the coordinates of the waypoint location. The path obtained is the shortest around the weather-cell polygon, given that only a single auxiliary waypoint can be used in the construction of the path. A second path in the opposite turn direction is also computed, and then the shorter of the two paths is chosen as the avoidance trajectory.</p>
<p>The auxiliary- and return-waypoint coordinates are sent to the trial trajectory engine and trial conflict probe to generate the avoidance trajectory and check it for induced conflicts. If a conflict is detected within the resolution time horizon (typically 8 min for non-arrivals and 20 min for arrivals), as illustrated in <xref ref-type="fig" rid="fig11-0954410011417347">Fig. 11</xref>, the weather avoidance algorithm requests the resolution generator to resolve it. The request includes constraints on the preference order and type of resolution that is acceptable for weather induced conflicts. Altitude resolutions are preferred, because they preserve the existing weather-avoidance path. If they are unsuccessful, a path-stretch manoeuvre is tried where the return waypoint for the path stretch is chosen to be the auxiliary waypoint for the weather-avoidance manoeuvre. In that case, the composite trajectory contains two auxiliary waypoints, one for weather and one for conflict avoidance. It should be mentioned that the resolver also ensures that the path-stretch manoeuvre does not re-enter the weather-cell area.
<fig id="fig11-0954410011417347" position="float"><label>Fig. 11</label><caption><p>Resolution of weather avoidance induced conflict</p></caption><graphic xlink:href="10.1177_0954410011417347-fig11.tif"/></fig></p>
<p>The trajectories obtained from this procedure are adequate for those weather-cell encounters that require heading changes at the auxiliary waypoint of less than ∼90 degrees. When this limit is exceeded, or if the tangent rays do not intersect, a procedure requiring two waypoints is used, as illustrated in <xref ref-type="fig" rid="fig12-0954410011417347">Fig. 12</xref>. While the shape of the weather cell as well as the encounter scenario shown in <xref ref-type="fig" rid="fig12-0954410011417347">Fig. 12</xref> appears extreme, they were selected to demonstrate the ability of the two-waypoint approach to handle unusual scenarios. In a recent human-in-the-loop simulation that included weather, controllers occasionally used multiple waypoints and large heading changes to re-route traffic around wide areas of convective weather cells, resulting in paths similar to the one in <xref ref-type="fig" rid="fig12-0954410011417347">Fig. 12</xref>. These observations of controller techniques suggested the need for handling extreme situations and motivated the two-waypoint approach.
<fig id="fig12-0954410011417347" position="float"><label>Fig. 12</label><caption><p>Use of two auxiliary waypoints for large-turn angle resolutions (finding a way out of a box canyon weather cell)</p></caption><graphic xlink:href="10.1177_0954410011417347-fig12.tif"/></fig></p>
<p>The procedure for the two-waypoint resolution begins the same way as for the single waypoint case. It uses the tangent-ray calculation software to determine two tangent rays to the weather-cell polygon, one emanating from the current aircraft position and the other emanating from a specified return waypoint in the backward direction. Then, a trial location is chosen for the first auxiliary waypoint a short distance past the point of tangency of the ray emanating from the aircraft position. Next, a tangency ray emanating from the trial first waypoint location is calculated. The coordinates of the trial second waypoint are fixed by the intersection of two tangency rays, one emanating from the first and the second from the return waypoint. The coordinates as well as the lengths of two segments are obtained as the solution of two simultaneous linear equations defined by the two rays. If the rays intercept, the total length of the resolution path is calculated by summing the known lengths of the three path segments. The first trial waypoint is now moved an incremental distance (10 nautical miles) further along the tangency ray and the previous calculations are repeated to determine a new value for the path length. Incremental iteration of the first waypoint location is repeated until the minimum value of path length is found. Thus, the solution obtained by this iteration process determines the smallest delay weather avoidance path defined by three linear path segments and two auxiliary waypoints. It is possible that the initial location of the first waypoint may not yield a tangency line that intercepts the third tangent line. In such a situation, the trial first waypoint location is moved in increments until an interception point is found. Before accepting the two-waypoint solution, the algorithm checks whether the length of the middle segment exceeds a minimum value (20 nautical miles). If it does not, the one-waypoint solution described earlier is computed to replace the two-waypoint solution.</p>
<p>Convective weather generally consists of multiple subcells that resemble an irregular wall with small gaps between subcells stretching across several 100 miles of airspace. An extension of the procedure described above for a single cell has been developed to avoid multiple cells with gaps. The procedure combines a conflict cell with a neighbouring cell if a resolution trajectory of the original cell conflicts with a neighbouring cell. Then, the two-waypoint algorithm is reapplied to the combination cell. This process continues until a trajectory that is free of convection cell conflicts is obtained.</p>
</sec>
<sec id="sec16-0954410011417347"><title>7 WEB-ACCESSIBLE DOCUMENTATION AND SIMULATION RESULTS</title>
<p>The Autoresolver, comprising the resolution generator, arrival manager, and weather avoidance algorithm, has been implemented in software and written in Java. The Autoresolver is linked to a fast-time simulation in an ongoing effort to improve the algorithms and evaluate their performance. In addition, a web-based data-analysis tool was developed for analysing simulation results. The tool saves the output of simulation runs and provides users access to various statistical measures of algorithm performance as well as lists of resolved conflicts, trial trajectory iterations, and graphs of resolution trajectories [<bold><xref ref-type="bibr" rid="bibr13-0954410011417347">13</xref></bold>]. The website also contains an interactive software design document that allows users to examine logical decision variables used in the resolution process and follow branches in the decision tree that lead to various resolution types. The online document identifies more than 20 resolution types used by the Autoresolver, including certain types not described in this article. A recent enhancement to the web-based tool is the addition of an interactive workbench for examining resolutions generated by the hvt algorithm. A graphical interface allows a user to change initial conditions by grabbing and dragging aircraft icons and then to observe the effect on resolution trajectories.</p>
<p>The advanced concepts evaluation system (ACES) was chosen as the fast-time simulation environment for development and testing of the Autoresolver [<bold><xref ref-type="bibr" rid="bibr14-0954410011417347">14</xref></bold>]. ACES uses as input flight plans of traffic recorded over a 24-h period on a selected date. All flights that operate in US airspace on that date are included in the recorded flight plans. The simulation uses these flight plans together with aircraft performance models to generate pseudo radar tracks. The Autoresolver, upon receiving these tracks and flight plans, issues resolution trajectories to aircraft in conflict, which respond to the trajectories in a way similar to the way live traffic would. Furthermore, ACES has the ability to scale up the originally recorded traffic level by replicating flight plans a specified number of times. The performance of the Autoresolver, including all three of its resolution and problem-solving functions, could thus be evaluated at traffic levels expected in future years.</p>
<p><xref ref-type="fig" rid="fig13-0954410011417347">Figure 13</xref> shows simulation results of Autoresolver performance for the Cleveland Center at three traffic levels, corresponding to current level, 1×, and two future levels, 2× and 3×. Arrivals to all major airports in the Center are included. The performance measure shown is the average delay generated by the resolution manoeuvres. All detected non-arrival conflicts, defined as those not involving two arrivals destined to the same arrival fix, were resolved. The delays for the three traffic levels ranged from a few seconds at 1× to about 10 s at 3×. These delays are reduced by a factor of 3 compared to those obtained in reference [<bold><xref ref-type="bibr" rid="bibr2-0954410011417347">2</xref></bold>] for comparable traffic levels. The reductions are attributable to optimization of resolutions performed by the resolution generator. Resolution delays grow with increasing traffic levels as one would expect, but they remain relatively low even at 3×.
<fig id="fig13-0954410011417347" position="float"><label>Fig. 13</label><caption><p>Resolution delays at 1×, 2×, and 3× traffic levels, Cleveland Center; arrival delays for Detroit airport (DTW)</p></caption><graphic xlink:href="10.1177_0954410011417347-fig13.tif"/></fig></p>
<p>The resolution of arrival conflicts was limited to those that could be sequenced and scheduled with less than 5 min of delay. This restriction was necessary at the 2× and 3× levels because these levels exceeded the capacity of the four arrival fixes used in current operations at the Detroit airport. Without a limit on arrival traffic, path-stretch delays would become unrealistically long and holding would be necessary. Simulation runs conducted without the 5-min limit found that the arrival manager was still able to sequence the higher traffic levels conflict-free, although at the cost of very large delays. In practice, the traffic flow management systems would limit the rate of arrival traffic upstream well before excessive delays could build up at an airport. Average arrival delays of 48 s at the 1× traffic level are found to be about 50 per cent less than the delays obtained for the same condition in the earlier study [<bold><xref ref-type="bibr" rid="bibr2-0954410011417347">2</xref></bold>]. These delay reductions can be attributed to the arrival manager's improved handling of arrival traffic. A direct comparison of performance could be made only at the 1× level, because at this level the 5-min delay limit was not exceeded for arrivals during the sequencing process. Since the arrival manager did not accept those aircraft that required delays exceeding the 5-min limit at the 2× and 3× traffic levels, delay comparisons are not meaningful at these traffic levels. It should be noted that the arrival delays for 2× and 3× traffic levels shown in <xref ref-type="fig" rid="fig13-0954410011417347">Fig. 13</xref> are for only those aircraft that were sequenced and had experienced less than 5-min delays. The percentages of jet arrivals that exceeded the 5-min limit and were removed at freeze time were 5 per cent at 2× and 16 per cent at 3× traffic levels, respectively. These percentages indicate that the four arrival gates for jets at the Detroit airport become saturated at about the 2× traffic level. These and other statistical data for the simulation runs can be found at the website [<bold><xref ref-type="bibr" rid="bibr13-0954410011417347">13</xref></bold>].</p>
<p><xref ref-type="table" rid="table1-0954410011417347">Table 1</xref> gives the percentage of resolutions contributed by each of 11 resolution types for the three traffic levels. The table also lists the total number of simulated flights and conflicts resolved at each traffic level. Path stretches are the most frequently used manoeuvre, contributing approximately 38 per cent to the total. Next in order are step and temporary altitude manoeuvres, followed by Direct-To. Together, the top four make up 80 per cent of the total resolution manoeuvres. Nevertheless, the less frequently used manoeuvres such as speed and descent speed profile are critically important in the arrival management process, where they play a significant role in resolving sequencing conflicts. While the offset was not often the selected manoeuvre, it is an important alternative manoeuvre available for controllers or pilots to select instead of path stretches. The low percentage of the hvt manoeuvre is primarily the result of the small number of conflicts that were detected with less than 5 min to loss of separation, which was the chosen eligibility time for this type. Most conflicts are detected and resolved at larger than 5 min to first loss. The data in the table also show that the percentage of each manoeuvre type used in resolutions changes little with traffic level.
<table-wrap id="table1-0954410011417347" position="float"><label>Table 1</label><caption><p>Resolution statistics for three traffic levels, Cleveland Center, ACES fast time simulation</p></caption>
<graphic alternate-form-of="table1-0954410011417347" xlink:href="10.1177_0954410011417347-table1.tif"/>
<table frame="hsides"><thead align="left">
<tr><th>Traffic level</th>
<th>1×</th>
<th>2×</th>
<th>3×</th></tr></thead>
<tbody align="left">
<tr>
<td>Number of flights in 24 h</td>
<td>7434</td>
<td>15 385</td>
<td>26 833</td></tr>
<tr>
<td>Number of conflicts</td>
<td>1040</td>
<td>3887</td>
<td>10 865</td></tr>
<tr>
<td>Direct-To, % of total</td>
<td>12</td>
<td>11</td>
<td>11</td></tr>
<tr>
<td>Horizontal vector turn (%)</td>
<td>0.8</td>
<td>0.4</td>
<td>0.6</td></tr>
<tr>
<td>Path stretch (%)</td>
<td>37</td>
<td>39</td>
<td>39</td></tr>
<tr>
<td>Route offset (%)</td>
<td>1.8</td>
<td>2.5</td>
<td>2.7</td></tr>
<tr>
<td>Step altitude (%)</td>
<td>18</td>
<td>18</td>
<td>23</td></tr>
<tr>
<td>Temporary altitude, climb (%)</td>
<td>12</td>
<td>15</td>
<td>13</td></tr>
<tr>
<td>Temporary altitude, arrival (%)</td>
<td>2.7</td>
<td>2.9</td>
<td>2.5</td></tr>
<tr>
<td>Cruise speed (%)</td>
<td>7</td>
<td>7</td>
<td>4</td></tr>
<tr>
<td>Descent speed profile (%)</td>
<td>8</td>
<td>6</td>
<td>4</td></tr>
<tr>
<td>Reduced cruise altitude (%)</td>
<td>0.48</td>
<td>0.13</td>
<td>0.1</td></tr>
<tr>
<td>Path stretch plus speed (%)</td>
<td>0.2</td>
<td>0.23</td>
<td>0.7</td></tr>
</tbody>
</table>
</table-wrap></p>
<p>Though not included in the table, the percentage of conflicts with multiple resolution options was found to be 99 per cent for en-route and 84 per cent for arrival conflicts. This percentage was only slightly affected by changes in traffic density. The number of multiple resolutions is lower for arrivals than for en-route conflicts because time constraints and arrival gate crossing restrictions imposed on arrivals limit the ability to make trajectory changes. However, since resolving loss-of-separation conflicts takes precedence over time constraints, the arrival manager will relax the time constraints to generate more resolution options when necessary. When the time constraint is relaxed, the available trial path-stretch resolutions are limited only by the delay increments that are permitted.</p>
<p>The number of resolutions performed on average by an aircraft passing through the Center's airspace is also of interest. It can be computed for each traffic level by dividing row 2 numbers by row 1 numbers in <xref ref-type="table" rid="table1-0954410011417347">Table 1</xref>, yielding 14 per cent for 1×, 25 per cent for 2× and 41 per cent for 3×. These averages are seen to increase approximately as a linear function of traffic density. The number of conflicts, on the other hand, shown in row 2, increases approximately as the square of traffic density.</p>
<p>The software for the algorithm allows users to favour a specified class of manoeuvres from the set of alternatives by means of a preference parameter. This parameter, whose unit is delay time, can, for example, be set to favour horizontal over vertical manoeuvres or offsets over path stretches until the preference delay value is exceeded. A consequence of giving delay preference to a class of manoeuvres is that a non-minimum delay time manoeuvre will be selected.</p>
<p>NASA has conducted several human-in-the-loop simulations that included both the Autoresolver and TSAFE, to evaluate operational concepts for automation-assisted separation assurance [<bold><xref ref-type="bibr" rid="bibr7-0954410011417347">7</xref></bold>, <bold><xref ref-type="bibr" rid="bibr15-0954410011417347">15</xref></bold>, <bold><xref ref-type="bibr" rid="bibr16-0954410011417347">16</xref></bold>]. Controllers have generally found the resolutions offered by the Autoresolver acceptable and, using it as a decision support tool, were able to handle substantially increased traffic levels. Additional simulations are planned to further assess controller workload and acceptability issues.</p>
</sec>
<sec id="sec17-0954410011417347"><title>8 EVOLUTIONARY PATH TO AUTOMATED SEPARATION ASSURANCE</title>
<p>Major changes in air traffic control operations have historically evolved gradually, often over decades. It is therefore important to consider evolutionary steps that could lead towards higher levels of automation over a period of time. The system architecture and the algorithms outlined in this article should be considered as the final step in a future air traffic system that will include a high level of automation, but they also lend themselves to operational implementation in evolutionary steps. The two main options for stepwise implementation are short-range conflict resolution and strategic conflict resolution. As described in reference [<bold><xref ref-type="bibr" rid="bibr4-0954410011417347">4</xref></bold>], the first option, which is referred to as TSAFE, would be a paradigm-shifting step in that it would remove the controller from responsibility for both detection and resolution of short-range conflicts. The two supporting technologies required for implementing this option are the data link built into Mode S and the onboard systems required for TCAS level 2. These technologies are already in operational use and could be adapted for this application with relatively minor modifications to systems onboard aircraft. In addition, the short-range detection and resolution algorithm would also have to be implemented in the ground system. Controller and pilot acceptability of the concept must be assessed in combined controller and pilot in-the-loop simulations. Alternatively, it may also possible to implement TSAFE or similar technologies as an airborne separation-assurance system that is less dependent on ground-based systems. Airborne separation assurance is the subject of research at institutes throughout the world.</p>
<p>The second option would be to implement strategic conflict resolution using an algorithm such as the Autoresolver described in this article. The Autoresolver would have to be integrated into the ground system where it would initially be used as a decision support tool by controllers. Controllers would issue the resolution trajectories to equipped aircraft primarily via data link. This option is critically dependent on the installation of a ground-air data link in a large proportion of aircraft. Such a data link is under development and is expected to become operational in a few years. Once a data link becomes widely available, automated up-linking of trajectories could be implemented first in high-altitude en-route airspace and then could be followed later by implementation in transition airspace near airports. In this option, controllers continue to be responsibility for separation assurance, unchanged from current operations. After both the short-range and strategic resolution functions have been successfully used as independent systems over a period of time, these functions could be merged to operate as an integrated system, thereby achieving a level of automated separation assurance envisioned for an advanced version of NextGen.</p>
</sec>
<sec id="sec18-0954410011417347"><title>9 CONCLUDING REMARKS</title>
<p>This article describes a set of algorithms that solve three types of problems encountered in automated separation assurance. Because the three types of problems, defined as conflict resolution, arrival management, and weather avoidance, can arise separately or in any combination, the design described in the article unifies and integrates the separate algorithms for solving these three problems. The algorithm for conflict resolution improves upon an earlier version by generating different types of resolutions for each conflict and then ranking the successful resolutions in time-delay order. This design change responds to requests for alternative solutions from experimental users of the algorithm. It has also improved the efficiency of resolutions by significantly reducing the average time delay. The arrival manager solves the combined problems of sequencing, spacing, and conflict resolution of arrival traffic. It can be operated either in a stand-alone mode or in a mode integrated with an arrival-traffic metering system. A weather-avoidance algorithm re-routes aircraft around convection cells using up to two auxiliary waypoints. It also ensures that conflicts are resolved and arrivals sequenced without penetrating weather cells. The maximum benefit from the trajectories generated by the algorithms will be achieved using a data link to uplink them to the target aircraft. The article suggests a roadmap for deploying automated separation-assurance functions in evolutionary steps, leading eventually to a system with increased efficiency and capacity, wherein controllers have substantially less responsibility for separation assurance than in today's operations.</p>
</sec>
</body>
<back>
<ref-list>
<title>REFERENCES</title>
<ref id="bibr1-0954410011417347"><label>1</label><citation citation-type="confproc"><person-group person-group-type="author"><name><surname>Erzberger</surname><given-names>H.</given-names></name></person-group> <article-title>Transforming the NAS: The next generation air traffic control system</article-title>, <conf-name>Proceedings of the 24th International Congress of the Aeronautical Sciences</conf-name> <conf-date>29 August–3 September 2004</conf-date>, <conf-loc>Yokohama, Japan</conf-loc></citation></ref>
<ref id="bibr2-0954410011417347"><label>2</label><citation citation-type="confproc"><person-group person-group-type="author"><name><surname>Erzberger</surname><given-names>H.</given-names></name></person-group> <article-title>Automated conflict resolution for air traffic control</article-title>, <conf-name>Proceedings of the 25th International Congress of the Aeronautical Sciences</conf-name> <conf-date>3–8 September 2006</conf-date>, <conf-loc>Hamburg, Germany</conf-loc></citation></ref>
<ref id="bibr3-0954410011417347"><label>3</label><citation citation-type="confproc"><person-group person-group-type="author"><name><surname>Farley</surname><given-names>T.</given-names></name><name><surname>Erzberger</surname><given-names>H.</given-names></name></person-group> <article-title>Fast time air traffic simulation of a conflict resolution algorithm under high air traffic demand</article-title>, <conf-name>Proceedings of the UAS/Europe ATM R&amp;D Seminar</conf-name> <conf-date>2–5 July 2007</conf-date>, <conf-loc>Barcelona, Spain</conf-loc></citation></ref>
<ref id="bibr4-0954410011417347"><label>4</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Erzberger</surname><given-names>H.</given-names></name><name><surname>Heere</surname><given-names>K.</given-names></name></person-group> <article-title>Algorithm and operational concept for resolving short range conflicts</article-title>. <source>Proc. IMechE Part G J Aerospace Engineering</source>, <year>2010</year>, <volume>224</volume>, <comment>(G2) 225–243 DOI 101243/09544100JAERO546</comment>.</citation></ref>
<ref id="bibr5-0954410011417347"><label>5</label><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Andrews</surname><given-names>J.</given-names></name><name><surname>Erzberger</surname><given-names>H.</given-names></name><name><surname>Welch</surname><given-names>J.</given-names></name></person-group> <article-title>Safety analysis for advanced separation concepts</article-title>. <source>Air Traffic Control Qtly</source>, <year>2006</year>, <volume>14</volume>, <comment>(1)5–24</comment>.</citation></ref>
<ref id="bibr6-0954410011417347"><label>6</label><citation citation-type="confproc"><person-group person-group-type="author"><name><surname>Kupfer</surname><given-names>M.</given-names></name><name><surname>Farley</surname><given-names>T.</given-names></name><name><surname>Chu</surname><given-names>Y.</given-names></name><name><surname>Erzberger</surname><given-names>H.</given-names></name></person-group> <article-title>Automated conflict resolution - A simulation-based sensitivity study of airspace and demand</article-title>, <conf-name>Proceedings of the 26th International Congress of the Aeronautical Sciences</conf-name> <conf-date>14–19 September 2008</conf-date>, <conf-loc>Anchorage, Alaska</conf-loc></citation></ref>
<ref id="bibr7-0954410011417347"><label>7</label><citation citation-type="confproc"><person-group person-group-type="author"><name><surname>Prevot</surname><given-names>T.</given-names></name><name><surname>Homola</surname><given-names>J.</given-names></name><name><surname>Mercer</surname><given-names>J.</given-names></name><name><surname>Mainini</surname><given-names>M.</given-names></name><name><surname>Cabrall</surname><given-names>C.</given-names></name></person-group> <article-title>Initial evaluation of air/ground operations with ground-based automated separation assurance</article-title>, <conf-name>Proceedings of the 8th USA/Europe ATM R&amp;D Seminar</conf-name> <conf-date>29 June–2 July 2009</conf-date>, <conf-loc>Napa, California</conf-loc></citation></ref>
<ref id="bibr8-0954410011417347"><label>8</label><citation citation-type="confproc"><person-group person-group-type="author"><name><surname>Erzberger</surname><given-names>H.</given-names></name><name><surname>Paielli</surname><given-names>R.</given-names></name><name><surname>Isaacson</surname><given-names>D.</given-names></name><name><surname>Eshow</surname><given-names>M.</given-names></name></person-group> <article-title>Conflict prediction and resolution in the presence of prediction errors</article-title>, <conf-name>Proceedings of the 1st USA/Europe ATM R&amp;D Seminar</conf-name> <conf-date>17–19 June 1997</conf-date>, <conf-loc>Saclay, France</conf-loc></citation></ref>
<ref id="bibr9-0954410011417347"><label>9</label><citation citation-type="confproc"><person-group person-group-type="author"><name><surname>McNally</surname><given-names>D.</given-names></name><name><surname>Engelland</surname><given-names>S.</given-names></name><name><surname>Bach</surname><given-names>R.</given-names></name><name><surname>Chan</surname><given-names>W.</given-names></name><name><surname>Brasil</surname><given-names>C.</given-names></name><name><surname>Gong</surname><given-names>C.</given-names></name><name><surname>Frey</surname><given-names>J.</given-names></name><name><surname>Vincent</surname><given-names>D.</given-names></name></person-group> <article-title>Operational evaluation of the direct-to controller tool</article-title>, <conf-name>Proceedings of the 4th USA/Europe ATM R&amp;D Seminar</conf-name> <conf-date>4–7 December 2001</conf-date>, <conf-loc>Santa Fe, New Mexico</conf-loc></citation></ref>
<ref id="bibr10-0954410011417347"><label>10</label><citation citation-type="other"><comment>Bach, R., Farrell, C., and Erzberger, H. An algorithm for level-aircraft conflict resolution, report no. NASA/CR-2009-214573, NASA Ames Research Center, Moffett Field, California, February 2009</comment>.</citation></ref>
<ref id="bibr11-0954410011417347"><label>11</label><citation citation-type="confproc"><person-group person-group-type="author"><name><surname>Lauderdale</surname><given-names>T.</given-names></name><name><surname>Santiago</surname><given-names>C.</given-names></name><name><surname>Pankok</surname><given-names>C.</given-names></name></person-group> <article-title>A computer simulation of the system-wide effects of parallel offset route maneuvers</article-title>, <conf-name>AIAA Guidance, Navigation and Control Conference</conf-name> <conf-date>2–5 August 2010</conf-date>, <conf-loc>Toronto, Canada</conf-loc></citation></ref>
<ref id="bibr12-0954410011417347"><label>12</label><citation citation-type="confproc"><person-group person-group-type="author"><name><surname>Swenson</surname><given-names>H.</given-names></name><name><surname>Hoang</surname><given-names>T.</given-names></name><name><surname>Engelland</surname><given-names>S.</given-names></name></person-group> <article-title>Design and operational evaluation of the traffic management advisor at the Fort Worth Air Route Traffic Control Center</article-title>, <conf-name>Proceedings of the 1st USA/Europe ATM R&amp;D Seminar</conf-name> <conf-date>17–19 June 1997</conf-date>, <conf-loc>Saclay, France</conf-loc></citation></ref>
<ref id="bibr13-0954410011417347"><label>13</label><citation citation-type="other"><comment>Website for performance statistics, resolution trajectories and software documentation of Autoresolver algorithm described in this paper and in references 2, 3 and 6, available from <ext-link ext-link-type="uri" xlink:href="http://airtrafficconflictresolutions.arc.nasa.gov">http://airtrafficconflictresolutions.arc.nasa.gov</ext-link>. Accessed 18 July 2011</comment>.</citation></ref>
<ref id="bibr14-0954410011417347"><label>14</label><citation citation-type="confproc"><person-group person-group-type="author"><name><surname>Meyn</surname><given-names>L.</given-names></name><name><surname>Windhorst</surname><given-names>R.</given-names></name><name><surname>Roth</surname><given-names>K.</given-names></name><name><surname>Drei</surname><given-names>D. V.</given-names></name><name><surname>Ku-bat</surname><given-names>G.</given-names></name><name><surname>Manikonda</surname><given-names>V.</given-names></name><name><surname>Roney</surname><given-names>S.</given-names></name><name><surname>Hunter</surname><given-names>G.</given-names></name><name><surname>Couluris</surname><given-names>G.</given-names></name></person-group> <article-title>Build 4 of the airspace concepts evaluation system</article-title>, <conf-name>Proceedings of the AIAA Modeling and Simulation Technologies Conference and Exhibit</conf-name> <conf-date>21–24 August 2006</conf-date>, <conf-loc>Keystone, Colorado</conf-loc></citation></ref>
<ref id="bibr15-0954410011417347"><label>15</label><citation citation-type="confproc"><person-group person-group-type="author"><name><surname>Mercer</surname><given-names>J.</given-names></name><name><surname>Prevot</surname><given-names>T.</given-names></name><name><surname>Brasil</surname><given-names>C.</given-names></name><name><surname>Mainini</surname><given-names>M.</given-names></name><name><surname>Kupfer</surname><given-names>M.</given-names></name><name><surname>Smith</surname><given-names>N.</given-names></name></person-group> <article-title>An integrated tool suite for en route radar controllers in NextGen</article-title>, <conf-name>Proceedings of the 27th International Congress of the Aeronautical Sciences</conf-name> <conf-date>19–24 September 2010</conf-date>, <conf-loc>Nice, France</conf-loc></citation></ref>
<ref id="bibr16-0954410011417347"><label>16</label><citation citation-type="other"><person-group person-group-type="author"><name><surname>Prevot</surname><given-names>T.</given-names></name><name><surname>Homola</surname><given-names>J.</given-names></name><name><surname>Martin</surname><given-names>L.</given-names></name><name><surname>Mercer</surname><given-names>J.</given-names></name><name><surname>Cabrall</surname><given-names>C.</given-names></name></person-group><comment> Automated air traffic control operations with weather and time constraints. In Proceedings of the 9th USA/Europe Air Traffic Management Research and Development Seminar, Berlin, Germany, 14–17 June 2011</comment>.</citation></ref>
</ref-list>
</back>
</article>